/* Generated by Yosys 0.39+1 (git sha1 b3124f30e, x86_64-w64-mingw32-g++ 13.2.1 -Os) */

module \$paramod$170963f8ce395e45e1b6bf6be200a9f4d63be4c1\generic_fifo_sc_a (clk, rst, clr, din, we, dout, re, full, empty, full_r, empty_r, full_n, empty_n, full_n_r, empty_n_r, level);
  wire [6:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire [5:0] _007_;
  wire [5:0] _008_;
  wire [5:0] _009_;
  wire [5:0] _010_;
  wire [5:0] _011_;
  wire [6:0] _012_;
  wire [6:0] _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire [1:0] _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire [6:0] _098_;
  wire _099_;
  wire [6:0] _100_;
  wire _101_;
  wire [6:0] _102_;
  wire _103_;
  wire [6:0] _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire [5:0] _138_;
  wire _139_;
  wire [5:0] _140_;
  wire _141_;
  wire [5:0] _142_;
  wire _143_;
  wire [5:0] _144_;
  wire _145_;
  wire [5:0] _146_;
  wire _147_;
  wire [5:0] _148_;
  wire _149_;
  input clk;
  wire clk;
  input clr;
  wire clr;
  reg [6:0] cnt;
  input [7:0] din;
  wire [7:0] din;
  output [7:0] dout;
  wire [7:0] dout;
  output empty;
  wire empty;
  output empty_n;
  wire empty_n;
  output empty_n_r;
  reg empty_n_r;
  output empty_r;
  reg empty_r;
  output full;
  wire full;
  output full_n;
  wire full_n;
  output full_n_r;
  reg full_n_r;
  output full_r;
  reg full_r;
  reg gb;
  reg gb2;
  output [1:0] level;
  wire [1:0] level;
  input re;
  wire re;
  reg [5:0] rp;
  wire [5:0] rp_pl1;
  input rst;
  wire rst;
  input we;
  wire we;
  reg [5:0] wp;
  wire [5:0] wp_pl1;
  wire [5:0] wp_pl2;
  assign _009_ = wp + 6'h01;
  assign _010_ = wp + 6'h02;
  assign _011_ = rp + 6'h01;
  assign _012_ = cnt + 7'h7f;
  assign _013_ = cnt + 7'h01;
  assign _014_ = _039_ & _053_;
  assign _015_ = _040_ & gb;
  assign _016_ = _041_ & we;
  assign _017_ = _042_ & we;
  assign _018_ = _076_ & re;
  assign _019_ = _043_ & gb2;
  assign _020_ = we & _019_;
  assign _021_ = _020_ & _057_;
  assign _022_ = re & _079_;
  assign _023_ = _022_ & _059_;
  assign _024_ = we & _080_;
  assign _025_ = _024_ & _061_;
  assign _026_ = _044_ & _062_;
  assign _027_ = re & _026_;
  assign _028_ = _027_ & _063_;
  assign _029_ = re & _066_;
  assign _030_ = _067_ & we;
  assign _031_ = we & _045_;
  assign _032_ = _031_ & _069_;
  assign _033_ = re & _047_;
  assign _034_ = _033_ & _070_;
  assign _035_ = we & _046_;
  assign _036_ = _035_ & _072_;
  assign _037_ = re & _048_;
  assign _038_ = _037_ & _073_;
  assign _039_ = wp == rp;
  assign _040_ = wp == rp;
  assign _041_ = wp_pl1 == rp;
  assign _042_ = wp_pl2 == rp;
  assign _043_ = wp_pl1 == rp;
  assign _044_ = wp == rp_pl1;
  assign _045_ = cnt >= 32'd4294967295;
  assign _046_ = cnt >= 32'd64;
  assign _047_ = cnt <= 32'd0;
  assign _048_ = cnt <= 32'd65;
  assign _049_ = ! rst;
  assign _050_ = ! rst;
  assign _051_ = ! rst;
  assign _052_ = ! rst;
  assign _053_ = ! gb;
  assign _054_ = ! rst;
  assign _055_ = ! rst;
  assign _056_ = ! rst;
  assign _057_ = ! re;
  assign _058_ = ! gb2;
  assign _059_ = ! we;
  assign _060_ = ! rst;
  assign _061_ = ! re;
  assign _062_ = ! gb2;
  assign _063_ = ! we;
  assign _064_ = ! _075_;
  assign _065_ = ! rst;
  assign _066_ = ! we;
  assign _067_ = ! re;
  assign _068_ = ! rst;
  assign _069_ = ! re;
  assign _070_ = ! we;
  assign _071_ = ! rst;
  assign _072_ = ! re;
  assign _073_ = ! we;
  assign _074_ = cnt < 32'd0;
  assign _075_ = cnt < 32'd65;
  assign _076_ = wp != rp;
  assign _077_ = wp_pl1 != rp;
  assign _078_ = wp != rp_pl1;
  assign _079_ = _077_ | _058_;
  assign _080_ = _078_ | gb2;
  assign _081_ = { cnt[6], cnt[6] } | cnt[5:4];
  always @(posedge clk)
    full_n_r <= _088_;
  always @(posedge clk)
    empty_n_r <= _096_;
  always @(posedge clk)
    cnt <= _104_;
  always @(posedge clk)
    empty_r <= _112_;
  always @(posedge clk)
    full_r <= _120_;
  always @(posedge clk)
    gb2 <= _128_;
  always @(posedge clk)
    gb <= _136_;
  always @(posedge clk)
    rp <= _142_;
  always @(posedge clk)
    wp <= _148_;
  assign _082_ = _083_ ? 1'h0 : full_n_r;
  assign _084_ = _085_ ? 1'h1 : _082_;
  assign _086_ = _087_ ? 1'h0 : _084_;
  assign _088_ = rst ? _086_ : 1'h0;
  assign _090_ = _091_ ? 1'h1 : empty_n_r;
  assign _092_ = _093_ ? 1'h0 : _090_;
  assign _094_ = _095_ ? 1'h1 : _092_;
  assign _096_ = rst ? _094_ : 1'h1;
  assign _098_ = _099_ ? _013_ : cnt;
  assign _100_ = _101_ ? _012_ : _098_;
  assign _102_ = _103_ ? 7'h00 : _100_;
  assign _104_ = rst ? _102_ : 7'h00;
  assign _106_ = _107_ ? 1'h1 : empty_r;
  assign _108_ = _109_ ? 1'h0 : _106_;
  assign _110_ = _111_ ? 1'h1 : _108_;
  assign _112_ = rst ? _110_ : 1'h1;
  assign _114_ = _115_ ? 1'h0 : full_r;
  assign _116_ = _117_ ? 1'h1 : _114_;
  assign _118_ = _119_ ? 1'h0 : _116_;
  assign _120_ = rst ? _118_ : 1'h0;
  assign _122_ = _123_ ? 1'h0 : gb2;
  assign _124_ = _125_ ? 1'h1 : _122_;
  assign _126_ = _127_ ? 1'h0 : _124_;
  assign _128_ = rst ? _126_ : 1'h0;
  assign _130_ = _131_ ? 1'h0 : gb;
  assign _132_ = _133_ ? 1'h1 : _130_;
  assign _134_ = _135_ ? 1'h0 : _132_;
  assign _136_ = rst ? _134_ : 1'h0;
  assign _138_ = _139_ ? _011_ : rp;
  assign _140_ = _141_ ? 6'h00 : _138_;
  assign _142_ = rst ? _140_ : 6'h00;
  assign _144_ = _145_ ? _009_ : wp;
  assign _146_ = _147_ ? 6'h00 : _144_;
  assign _148_ = rst ? _146_ : 6'h00;
  \$paramod$a637ee2d0b9b2dd4e075a1cb20fc2f75abf9c453\generic_dpram  u0 (
    .di(din),
    .\do (dout),
    .oe(1'h1),
    .raddr(rp),
    .rce(1'h1),
    .rclk(clk),
    .rrst(_049_),
    .waddr(wp),
    .wce(1'h1),
    .wclk(clk),
    .we(we),
    .wrst(_050_)
  );
  assign wp_pl1 = _009_;
  assign wp_pl2 = _010_;
  assign rp_pl1 = _011_;
  assign empty = _014_;
  assign full = _015_;
  assign empty_n = _074_;
  assign full_n = _064_;
  assign level = _081_;
  assign _083_ = _038_;
  assign _085_ = _036_;
  assign _087_ = clr;
  assign _089_ = _071_;
  assign _003_ = _088_;
  assign _091_ = _034_;
  assign _093_ = _032_;
  assign _095_ = clr;
  assign _097_ = _068_;
  assign _001_ = _096_;
  assign _099_ = _030_;
  assign _101_ = _029_;
  assign _103_ = clr;
  assign _105_ = _065_;
  assign _000_ = _104_;
  assign _107_ = _028_;
  assign _109_ = _025_;
  assign _111_ = clr;
  assign _113_ = _060_;
  assign _002_ = _112_;
  assign _115_ = _023_;
  assign _117_ = _021_;
  assign _119_ = clr;
  assign _121_ = _056_;
  assign _004_ = _120_;
  assign _123_ = _018_;
  assign _125_ = _017_;
  assign _127_ = clr;
  assign _129_ = _055_;
  assign _005_ = _128_;
  assign _131_ = re;
  assign _133_ = _016_;
  assign _135_ = clr;
  assign _137_ = _054_;
  assign _006_ = _136_;
  assign _139_ = re;
  assign _141_ = clr;
  assign _143_ = _052_;
  assign _007_ = _142_;
  assign _145_ = we;
  assign _147_ = clr;
  assign _149_ = _051_;
  assign _008_ = _148_;
endmodule

module \$paramod$29a704771d1a366e9079d73384eed490f854b27d\async_fifo (wr_clk, wr_reset_n, wr_en, wr_data, full, afull, wr_total_free_space, rd_clk, rd_reset_n, rd_en, empty, aempty, rd_total_aval, rd_data);
  wire [3:0] _000_;
  wire [7:0] _001_;
  wire [7:0] _002_;
  wire [4:0] _003_;
  wire [4:0] _004_;
  wire [8:0] _005_;
  wire [8:0] _006_;
  wire [4:0] _007_;
  wire [4:0] _008_;
  wire [8:0] _009_;
  wire [8:0] _010_;
  wire [1:0] _011_;
  wire [2:0] _012_;
  wire [1:0] _013_;
  wire [2:0] _014_;
  wire [1:0] _015_;
  wire [2:0] _016_;
  wire [1:0] _017_;
  wire [2:0] _018_;
  wire [1:0] _019_;
  wire [2:0] _020_;
  wire [1:0] _021_;
  wire [2:0] _022_;
  wire [1:0] _023_;
  wire [2:0] _024_;
  wire [1:0] _025_;
  wire [2:0] _026_;
  wire [1:0] _027_;
  wire [2:0] _028_;
  wire [1:0] _029_;
  wire [2:0] _030_;
  wire [1:0] _031_;
  wire [2:0] _032_;
  wire [1:0] _033_;
  wire [2:0] _034_;
  wire [1:0] _035_;
  wire [2:0] _036_;
  wire [1:0] _037_;
  wire [2:0] _038_;
  wire [1:0] _039_;
  wire [2:0] _040_;
  wire [1:0] _041_;
  wire [2:0] _042_;
  wire _043_;
  wire _044_;
  wire [4:0] _045_;
  wire [4:0] _046_;
  wire [4:0] _047_;
  wire [4:0] _048_;
  wire [4:0] _049_;
  wire [4:0] _050_;
  wire [4:0] _051_;
  wire [4:0] _052_;
  wire [4:0] _053_;
  wire [4:0] _054_;
  wire [8:0] _055_;
  wire [4:0] _056_;
  wire [8:0] _057_;
  wire [4:0] _058_;
  wire [4:0] _059_;
  wire [8:0] _060_;
  wire [4:0] _061_;
  wire [8:0] _062_;
  wire [4:0] _063_;
  wire [4:0] _064_;
  wire [4:0] _065_;
  wire [4:0] _066_;
  wire [4:0] _067_;
  wire [4:0] _068_;
  wire [4:0] _069_;
  wire [4:0] _070_;
  wire [3:0] _071_;
  wire [7:0] _072_;
  wire [7:0] _073_;
  wire [4:0] _074_;
  wire [4:0] _075_;
  wire [8:0] _076_;
  wire [8:0] _077_;
  wire [4:0] _078_;
  wire [4:0] _079_;
  wire [8:0] _080_;
  wire [8:0] _081_;
  wire [1:0] _082_;
  wire [1:0] _083_;
  wire [1:0] _084_;
  wire [1:0] _085_;
  wire [1:0] _086_;
  wire [1:0] _087_;
  wire [1:0] _088_;
  wire [1:0] _089_;
  wire [1:0] _090_;
  wire [2:0] _091_;
  wire [1:0] _092_;
  wire [2:0] _093_;
  wire [1:0] _094_;
  wire [2:0] _095_;
  wire [1:0] _096_;
  wire [2:0] _097_;
  wire [1:0] _098_;
  wire [2:0] _099_;
  wire [1:0] _100_;
  wire [2:0] _101_;
  wire [1:0] _102_;
  wire [2:0] _103_;
  wire [1:0] _104_;
  wire [2:0] _105_;
  wire [4:0] _106_;
  wire [4:0] _107_;
  wire [4:0] _108_;
  wire [4:0] _109_;
  wire [8:0] _110_;
  wire [8:0] _111_;
  wire [4:0] _112_;
  wire [4:0] _113_;
  wire [8:0] _114_;
  wire [8:0] _115_;
  wire [1:0] _116_;
  wire [1:0] _117_;
  wire [1:0] _118_;
  wire [1:0] _119_;
  wire [1:0] _120_;
  wire [1:0] _121_;
  wire [1:0] _122_;
  wire [1:0] _123_;
  wire [1:0] _124_;
  wire [2:0] _125_;
  wire [1:0] _126_;
  wire [2:0] _127_;
  wire [1:0] _128_;
  wire [2:0] _129_;
  wire [1:0] _130_;
  wire [2:0] _131_;
  wire [1:0] _132_;
  wire [2:0] _133_;
  wire [1:0] _134_;
  wire [2:0] _135_;
  wire [1:0] _136_;
  wire [2:0] _137_;
  wire [1:0] _138_;
  wire [2:0] _139_;
  wire [1:0] _140_;
  wire [1:0] _141_;
  wire [1:0] _142_;
  wire [1:0] _143_;
  wire [1:0] _144_;
  wire [1:0] _145_;
  wire [1:0] _146_;
  wire [1:0] _147_;
  wire [1:0] _148_;
  wire [1:0] _149_;
  wire [1:0] _150_;
  wire [1:0] _151_;
  wire [1:0] _152_;
  wire [1:0] _153_;
  wire [1:0] _154_;
  wire [1:0] _155_;
  wire [1:0] _156_;
  wire [1:0] _157_;
  wire [1:0] _158_;
  wire [1:0] _159_;
  wire [1:0] _160_;
  wire [1:0] _161_;
  wire [1:0] _162_;
  wire [1:0] _163_;
  wire [1:0] _164_;
  wire [1:0] _165_;
  wire [1:0] _166_;
  wire [1:0] _167_;
  wire [1:0] _168_;
  wire [1:0] _169_;
  wire [1:0] _170_;
  wire [1:0] _171_;
  wire [4:0] _172_;
  wire [4:0] _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire [7:0] _189_;
  reg [3:0] _190_;
  reg [7:0] _191_;
  reg [7:0] _192_;
  wire _193_;
  wire [1:0] _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire [1:0] _199_;
  wire _200_;
  wire [1:0] _201_;
  wire _202_;
  wire _203_;
  wire _204_;
  wire _205_;
  wire [1:0] _206_;
  wire _207_;
  wire [1:0] _208_;
  wire _209_;
  wire [1:0] _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire [1:0] _215_;
  wire _216_;
  wire [1:0] _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire _221_;
  wire [1:0] _222_;
  wire _223_;
  wire [1:0] _224_;
  wire _225_;
  wire [1:0] _226_;
  wire _227_;
  wire _228_;
  wire [1:0] _229_;
  wire _230_;
  wire [1:0] _231_;
  wire _232_;
  wire _233_;
  wire [1:0] _234_;
  wire _235_;
  wire [1:0] _236_;
  wire _237_;
  wire [4:0] _238_;
  wire _239_;
  wire [1:0] _240_;
  wire _241_;
  wire _242_;
  wire _243_;
  wire _244_;
  wire [1:0] _245_;
  wire _246_;
  wire [1:0] _247_;
  wire _248_;
  wire _249_;
  wire _250_;
  wire _251_;
  wire [1:0] _252_;
  wire _253_;
  wire [1:0] _254_;
  wire _255_;
  wire [1:0] _256_;
  wire _257_;
  wire _258_;
  wire _259_;
  wire _260_;
  wire [1:0] _261_;
  wire _262_;
  wire [1:0] _263_;
  wire _264_;
  wire _265_;
  wire _266_;
  wire _267_;
  wire [1:0] _268_;
  wire _269_;
  wire [1:0] _270_;
  wire _271_;
  wire [1:0] _272_;
  wire _273_;
  wire _274_;
  wire [1:0] _275_;
  wire _276_;
  wire [1:0] _277_;
  wire _278_;
  wire _279_;
  wire [1:0] _280_;
  wire _281_;
  wire [1:0] _282_;
  wire _283_;
  wire [4:0] _284_;
  wire _285_;
  wire _286_;
  wire _287_;
  wire [1:0] _288_;
  wire _289_;
  wire [1:0] _290_;
  wire _291_;
  wire _292_;
  wire [1:0] _293_;
  wire _294_;
  wire [1:0] _295_;
  wire _296_;
  wire [1:0] _297_;
  wire _298_;
  wire _299_;
  wire _300_;
  wire _301_;
  wire [1:0] _302_;
  wire _303_;
  wire [1:0] _304_;
  wire _305_;
  wire [1:0] _306_;
  wire _307_;
  wire _308_;
  wire _309_;
  wire _310_;
  wire [1:0] _311_;
  wire _312_;
  wire [1:0] _313_;
  wire _314_;
  wire [1:0] _315_;
  wire _316_;
  wire [1:0] _317_;
  wire _318_;
  wire [1:0] _319_;
  wire _320_;
  wire _321_;
  wire _322_;
  wire _323_;
  wire [1:0] _324_;
  wire _325_;
  wire [1:0] _326_;
  wire _327_;
  wire [1:0] _328_;
  wire _329_;
  wire _330_;
  wire _331_;
  wire _332_;
  wire [1:0] _333_;
  wire _334_;
  wire [1:0] _335_;
  wire _336_;
  wire [1:0] _337_;
  wire _338_;
  wire [1:0] _339_;
  wire _340_;
  wire [4:0] _341_;
  wire _342_;
  wire [1:0] _343_;
  wire _344_;
  wire [1:0] _345_;
  wire _346_;
  wire [1:0] _347_;
  wire _348_;
  wire [2:0] _349_;
  wire _350_;
  wire [1:0] _351_;
  wire _352_;
  wire [1:0] _353_;
  wire _354_;
  wire [2:0] _355_;
  wire _356_;
  wire [1:0] _357_;
  wire _358_;
  wire [1:0] _359_;
  wire _360_;
  wire [2:0] _361_;
  wire _362_;
  wire [1:0] _363_;
  wire _364_;
  wire [1:0] _365_;
  wire _366_;
  wire [2:0] _367_;
  wire _368_;
  wire [8:0] _369_;
  wire _370_;
  wire [4:0] _371_;
  wire _372_;
  wire _373_;
  wire _374_;
  wire _375_;
  wire _376_;
  wire _377_;
  wire _378_;
  wire [4:0] _379_;
  wire _380_;
  wire [4:0] _381_;
  wire _382_;
  wire [7:0] _383_;
  wire _384_;
  wire [7:0] _385_;
  wire _386_;
  wire [3:0] _387_;
  wire _388_;
  wire _389_;
  wire _390_;
  wire [1:0] _391_;
  wire _392_;
  wire [1:0] _393_;
  wire _394_;
  wire _395_;
  wire [1:0] _396_;
  wire _397_;
  wire [1:0] _398_;
  wire _399_;
  wire [1:0] _400_;
  wire _401_;
  wire _402_;
  wire _403_;
  wire _404_;
  wire [1:0] _405_;
  wire _406_;
  wire [1:0] _407_;
  wire _408_;
  wire [1:0] _409_;
  wire _410_;
  wire _411_;
  wire _412_;
  wire _413_;
  wire [1:0] _414_;
  wire _415_;
  wire [1:0] _416_;
  wire _417_;
  wire [1:0] _418_;
  wire _419_;
  wire [1:0] _420_;
  wire _421_;
  wire [1:0] _422_;
  wire _423_;
  wire _424_;
  wire _425_;
  wire _426_;
  wire [1:0] _427_;
  wire _428_;
  wire [1:0] _429_;
  wire _430_;
  wire [1:0] _431_;
  wire _432_;
  wire _433_;
  wire _434_;
  wire _435_;
  wire [1:0] _436_;
  wire _437_;
  wire [1:0] _438_;
  wire _439_;
  wire [1:0] _440_;
  wire _441_;
  wire [1:0] _442_;
  wire _443_;
  wire [4:0] _444_;
  wire _445_;
  wire [1:0] _446_;
  wire _447_;
  wire [1:0] _448_;
  wire _449_;
  wire [1:0] _450_;
  wire _451_;
  wire [2:0] _452_;
  wire _453_;
  wire [1:0] _454_;
  wire _455_;
  wire [1:0] _456_;
  wire _457_;
  wire [2:0] _458_;
  wire _459_;
  wire [1:0] _460_;
  wire _461_;
  wire [1:0] _462_;
  wire _463_;
  wire [2:0] _464_;
  wire _465_;
  wire [1:0] _466_;
  wire _467_;
  wire [1:0] _468_;
  wire _469_;
  wire [2:0] _470_;
  wire _471_;
  wire [8:0] _472_;
  wire _473_;
  wire [4:0] _474_;
  wire _475_;
  wire _476_;
  wire _477_;
  wire _478_;
  wire _479_;
  wire _480_;
  wire _481_;
  wire [4:0] _482_;
  wire _483_;
  wire [4:0] _484_;
  wire _485_;
  wire [7:0] _486_;
  wire [4:0] _487_;
  wire [4:0] _488_;
  wire [4:0] _489_;
  wire [31:0] _490_;
  wire [31:0] _491_;
  wire [31:0] _492_;
  wire [31:0] _493_;
  wire _494_;
  wire _495_;
  wire _496_;
  wire _497_;
  output aempty;
  wire aempty;
  wire aempty_c;
  output afull;
  wire afull;
  wire afull_c;
  reg [4:0] \bin2grey$func$async_fifo.v:136$1774.$result ;
  reg [4:0] \bin2grey$func$async_fifo.v:136$1774.bin ;
  reg [8:0] \bin2grey$func$async_fifo.v:136$1774.bin_8 ;
  reg [8:0] \bin2grey$func$async_fifo.v:136$1774.grey_8 ;
  reg [4:0] \bin2grey$func$async_fifo.v:202$1781.$result ;
  reg [4:0] \bin2grey$func$async_fifo.v:202$1781.bin ;
  reg [8:0] \bin2grey$func$async_fifo.v:202$1781.bin_8 ;
  reg [8:0] \bin2grey$func$async_fifo.v:202$1781.grey_8 ;
  wire [1:0] \do_bin$func$async_fifo.v:260$1789.$result ;
  wire [2:0] \do_bin$func$async_fifo.v:260$1789.grey ;
  wire [1:0] \do_bin$func$async_fifo.v:260$1795.$result ;
  wire [2:0] \do_bin$func$async_fifo.v:260$1795.grey ;
  wire [1:0] \do_bin$func$async_fifo.v:261$1790.$result ;
  wire [2:0] \do_bin$func$async_fifo.v:261$1790.grey ;
  wire [1:0] \do_bin$func$async_fifo.v:261$1796.$result ;
  wire [2:0] \do_bin$func$async_fifo.v:261$1796.grey ;
  wire [1:0] \do_bin$func$async_fifo.v:262$1791.$result ;
  wire [2:0] \do_bin$func$async_fifo.v:262$1791.grey ;
  wire [1:0] \do_bin$func$async_fifo.v:262$1797.$result ;
  wire [2:0] \do_bin$func$async_fifo.v:262$1797.grey ;
  wire [1:0] \do_bin$func$async_fifo.v:263$1792.$result ;
  wire [2:0] \do_bin$func$async_fifo.v:263$1792.grey ;
  wire [1:0] \do_bin$func$async_fifo.v:263$1798.$result ;
  wire [2:0] \do_bin$func$async_fifo.v:263$1798.grey ;
  reg [1:0] \do_grey$func$async_fifo.v:244$1775.$result ;
  reg [2:0] \do_grey$func$async_fifo.v:244$1775.bin ;
  reg [1:0] \do_grey$func$async_fifo.v:244$1782.$result ;
  reg [2:0] \do_grey$func$async_fifo.v:244$1782.bin ;
  reg [1:0] \do_grey$func$async_fifo.v:245$1776.$result ;
  reg [2:0] \do_grey$func$async_fifo.v:245$1776.bin ;
  reg [1:0] \do_grey$func$async_fifo.v:245$1783.$result ;
  reg [2:0] \do_grey$func$async_fifo.v:245$1783.bin ;
  reg [1:0] \do_grey$func$async_fifo.v:246$1777.$result ;
  reg [2:0] \do_grey$func$async_fifo.v:246$1777.bin ;
  reg [1:0] \do_grey$func$async_fifo.v:246$1784.$result ;
  reg [2:0] \do_grey$func$async_fifo.v:246$1784.bin ;
  reg [1:0] \do_grey$func$async_fifo.v:247$1778.$result ;
  reg [2:0] \do_grey$func$async_fifo.v:247$1778.bin ;
  reg [1:0] \do_grey$func$async_fifo.v:247$1785.$result ;
  reg [2:0] \do_grey$func$async_fifo.v:247$1785.bin ;
  output empty;
  wire empty;
  wire empty_c;
  reg empty_q;
  output full;
  wire full;
  wire full_c;
  reg full_q;
  wire [4:0] \get_cnt$func$async_fifo.v:117$1773.$result ;
  wire [4:0] \get_cnt$func$async_fifo.v:117$1787.$result ;
  wire [4:0] \get_cnt$func$async_fifo.v:117$1787.rd_ptr ;
  wire [4:0] \get_cnt$func$async_fifo.v:117$1787.wr_ptr ;
  wire [4:0] \get_cnt$func$async_fifo.v:183$1780.$result ;
  wire [4:0] \get_cnt$func$async_fifo.v:183$1793.$result ;
  wire [4:0] \get_cnt$func$async_fifo.v:183$1793.rd_ptr ;
  wire [4:0] \get_cnt$func$async_fifo.v:183$1793.wr_ptr ;
  wire [4:0] \grey2bin$func$async_fifo.v:172$1779.$result ;
  wire [4:0] \grey2bin$func$async_fifo.v:172$1788.$result ;
  wire [8:0] \grey2bin$func$async_fifo.v:172$1788.bin_8 ;
  wire [4:0] \grey2bin$func$async_fifo.v:172$1788.grey ;
  wire [8:0] \grey2bin$func$async_fifo.v:172$1788.grey_8 ;
  wire [4:0] \grey2bin$func$async_fifo.v:234$1786.$result ;
  wire [4:0] \grey2bin$func$async_fifo.v:234$1794.$result ;
  wire [8:0] \grey2bin$func$async_fifo.v:234$1794.bin_8 ;
  wire [4:0] \grey2bin$func$async_fifo.v:234$1794.grey ;
  wire [8:0] \grey2bin$func$async_fifo.v:234$1794.grey_8 ;
  reg [4:0] grey_rd_ptr;
  wire [4:0] grey_rd_ptr_dly;
  reg [4:0] grey_wr_ptr;
  wire [4:0] grey_wr_ptr_dly;
  input rd_clk;
  wire rd_clk;
  wire [4:0] rd_cnt;
  output [7:0] rd_data;
  wire [7:0] rd_data;
  input rd_en;
  wire rd_en;
  reg [4:0] rd_ptr;
  wire [4:0] rd_ptr_inc;
  input rd_reset_n;
  wire rd_reset_n;
  output [4:0] rd_total_aval;
  wire [4:0] rd_total_aval;
  wire [4:0] sync_rd_ptr;
  reg [4:0] sync_rd_ptr_0;
  reg [4:0] sync_rd_ptr_1;
  wire [4:0] sync_wr_ptr;
  reg [4:0] sync_wr_ptr_0;
  reg [4:0] sync_wr_ptr_1;
  wire [4:0] sync_wr_ptr_dec;
  input wr_clk;
  wire wr_clk;
  wire [4:0] wr_cnt;
  input [7:0] wr_data;
  wire [7:0] wr_data;
  input wr_en;
  wire wr_en;
  reg [4:0] wr_ptr;
  wire [4:0] wr_ptr_inc;
  input wr_reset_n;
  wire wr_reset_n;
  output [4:0] wr_total_free_space;
  wire [4:0] wr_total_free_space;
  reg [7:0] mem [15:0];
  always @(posedge wr_clk) begin
    if (_073_[0])
      mem[_071_][0:0] <= _072_[0];
    if (_073_[1])
      mem[_071_][1:1] <= _072_[1];
    if (_073_[2])
      mem[_071_][2:2] <= _072_[2];
    if (_073_[3])
      mem[_071_][3:3] <= _072_[3];
    if (_073_[4])
      mem[_071_][4:4] <= _072_[4];
    if (_073_[5])
      mem[_071_][5:5] <= _072_[5];
    if (_073_[6])
      mem[_071_][6:6] <= _072_[6];
    if (_073_[7])
      mem[_071_][7:7] <= _072_[7];
  end
  assign _189_ = mem[rd_ptr[3:0]];
  assign _172_ = wr_ptr + 1'h1;
  assign _173_ = rd_ptr + 1'h1;
  assign _174_ = wr_cnt == 5'h10;
  assign _175_ = wr_cnt == 5'h0f;
  assign _176_ = wr_cnt == 5'h0f;
  assign _177_ = ! rd_cnt;
  assign _178_ = rd_cnt == 5'h01;
  assign _179_ = rd_cnt == 5'h01;
  assign _180_ = wr_ptr >= sync_rd_ptr;
  assign _181_ = sync_wr_ptr >= rd_ptr;
  assign _182_ = full_q && _188_;
  assign _183_ = empty_q && _193_;
  assign _184_ = ! wr_reset_n;
  assign _185_ = ! wr_reset_n;
  assign _186_ = ! rd_reset_n;
  assign _187_ = ! rd_reset_n;
  assign _188_ = wr_cnt < 8'h10;
  assign _193_ = | rd_cnt;
  always @(posedge rd_clk, negedge rd_reset_n)
    if (!rd_reset_n) sync_wr_ptr_0 <= 5'h00;
    else sync_wr_ptr_0 <= grey_wr_ptr;
  always @(posedge rd_clk, negedge rd_reset_n)
    if (!rd_reset_n) sync_wr_ptr_1 <= 5'h00;
    else sync_wr_ptr_1 <= sync_wr_ptr_0;
  always @(posedge rd_clk, negedge rd_reset_n)
    if (!rd_reset_n) grey_rd_ptr <= 5'h00;
    else grey_rd_ptr <= _381_;
  always @(posedge rd_clk, negedge rd_reset_n)
    if (!rd_reset_n) rd_ptr <= 5'h00;
    else rd_ptr <= _379_;
  always @(posedge rd_clk, negedge rd_reset_n)
    if (!rd_reset_n) empty_q <= 1'h1;
    else empty_q <= _377_;
  always @(posedge rd_clk, negedge rd_reset_n)
    if (!rd_reset_n) \bin2grey$func$async_fifo.v:202$1781.$result  <= 5'hxx;
    else \bin2grey$func$async_fifo.v:202$1781.$result  <= 5'hxx;
  always @(posedge rd_clk, negedge rd_reset_n)
    if (!rd_reset_n) \bin2grey$func$async_fifo.v:202$1781.bin  <= 5'hxx;
    else \bin2grey$func$async_fifo.v:202$1781.bin  <= 5'hxx;
  always @(posedge rd_clk, negedge rd_reset_n)
    if (!rd_reset_n) \bin2grey$func$async_fifo.v:202$1781.bin_8  <= 9'hxxx;
    else \bin2grey$func$async_fifo.v:202$1781.bin_8  <= 9'hxxx;
  always @(posedge rd_clk, negedge rd_reset_n)
    if (!rd_reset_n) \bin2grey$func$async_fifo.v:202$1781.grey_8  <= 9'hxxx;
    else \bin2grey$func$async_fifo.v:202$1781.grey_8  <= 9'hxxx;
  always @(posedge rd_clk, negedge rd_reset_n)
    if (!rd_reset_n) \do_grey$func$async_fifo.v:244$1782.$result  <= 2'hx;
    else \do_grey$func$async_fifo.v:244$1782.$result  <= 2'hx;
  always @(posedge rd_clk, negedge rd_reset_n)
    if (!rd_reset_n) \do_grey$func$async_fifo.v:244$1782.bin  <= 3'hx;
    else \do_grey$func$async_fifo.v:244$1782.bin  <= 3'hx;
  always @(posedge rd_clk, negedge rd_reset_n)
    if (!rd_reset_n) \do_grey$func$async_fifo.v:245$1783.$result  <= 2'hx;
    else \do_grey$func$async_fifo.v:245$1783.$result  <= 2'hx;
  always @(posedge rd_clk, negedge rd_reset_n)
    if (!rd_reset_n) \do_grey$func$async_fifo.v:245$1783.bin  <= 3'hx;
    else \do_grey$func$async_fifo.v:245$1783.bin  <= 3'hx;
  always @(posedge rd_clk, negedge rd_reset_n)
    if (!rd_reset_n) \do_grey$func$async_fifo.v:246$1784.$result  <= 2'hx;
    else \do_grey$func$async_fifo.v:246$1784.$result  <= 2'hx;
  always @(posedge rd_clk, negedge rd_reset_n)
    if (!rd_reset_n) \do_grey$func$async_fifo.v:246$1784.bin  <= 3'hx;
    else \do_grey$func$async_fifo.v:246$1784.bin  <= 3'hx;
  always @(posedge rd_clk, negedge rd_reset_n)
    if (!rd_reset_n) \do_grey$func$async_fifo.v:247$1785.$result  <= 2'hx;
    else \do_grey$func$async_fifo.v:247$1785.$result  <= 2'hx;
  always @(posedge rd_clk, negedge rd_reset_n)
    if (!rd_reset_n) \do_grey$func$async_fifo.v:247$1785.bin  <= 3'hx;
    else \do_grey$func$async_fifo.v:247$1785.bin  <= 3'hx;
  always @(posedge wr_clk, negedge wr_reset_n)
    if (!wr_reset_n) sync_rd_ptr_0 <= 5'h00;
    else sync_rd_ptr_0 <= grey_rd_ptr;
  always @(posedge wr_clk, negedge wr_reset_n)
    if (!wr_reset_n) sync_rd_ptr_1 <= 5'h00;
    else sync_rd_ptr_1 <= sync_rd_ptr_0;
  always @(posedge wr_clk)
    _190_ <= _387_;
  always @(posedge wr_clk)
    _191_ <= _385_;
  always @(posedge wr_clk)
    _192_ <= _383_;
  always @(posedge wr_clk, negedge wr_reset_n)
    if (!wr_reset_n) wr_ptr <= 5'h00;
    else wr_ptr <= _484_;
  always @(posedge wr_clk, negedge wr_reset_n)
    if (!wr_reset_n) grey_wr_ptr <= 5'h00;
    else grey_wr_ptr <= _482_;
  always @(posedge wr_clk, negedge wr_reset_n)
    if (!wr_reset_n) full_q <= 1'h0;
    else full_q <= _480_;
  always @(posedge wr_clk, negedge wr_reset_n)
    if (!wr_reset_n) \bin2grey$func$async_fifo.v:136$1774.$result  <= 5'hxx;
    else \bin2grey$func$async_fifo.v:136$1774.$result  <= 5'hxx;
  always @(posedge wr_clk, negedge wr_reset_n)
    if (!wr_reset_n) \bin2grey$func$async_fifo.v:136$1774.bin  <= 5'hxx;
    else \bin2grey$func$async_fifo.v:136$1774.bin  <= 5'hxx;
  always @(posedge wr_clk, negedge wr_reset_n)
    if (!wr_reset_n) \bin2grey$func$async_fifo.v:136$1774.bin_8  <= 9'hxxx;
    else \bin2grey$func$async_fifo.v:136$1774.bin_8  <= 9'hxxx;
  always @(posedge wr_clk, negedge wr_reset_n)
    if (!wr_reset_n) \bin2grey$func$async_fifo.v:136$1774.grey_8  <= 9'hxxx;
    else \bin2grey$func$async_fifo.v:136$1774.grey_8  <= 9'hxxx;
  always @(posedge wr_clk, negedge wr_reset_n)
    if (!wr_reset_n) \do_grey$func$async_fifo.v:244$1775.$result  <= 2'hx;
    else \do_grey$func$async_fifo.v:244$1775.$result  <= 2'hx;
  always @(posedge wr_clk, negedge wr_reset_n)
    if (!wr_reset_n) \do_grey$func$async_fifo.v:244$1775.bin  <= 3'hx;
    else \do_grey$func$async_fifo.v:244$1775.bin  <= 3'hx;
  always @(posedge wr_clk, negedge wr_reset_n)
    if (!wr_reset_n) \do_grey$func$async_fifo.v:245$1776.$result  <= 2'hx;
    else \do_grey$func$async_fifo.v:245$1776.$result  <= 2'hx;
  always @(posedge wr_clk, negedge wr_reset_n)
    if (!wr_reset_n) \do_grey$func$async_fifo.v:245$1776.bin  <= 3'hx;
    else \do_grey$func$async_fifo.v:245$1776.bin  <= 3'hx;
  always @(posedge wr_clk, negedge wr_reset_n)
    if (!wr_reset_n) \do_grey$func$async_fifo.v:246$1777.$result  <= 2'hx;
    else \do_grey$func$async_fifo.v:246$1777.$result  <= 2'hx;
  always @(posedge wr_clk, negedge wr_reset_n)
    if (!wr_reset_n) \do_grey$func$async_fifo.v:246$1777.bin  <= 3'hx;
    else \do_grey$func$async_fifo.v:246$1777.bin  <= 3'hx;
  always @(posedge wr_clk, negedge wr_reset_n)
    if (!wr_reset_n) \do_grey$func$async_fifo.v:247$1778.$result  <= 2'hx;
    else \do_grey$func$async_fifo.v:247$1778.$result  <= 2'hx;
  always @(posedge wr_clk, negedge wr_reset_n)
    if (!wr_reset_n) \do_grey$func$async_fifo.v:247$1778.bin  <= 3'hx;
    else \do_grey$func$async_fifo.v:247$1778.bin  <= 3'hx;
  function [1:0] _553_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _553_ = b[1:0];
      4'b??1?:
        _553_ = b[3:2];
      4'b?1??:
        _553_ = b[5:4];
      4'b1???:
        _553_ = b[7:6];
      default:
        _553_ = a;
    endcase
  endfunction
  assign _194_ = _553_(2'hx, 8'h1b, { _198_, _197_, _196_, _195_ });
  assign _195_ = sync_wr_ptr_1[1:0] == 2'h2;
  assign _196_ = sync_wr_ptr_1[1:0] == 2'h3;
  assign _197_ = sync_wr_ptr_1[1:0] == 2'h1;
  assign _198_ = ! sync_wr_ptr_1[1:0];
  assign _199_ = _200_ ? 2'hx : _194_;
  function [1:0] _559_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _559_ = b[1:0];
      4'b??1?:
        _559_ = b[3:2];
      4'b?1??:
        _559_ = b[5:4];
      4'b1???:
        _559_ = b[7:6];
      default:
        _559_ = a;
    endcase
  endfunction
  assign _201_ = _559_(2'hx, 8'h1b, { _205_, _204_, _203_, _202_ });
  assign _202_ = ! sync_wr_ptr_1[1:0];
  assign _203_ = sync_wr_ptr_1[1:0] == 2'h1;
  assign _204_ = sync_wr_ptr_1[1:0] == 2'h3;
  assign _205_ = sync_wr_ptr_1[1:0] == 2'h2;
  assign _206_ = _207_ ? _201_ : 2'hx;
  assign _208_ = _209_ ? _123_ : _147_;
  function [1:0] _566_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _566_ = b[1:0];
      4'b??1?:
        _566_ = b[3:2];
      4'b?1??:
        _566_ = b[5:4];
      4'b1???:
        _566_ = b[7:6];
      default:
        _566_ = a;
    endcase
  endfunction
  assign _210_ = _566_(2'hx, 8'h1b, { _214_, _213_, _212_, _211_ });
  assign _211_ = sync_wr_ptr_1[3:2] == 2'h2;
  assign _212_ = sync_wr_ptr_1[3:2] == 2'h3;
  assign _213_ = sync_wr_ptr_1[3:2] == 2'h1;
  assign _214_ = ! sync_wr_ptr_1[3:2];
  assign _215_ = _216_ ? 2'hx : _210_;
  function [1:0] _572_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _572_ = b[1:0];
      4'b??1?:
        _572_ = b[3:2];
      4'b?1??:
        _572_ = b[5:4];
      4'b1???:
        _572_ = b[7:6];
      default:
        _572_ = a;
    endcase
  endfunction
  assign _217_ = _572_(2'hx, 8'h1b, { _221_, _220_, _219_, _218_ });
  assign _218_ = ! sync_wr_ptr_1[3:2];
  assign _219_ = sync_wr_ptr_1[3:2] == 2'h1;
  assign _220_ = sync_wr_ptr_1[3:2] == 2'h3;
  assign _221_ = sync_wr_ptr_1[3:2] == 2'h2;
  assign _222_ = _223_ ? _217_ : 2'hx;
  assign _224_ = _225_ ? _121_ : _145_;
  function [1:0] _579_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _579_ = b[1:0];
      2'b1?:
        _579_ = b[3:2];
      default:
        _579_ = a;
    endcase
  endfunction
  assign _226_ = _579_(2'hx, 4'h1, { _228_, _227_ });
  assign _228_ = ~ sync_wr_ptr_1[4];
  function [1:0] _581_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _581_ = b[1:0];
      2'b1?:
        _581_ = b[3:2];
      default:
        _581_ = a;
    endcase
  endfunction
  assign _231_ = _581_(2'hx, 4'hb, { _233_, _232_ });
  assign _232_ = ~ sync_wr_ptr_1[4];
  assign _238_ = _239_ ? _489_ : _493_[4:0];
  function [1:0] _584_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _584_ = b[1:0];
      4'b??1?:
        _584_ = b[3:2];
      4'b?1??:
        _584_ = b[5:4];
      4'b1???:
        _584_ = b[7:6];
      default:
        _584_ = a;
    endcase
  endfunction
  assign _240_ = _584_(2'hx, 8'h1b, { _244_, _243_, _242_, _241_ });
  assign _241_ = sync_rd_ptr_1[1:0] == 2'h2;
  assign _242_ = sync_rd_ptr_1[1:0] == 2'h3;
  assign _243_ = sync_rd_ptr_1[1:0] == 2'h1;
  assign _244_ = ! sync_rd_ptr_1[1:0];
  assign _245_ = _246_ ? 2'hx : _240_;
  function [1:0] _590_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _590_ = b[1:0];
      4'b??1?:
        _590_ = b[3:2];
      4'b?1??:
        _590_ = b[5:4];
      4'b1???:
        _590_ = b[7:6];
      default:
        _590_ = a;
    endcase
  endfunction
  assign _247_ = _590_(2'hx, 8'h1b, { _251_, _250_, _249_, _248_ });
  assign _248_ = ! sync_rd_ptr_1[1:0];
  assign _249_ = sync_rd_ptr_1[1:0] == 2'h1;
  assign _250_ = sync_rd_ptr_1[1:0] == 2'h3;
  assign _251_ = sync_rd_ptr_1[1:0] == 2'h2;
  assign _252_ = _253_ ? _247_ : 2'hx;
  assign _254_ = _255_ ? _122_ : _146_;
  function [1:0] _597_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _597_ = b[1:0];
      4'b??1?:
        _597_ = b[3:2];
      4'b?1??:
        _597_ = b[5:4];
      4'b1???:
        _597_ = b[7:6];
      default:
        _597_ = a;
    endcase
  endfunction
  assign _256_ = _597_(2'hx, 8'h1b, { _260_, _259_, _258_, _257_ });
  assign _257_ = sync_rd_ptr_1[3:2] == 2'h2;
  assign _258_ = sync_rd_ptr_1[3:2] == 2'h3;
  assign _259_ = sync_rd_ptr_1[3:2] == 2'h1;
  assign _260_ = ! sync_rd_ptr_1[3:2];
  assign _261_ = _262_ ? 2'hx : _256_;
  function [1:0] _603_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _603_ = b[1:0];
      4'b??1?:
        _603_ = b[3:2];
      4'b?1??:
        _603_ = b[5:4];
      4'b1???:
        _603_ = b[7:6];
      default:
        _603_ = a;
    endcase
  endfunction
  assign _263_ = _603_(2'hx, 8'h1b, { _267_, _266_, _265_, _264_ });
  assign _264_ = ! sync_rd_ptr_1[3:2];
  assign _265_ = sync_rd_ptr_1[3:2] == 2'h1;
  assign _266_ = sync_rd_ptr_1[3:2] == 2'h3;
  assign _267_ = sync_rd_ptr_1[3:2] == 2'h2;
  assign _268_ = _269_ ? _263_ : 2'hx;
  assign _270_ = _271_ ? _120_ : _144_;
  function [1:0] _610_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _610_ = b[1:0];
      2'b1?:
        _610_ = b[3:2];
      default:
        _610_ = a;
    endcase
  endfunction
  assign _272_ = _610_(2'hx, 4'h1, { _274_, _273_ });
  assign _274_ = ~ sync_rd_ptr_1[4];
  function [1:0] _612_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _612_ = b[1:0];
      2'b1?:
        _612_ = b[3:2];
      default:
        _612_ = a;
    endcase
  endfunction
  assign _277_ = _612_(2'hx, 4'hb, { _279_, _278_ });
  assign _278_ = ~ sync_rd_ptr_1[4];
  assign _284_ = _285_ ? _488_ : _491_[4:0];
  assign _286_ = _287_ ? 1'h0 : \bin2grey$func$async_fifo.v:202$1781.grey_8 [8];
  assign _288_ = _289_ ? _171_ : 2'hx;
  function [1:0] _617_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _617_ = b[1:0];
      2'b1?:
        _617_ = b[3:2];
      default:
        _617_ = a;
    endcase
  endfunction
  assign _290_ = _617_(2'hx, 4'h1, { _292_, _291_ });
  assign _292_ = ~ rd_ptr_inc[4];
  assign _293_ = _294_ ? _290_ : 2'hx;
  assign _295_ = _296_ ? _169_ : 2'hx;
  function [1:0] _621_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _621_ = b[1:0];
      4'b??1?:
        _621_ = b[3:2];
      4'b?1??:
        _621_ = b[5:4];
      4'b1???:
        _621_ = b[7:6];
      default:
        _621_ = a;
    endcase
  endfunction
  assign _297_ = _621_(2'hx, 8'h1e, { _301_, _300_, _299_, _298_ });
  assign _298_ = rd_ptr_inc[3:2] == 2'h3;
  assign _299_ = rd_ptr_inc[3:2] == 2'h2;
  assign _300_ = rd_ptr_inc[3:2] == 2'h1;
  assign _301_ = ! rd_ptr_inc[3:2];
  assign _302_ = _303_ ? 2'hx : _297_;
  assign _304_ = _305_ ? _302_ : 2'hx;
  function [1:0] _628_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _628_ = b[1:0];
      4'b??1?:
        _628_ = b[3:2];
      4'b?1??:
        _628_ = b[5:4];
      4'b1???:
        _628_ = b[7:6];
      default:
        _628_ = a;
    endcase
  endfunction
  assign _306_ = _628_(2'hx, 8'hb4, { _310_, _309_, _308_, _307_ });
  assign _307_ = rd_ptr_inc[3:2] == 2'h3;
  assign _308_ = rd_ptr_inc[3:2] == 2'h2;
  assign _309_ = rd_ptr_inc[3:2] == 2'h1;
  assign _310_ = ! rd_ptr_inc[3:2];
  assign _311_ = _312_ ? _306_ : 2'hx;
  assign _313_ = _314_ ? _311_ : 2'hx;
  assign _315_ = _316_ ? _159_ : _167_;
  assign _317_ = _318_ ? _315_ : 2'hx;
  function [1:0] _637_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _637_ = b[1:0];
      4'b??1?:
        _637_ = b[3:2];
      4'b?1??:
        _637_ = b[5:4];
      4'b1???:
        _637_ = b[7:6];
      default:
        _637_ = a;
    endcase
  endfunction
  assign _319_ = _637_(2'hx, 8'h1e, { _323_, _322_, _321_, _320_ });
  assign _320_ = rd_ptr_inc[1:0] == 2'h3;
  assign _321_ = rd_ptr_inc[1:0] == 2'h2;
  assign _322_ = rd_ptr_inc[1:0] == 2'h1;
  assign _323_ = ! rd_ptr_inc[1:0];
  assign _324_ = _325_ ? 2'hx : _319_;
  assign _326_ = _327_ ? _324_ : 2'hx;
  function [1:0] _644_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _644_ = b[1:0];
      4'b??1?:
        _644_ = b[3:2];
      4'b?1??:
        _644_ = b[5:4];
      4'b1???:
        _644_ = b[7:6];
      default:
        _644_ = a;
    endcase
  endfunction
  assign _328_ = _644_(2'hx, 8'hb4, { _332_, _331_, _330_, _329_ });
  assign _329_ = rd_ptr_inc[1:0] == 2'h3;
  assign _330_ = rd_ptr_inc[1:0] == 2'h2;
  assign _331_ = rd_ptr_inc[1:0] == 2'h1;
  assign _332_ = ! rd_ptr_inc[1:0];
  assign _333_ = _334_ ? _328_ : 2'hx;
  assign _335_ = _336_ ? _333_ : 2'hx;
  assign _337_ = _338_ ? _157_ : _165_;
  assign _339_ = _340_ ? _337_ : 2'hx;
  assign _341_ = _342_ ? { _153_[0], _151_, _149_ } : \bin2grey$func$async_fifo.v:202$1781.$result ;
  assign _343_ = _344_ ? _155_ : \bin2grey$func$async_fifo.v:202$1781.grey_8 [7:6];
  assign _345_ = _346_ ? _153_ : \bin2grey$func$async_fifo.v:202$1781.grey_8 [5:4];
  assign _347_ = _348_ ? _155_ : \do_grey$func$async_fifo.v:247$1785.$result ;
  assign _349_ = _350_ ? 3'h0 : \do_grey$func$async_fifo.v:247$1785.bin ;
  assign _351_ = _352_ ? _151_ : \bin2grey$func$async_fifo.v:202$1781.grey_8 [3:2];
  assign _353_ = _354_ ? _153_ : \do_grey$func$async_fifo.v:246$1784.$result ;
  assign _355_ = _356_ ? { 2'h0, _173_[4] } : \do_grey$func$async_fifo.v:246$1784.bin ;
  assign _357_ = _358_ ? _149_ : \bin2grey$func$async_fifo.v:202$1781.grey_8 [1:0];
  assign _359_ = _360_ ? _151_ : \do_grey$func$async_fifo.v:245$1783.$result ;
  assign _361_ = _362_ ? _173_[4:2] : \do_grey$func$async_fifo.v:245$1783.bin ;
  assign _363_ = _364_ ? 2'h0 : 2'hx;
  assign _365_ = _366_ ? _149_ : \do_grey$func$async_fifo.v:244$1782.$result ;
  assign _367_ = _368_ ? _173_[2:0] : \do_grey$func$async_fifo.v:244$1782.bin ;
  assign _369_ = _370_ ? { 4'h0, _173_ } : \bin2grey$func$async_fifo.v:202$1781.bin_8 ;
  assign _371_ = _372_ ? _173_ : \bin2grey$func$async_fifo.v:202$1781.bin ;
  assign _373_ = _374_ ? 1'h0 : empty_q;
  assign _375_ = _376_ ? 1'h1 : empty_q;
  assign _377_ = _378_ ? _375_ : _373_;
  assign _379_ = _380_ ? _173_ : rd_ptr;
  assign _381_ = _382_ ? { _153_[0], _151_, _149_ } : grey_rd_ptr;
  assign _383_ = _384_ ? 8'hff : 8'h00;
  assign _385_ = _386_ ? wr_data : 8'hxx;
  assign _387_ = _388_ ? wr_ptr[3:0] : 4'hx;
  assign _389_ = _390_ ? 1'h0 : \bin2grey$func$async_fifo.v:136$1774.grey_8 [8];
  assign _391_ = _392_ ? _170_ : 2'hx;
  function [1:0] _679_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _679_ = b[1:0];
      2'b1?:
        _679_ = b[3:2];
      default:
        _679_ = a;
    endcase
  endfunction
  assign _393_ = _679_(2'hx, 4'h1, { _395_, _394_ });
  assign _395_ = ~ wr_ptr_inc[4];
  assign _396_ = _397_ ? _393_ : 2'hx;
  assign _398_ = _399_ ? _168_ : 2'hx;
  function [1:0] _683_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _683_ = b[1:0];
      4'b??1?:
        _683_ = b[3:2];
      4'b?1??:
        _683_ = b[5:4];
      4'b1???:
        _683_ = b[7:6];
      default:
        _683_ = a;
    endcase
  endfunction
  assign _400_ = _683_(2'hx, 8'h1e, { _404_, _403_, _402_, _401_ });
  assign _401_ = wr_ptr_inc[3:2] == 2'h3;
  assign _402_ = wr_ptr_inc[3:2] == 2'h2;
  assign _403_ = wr_ptr_inc[3:2] == 2'h1;
  assign _404_ = ! wr_ptr_inc[3:2];
  assign _405_ = _406_ ? 2'hx : _400_;
  assign _407_ = _408_ ? _405_ : 2'hx;
  function [1:0] _690_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _690_ = b[1:0];
      4'b??1?:
        _690_ = b[3:2];
      4'b?1??:
        _690_ = b[5:4];
      4'b1???:
        _690_ = b[7:6];
      default:
        _690_ = a;
    endcase
  endfunction
  assign _409_ = _690_(2'hx, 8'hb4, { _413_, _412_, _411_, _410_ });
  assign _410_ = wr_ptr_inc[3:2] == 2'h3;
  assign _411_ = wr_ptr_inc[3:2] == 2'h2;
  assign _412_ = wr_ptr_inc[3:2] == 2'h1;
  assign _413_ = ! wr_ptr_inc[3:2];
  assign _414_ = _415_ ? _409_ : 2'hx;
  assign _416_ = _417_ ? _414_ : 2'hx;
  assign _418_ = _419_ ? _158_ : _166_;
  assign _420_ = _421_ ? _418_ : 2'hx;
  function [1:0] _699_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _699_ = b[1:0];
      4'b??1?:
        _699_ = b[3:2];
      4'b?1??:
        _699_ = b[5:4];
      4'b1???:
        _699_ = b[7:6];
      default:
        _699_ = a;
    endcase
  endfunction
  assign _422_ = _699_(2'hx, 8'h1e, { _426_, _425_, _424_, _423_ });
  assign _423_ = wr_ptr_inc[1:0] == 2'h3;
  assign _424_ = wr_ptr_inc[1:0] == 2'h2;
  assign _425_ = wr_ptr_inc[1:0] == 2'h1;
  assign _426_ = ! wr_ptr_inc[1:0];
  assign _427_ = _428_ ? 2'hx : _422_;
  assign _429_ = _430_ ? _427_ : 2'hx;
  function [1:0] _706_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _706_ = b[1:0];
      4'b??1?:
        _706_ = b[3:2];
      4'b?1??:
        _706_ = b[5:4];
      4'b1???:
        _706_ = b[7:6];
      default:
        _706_ = a;
    endcase
  endfunction
  assign _431_ = _706_(2'hx, 8'hb4, { _435_, _434_, _433_, _432_ });
  assign _432_ = wr_ptr_inc[1:0] == 2'h3;
  assign _433_ = wr_ptr_inc[1:0] == 2'h2;
  assign _434_ = wr_ptr_inc[1:0] == 2'h1;
  assign _435_ = ! wr_ptr_inc[1:0];
  assign _436_ = _437_ ? _431_ : 2'hx;
  assign _438_ = _439_ ? _436_ : 2'hx;
  assign _440_ = _441_ ? _156_ : _164_;
  assign _442_ = _443_ ? _440_ : 2'hx;
  assign _444_ = _445_ ? { _152_[0], _150_, _148_ } : \bin2grey$func$async_fifo.v:136$1774.$result ;
  assign _446_ = _447_ ? _154_ : \bin2grey$func$async_fifo.v:136$1774.grey_8 [7:6];
  assign _448_ = _449_ ? _152_ : \bin2grey$func$async_fifo.v:136$1774.grey_8 [5:4];
  assign _450_ = _451_ ? _154_ : \do_grey$func$async_fifo.v:247$1778.$result ;
  assign _452_ = _453_ ? 3'h0 : \do_grey$func$async_fifo.v:247$1778.bin ;
  assign _454_ = _455_ ? _150_ : \bin2grey$func$async_fifo.v:136$1774.grey_8 [3:2];
  assign _456_ = _457_ ? _152_ : \do_grey$func$async_fifo.v:246$1777.$result ;
  assign _458_ = _459_ ? { 2'h0, _172_[4] } : \do_grey$func$async_fifo.v:246$1777.bin ;
  assign _460_ = _461_ ? _148_ : \bin2grey$func$async_fifo.v:136$1774.grey_8 [1:0];
  assign _462_ = _463_ ? _150_ : \do_grey$func$async_fifo.v:245$1776.$result ;
  assign _464_ = _465_ ? _172_[4:2] : \do_grey$func$async_fifo.v:245$1776.bin ;
  assign _466_ = _467_ ? 2'h0 : 2'hx;
  assign _468_ = _469_ ? _148_ : \do_grey$func$async_fifo.v:244$1775.$result ;
  assign _470_ = _471_ ? _172_[2:0] : \do_grey$func$async_fifo.v:244$1775.bin ;
  assign _472_ = _473_ ? { 4'h0, _172_ } : \bin2grey$func$async_fifo.v:136$1774.bin_8 ;
  assign _474_ = _475_ ? _172_ : \bin2grey$func$async_fifo.v:136$1774.bin ;
  assign _476_ = _477_ ? 1'h0 : full_q;
  assign _478_ = _479_ ? 1'h1 : full_q;
  assign _480_ = _481_ ? _478_ : _476_;
  assign _482_ = _483_ ? { _152_[0], _150_, _148_ } : grey_wr_ptr;
  assign _484_ = _485_ ? _172_ : wr_ptr;
  assign _486_ = 8'h10 - wr_cnt;
  assign _487_ = sync_wr_ptr - 1'h1;
  assign _488_ = wr_ptr - sync_rd_ptr;
  assign _489_ = sync_wr_ptr - rd_ptr;
  assign _490_ = sync_rd_ptr - wr_ptr;
  assign _491_ = 32'd32 - _490_;
  assign _492_ = rd_ptr - sync_wr_ptr;
  assign _493_ = 32'd32 - _492_;
  assign _494_ = _174_ ? 1'h1 : 1'h0;
  assign _495_ = _175_ ? 1'h1 : 1'h0;
  assign _496_ = _177_ ? 1'h1 : 1'h0;
  assign _497_ = _178_ ? 1'h1 : 1'h0;
  assign wr_ptr_inc = _172_;
  assign wr_cnt = \get_cnt$func$async_fifo.v:117$1773.$result ;
  assign full_c = _494_;
  assign afull_c = _495_;
  assign wr_total_free_space = _486_[4:0];
  assign full = full_q;
  assign afull = afull_c;
  assign grey_rd_ptr_dly = grey_rd_ptr;
  assign sync_rd_ptr = \grey2bin$func$async_fifo.v:172$1779.$result ;
  assign rd_ptr_inc = _173_;
  assign sync_wr_ptr_dec = _487_;
  assign rd_cnt = \get_cnt$func$async_fifo.v:183$1780.$result ;
  assign empty_c = _496_;
  assign aempty_c = _497_;
  assign rd_total_aval = rd_cnt;
  assign empty = empty_q;
  assign aempty = aempty_c;
  assign rd_data = _189_;
  assign grey_wr_ptr_dly = grey_wr_ptr;
  assign sync_wr_ptr = \grey2bin$func$async_fifo.v:234$1786.$result ;
  assign _141_ = 2'h0;
  assign _083_ = _141_;
  assign _058_ = { _085_[0], _087_, _089_ };
  assign _059_ = { _085_[0], _087_, _089_ };
  assign _060_[1:0] = _089_;
  assign _025_ = _089_;
  assign _026_ = { _087_[0], sync_wr_ptr_1[1:0] };
  assign _060_[3:2] = _087_;
  assign _021_ = _087_;
  assign _022_ = { _085_[0], sync_wr_ptr_1[3:2] };
  assign _060_[5:4] = _085_;
  assign _017_ = _085_;
  assign _018_ = { _083_[0], 1'h0, sync_wr_ptr_1[4] };
  assign _060_[7:6] = _083_;
  assign _013_ = _083_;
  assign _014_ = 3'h0;
  assign _060_[8] = 1'h0;
  assign _062_ = { 4'h0, sync_wr_ptr_1 };
  assign _061_ = sync_wr_ptr_1;
  assign _049_ = _107_;
  assign _050_ = _107_;
  assign _051_ = rd_ptr;
  assign _052_ = \grey2bin$func$async_fifo.v:234$1786.$result ;
  assign _140_ = 2'h0;
  assign _082_ = _140_;
  assign _053_ = { _084_[0], _086_, _088_ };
  assign _054_ = { _084_[0], _086_, _088_ };
  assign _055_[1:0] = _088_;
  assign _023_ = _088_;
  assign _024_ = { _086_[0], sync_rd_ptr_1[1:0] };
  assign _055_[3:2] = _086_;
  assign _019_ = _086_;
  assign _020_ = { _084_[0], sync_rd_ptr_1[3:2] };
  assign _055_[5:4] = _084_;
  assign _015_ = _084_;
  assign _016_ = { _082_[0], 1'h0, sync_rd_ptr_1[4] };
  assign _055_[7:6] = _082_;
  assign _011_ = _082_;
  assign _012_ = 3'h0;
  assign _055_[8] = 1'h0;
  assign _057_ = { 4'h0, sync_rd_ptr_1 };
  assign _056_ = sync_rd_ptr_1;
  assign _045_ = _106_;
  assign _046_ = _106_;
  assign _047_ = \grey2bin$func$async_fifo.v:172$1779.$result ;
  assign _048_ = wr_ptr;
  assign _042_ = _105_;
  assign _041_ = _104_;
  assign _038_ = _101_;
  assign _037_ = _100_;
  assign _034_ = _097_;
  assign _033_ = _096_;
  assign _030_ = _093_;
  assign _029_ = _092_;
  assign _010_ = _081_;
  assign _009_ = _080_;
  assign _008_ = _079_;
  assign _007_ = _078_;
  assign _002_ = _073_;
  assign _001_ = _072_;
  assign _000_ = _071_;
  assign _040_ = _103_;
  assign _039_ = _102_;
  assign _036_ = _099_;
  assign _035_ = _098_;
  assign _032_ = _095_;
  assign _031_ = _094_;
  assign _028_ = _091_;
  assign _027_ = _090_;
  assign _006_ = _077_;
  assign _005_ = _076_;
  assign _004_ = _075_;
  assign _003_ = _074_;
  assign _200_ = _087_[0];
  assign _147_ = _199_;
  assign _207_ = _087_[0];
  assign _123_ = _206_;
  assign _209_ = _087_[0];
  assign _089_ = _208_;
  assign _216_ = _085_[0];
  assign _145_ = _215_;
  assign _223_ = _085_[0];
  assign _121_ = _222_;
  assign _225_ = _085_[0];
  assign _087_ = _224_;
  assign _230_ = _083_[0];
  assign _143_ = _229_;
  assign _235_ = _083_[0];
  assign _119_ = _234_;
  assign _237_ = _083_[0];
  assign _085_ = _236_;
  assign _239_ = _181_;
  assign _107_ = _238_;
  assign _246_ = _086_[0];
  assign _146_ = _245_;
  assign _253_ = _086_[0];
  assign _122_ = _252_;
  assign _255_ = _086_[0];
  assign _088_ = _254_;
  assign _262_ = _084_[0];
  assign _144_ = _261_;
  assign _269_ = _084_[0];
  assign _120_ = _268_;
  assign _271_ = _084_[0];
  assign _086_ = _270_;
  assign _276_ = _082_[0];
  assign _142_ = _275_;
  assign _281_ = _082_[0];
  assign _118_ = _280_;
  assign _283_ = _082_[0];
  assign _084_ = _282_;
  assign _285_ = _180_;
  assign _106_ = _284_;
  assign _069_ = sync_wr_ptr_0;
  assign _068_ = grey_wr_ptr;
  assign _287_ = rd_en;
  assign _115_[8] = _286_;
  assign _289_ = rd_en;
  assign _155_ = _288_;
  assign _294_ = rd_en;
  assign _169_ = _293_;
  assign _296_ = rd_en;
  assign _153_ = _295_;
  assign _303_ = rd_ptr_inc[4];
  assign _305_ = rd_en;
  assign _167_ = _304_;
  assign _312_ = rd_ptr_inc[4];
  assign _314_ = rd_en;
  assign _159_ = _313_;
  assign _316_ = rd_ptr_inc[4];
  assign _318_ = rd_en;
  assign _151_ = _317_;
  assign _325_ = rd_ptr_inc[2];
  assign _327_ = rd_en;
  assign _165_ = _326_;
  assign _334_ = rd_ptr_inc[2];
  assign _336_ = rd_en;
  assign _157_ = _335_;
  assign _338_ = rd_ptr_inc[2];
  assign _340_ = rd_en;
  assign _149_ = _339_;
  assign _342_ = rd_en;
  assign _112_ = _341_;
  assign _344_ = rd_en;
  assign _115_[7:6] = _343_;
  assign _346_ = rd_en;
  assign _115_[5:4] = _345_;
  assign _348_ = rd_en;
  assign _138_ = _347_;
  assign _350_ = rd_en;
  assign _139_ = _349_;
  assign _352_ = rd_en;
  assign _115_[3:2] = _351_;
  assign _354_ = rd_en;
  assign _134_ = _353_;
  assign _356_ = rd_en;
  assign _135_ = _355_;
  assign _358_ = rd_en;
  assign _115_[1:0] = _357_;
  assign _360_ = rd_en;
  assign _130_ = _359_;
  assign _362_ = rd_en;
  assign _131_ = _361_;
  assign _364_ = rd_en;
  assign _171_ = _363_;
  assign _366_ = rd_en;
  assign _126_ = _365_;
  assign _368_ = rd_en;
  assign _127_ = _367_;
  assign _370_ = rd_en;
  assign _114_ = _369_;
  assign _372_ = rd_en;
  assign _113_ = _371_;
  assign _105_ = _139_;
  assign _104_ = _138_;
  assign _101_ = _135_;
  assign _100_ = _134_;
  assign _097_ = _131_;
  assign _096_ = _130_;
  assign _093_ = _127_;
  assign _092_ = _126_;
  assign _081_ = _115_;
  assign _080_ = _114_;
  assign _079_ = _113_;
  assign _078_ = _112_;
  assign _374_ = _183_;
  assign _376_ = _179_;
  assign _378_ = rd_en;
  assign _043_ = _377_;
  assign _380_ = rd_en;
  assign _065_ = _379_;
  assign _382_ = rd_en;
  assign _063_ = _381_;
  assign _067_ = sync_rd_ptr_0;
  assign _066_ = grey_rd_ptr;
  assign _384_ = wr_en;
  assign _073_ = _383_;
  assign _386_ = wr_en;
  assign _072_ = _385_;
  assign _388_ = wr_en;
  assign _071_ = _387_;
  assign _390_ = wr_en;
  assign _111_[8] = _389_;
  assign _392_ = wr_en;
  assign _154_ = _391_;
  assign _397_ = wr_en;
  assign _168_ = _396_;
  assign _399_ = wr_en;
  assign _152_ = _398_;
  assign _406_ = wr_ptr_inc[4];
  assign _408_ = wr_en;
  assign _166_ = _407_;
  assign _415_ = wr_ptr_inc[4];
  assign _417_ = wr_en;
  assign _158_ = _416_;
  assign _419_ = wr_ptr_inc[4];
  assign _421_ = wr_en;
  assign _150_ = _420_;
  assign _428_ = wr_ptr_inc[2];
  assign _430_ = wr_en;
  assign _164_ = _429_;
  assign _437_ = wr_ptr_inc[2];
  assign _439_ = wr_en;
  assign _156_ = _438_;
  assign _441_ = wr_ptr_inc[2];
  assign _443_ = wr_en;
  assign _148_ = _442_;
  assign _445_ = wr_en;
  assign _108_ = _444_;
  assign _447_ = wr_en;
  assign _111_[7:6] = _446_;
  assign _449_ = wr_en;
  assign _111_[5:4] = _448_;
  assign _451_ = wr_en;
  assign _136_ = _450_;
  assign _453_ = wr_en;
  assign _137_ = _452_;
  assign _455_ = wr_en;
  assign _111_[3:2] = _454_;
  assign _457_ = wr_en;
  assign _132_ = _456_;
  assign _459_ = wr_en;
  assign _133_ = _458_;
  assign _461_ = wr_en;
  assign _111_[1:0] = _460_;
  assign _463_ = wr_en;
  assign _128_ = _462_;
  assign _465_ = wr_en;
  assign _129_ = _464_;
  assign _467_ = wr_en;
  assign _170_ = _466_;
  assign _469_ = wr_en;
  assign _124_ = _468_;
  assign _471_ = wr_en;
  assign _125_ = _470_;
  assign _473_ = wr_en;
  assign _110_ = _472_;
  assign _475_ = wr_en;
  assign _109_ = _474_;
  assign _103_ = _137_;
  assign _102_ = _136_;
  assign _099_ = _133_;
  assign _098_ = _132_;
  assign _095_ = _129_;
  assign _094_ = _128_;
  assign _091_ = _125_;
  assign _090_ = _124_;
  assign _077_ = _111_;
  assign _076_ = _110_;
  assign _075_ = _109_;
  assign _074_ = _108_;
  assign _477_ = _182_;
  assign _479_ = _176_;
  assign _481_ = wr_en;
  assign _044_ = _480_;
  assign _483_ = wr_en;
  assign _064_ = _482_;
  assign _485_ = wr_en;
  assign _070_ = _484_;
  assign \grey2bin$func$async_fifo.v:234$1786.$result  = { _236_[0], _224_, _208_ };
  assign \grey2bin$func$async_fifo.v:234$1794.$result  = 5'hxx;
  assign \grey2bin$func$async_fifo.v:234$1794.grey  = 5'hxx;
  assign \grey2bin$func$async_fifo.v:234$1794.grey_8  = 9'hxxx;
  assign \grey2bin$func$async_fifo.v:234$1794.bin_8  = 9'hxxx;
  assign \do_bin$func$async_fifo.v:260$1795.$result  = 2'hx;
  assign \do_bin$func$async_fifo.v:260$1795.grey  = 3'hx;
  assign \do_bin$func$async_fifo.v:261$1796.$result  = 2'hx;
  assign \do_bin$func$async_fifo.v:261$1796.grey  = 3'hx;
  assign \do_bin$func$async_fifo.v:262$1797.$result  = 2'hx;
  assign \do_bin$func$async_fifo.v:262$1797.grey  = 3'hx;
  assign \do_bin$func$async_fifo.v:263$1798.$result  = 2'hx;
  assign \do_bin$func$async_fifo.v:263$1798.grey  = 3'hx;
  assign \get_cnt$func$async_fifo.v:183$1780.$result  = _238_;
  assign \get_cnt$func$async_fifo.v:183$1793.$result  = 5'hxx;
  assign \get_cnt$func$async_fifo.v:183$1793.wr_ptr  = 5'hxx;
  assign \get_cnt$func$async_fifo.v:183$1793.rd_ptr  = 5'hxx;
  assign \grey2bin$func$async_fifo.v:172$1779.$result  = { _282_[0], _270_, _254_ };
  assign \grey2bin$func$async_fifo.v:172$1788.$result  = 5'hxx;
  assign \grey2bin$func$async_fifo.v:172$1788.grey  = 5'hxx;
  assign \grey2bin$func$async_fifo.v:172$1788.grey_8  = 9'hxxx;
  assign \grey2bin$func$async_fifo.v:172$1788.bin_8  = 9'hxxx;
  assign \do_bin$func$async_fifo.v:260$1789.$result  = 2'hx;
  assign \do_bin$func$async_fifo.v:260$1789.grey  = 3'hx;
  assign \do_bin$func$async_fifo.v:261$1790.$result  = 2'hx;
  assign \do_bin$func$async_fifo.v:261$1790.grey  = 3'hx;
  assign \do_bin$func$async_fifo.v:262$1791.$result  = 2'hx;
  assign \do_bin$func$async_fifo.v:262$1791.grey  = 3'hx;
  assign \do_bin$func$async_fifo.v:263$1792.$result  = 2'hx;
  assign \do_bin$func$async_fifo.v:263$1792.grey  = 3'hx;
  assign \get_cnt$func$async_fifo.v:117$1773.$result  = _284_;
  assign \get_cnt$func$async_fifo.v:117$1787.$result  = 5'hxx;
  assign \get_cnt$func$async_fifo.v:117$1787.wr_ptr  = 5'hxx;
  assign \get_cnt$func$async_fifo.v:117$1787.rd_ptr  = 5'hxx;
  assign _273_ = sync_rd_ptr_1[4];
  assign _275_ = _272_;
  assign _279_ = sync_rd_ptr_1[4];
  assign _280_ = 2'hx;
  assign _282_ = _142_;
  assign _227_ = sync_wr_ptr_1[4];
  assign _229_ = _226_;
  assign _233_ = sync_wr_ptr_1[4];
  assign _234_ = 2'hx;
  assign _236_ = _143_;
  assign _291_ = rd_ptr_inc[4];
  assign _394_ = wr_ptr_inc[4];
endmodule

module \$paramod$389dff3e1ebfe229ad24155dbc541c2a3c8e57d3\sync_fifo (clk, reset_n, clr, wr_en, wr_data, full, empty, rd_en, rd_data);
  wire [2:0] _000_;
  wire [7:0] _001_;
  wire [7:0] _002_;
  wire _003_;
  wire _004_;
  wire [2:0] _005_;
  wire [2:0] _006_;
  wire [2:0] _007_;
  wire [7:0] _008_;
  wire [7:0] _009_;
  wire [2:0] _010_;
  wire [2:0] _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire [7:0] _032_;
  reg [2:0] _033_;
  reg [7:0] _034_;
  reg [7:0] _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire [7:0] _040_;
  wire _041_;
  wire [7:0] _042_;
  wire _043_;
  wire [2:0] _044_;
  wire _045_;
  wire [2:0] _046_;
  wire _047_;
  wire [2:0] _048_;
  wire _049_;
  wire [2:0] _050_;
  wire _051_;
  wire [2:0] _052_;
  wire _053_;
  wire [2:0] _054_;
  wire [2:0] _055_;
  wire [2:0] _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  input clk;
  wire clk;
  input clr;
  wire clr;
  output empty;
  reg empty;
  output full;
  reg full;
  output [7:0] rd_data;
  wire [7:0] rd_data;
  input rd_en;
  wire rd_en;
  reg [2:0] rd_ptr;
  input reset_n;
  wire reset_n;
  input [7:0] wr_data;
  wire [7:0] wr_data;
  input wr_en;
  wire wr_en;
  reg [2:0] wr_ptr;
  reg [7:0] mem [7:0];
  always @(posedge clk) begin
    if (_009_[0])
      mem[_007_][0:0] <= _008_[0];
    if (_009_[1])
      mem[_007_][1:1] <= _008_[1];
    if (_009_[2])
      mem[_007_][2:2] <= _008_[2];
    if (_009_[3])
      mem[_007_][3:3] <= _008_[3];
    if (_009_[4])
      mem[_007_][4:4] <= _008_[4];
    if (_009_[5])
      mem[_007_][5:5] <= _008_[5];
    if (_009_[6])
      mem[_007_][6:6] <= _008_[6];
    if (_009_[7])
      mem[_007_][7:7] <= _008_[7];
  end
  assign _032_ = mem[rd_ptr];
  assign _010_ = rd_ptr + 1'h1;
  assign _011_ = wr_ptr + 1'h1;
  assign _012_ = rd_en & _030_;
  assign _013_ = _024_ & rd_en;
  assign _014_ = _013_ & _036_;
  assign _015_ = _025_ & _037_;
  assign _016_ = _015_ & wr_en;
  assign _017_ = _027_ & _038_;
  assign _018_ = _017_ & wr_en;
  assign _019_ = _028_ & rd_en;
  assign _020_ = _019_ & _039_;
  assign _021_ = wr_en & _031_;
  assign _022_ = ~ reset_n;
  assign _023_ = ~ reset_n;
  assign _024_ = _054_ == 3'h1;
  assign _025_ = wr_ptr == rd_ptr;
  assign _026_ = ~ reset_n;
  assign _027_ = _055_ == 3'h6;
  assign _028_ = _056_ == 3'h7;
  assign _029_ = ~ reset_n;
  assign _030_ = ! empty;
  assign _031_ = ! full;
  assign _036_ = ~ wr_en;
  assign _037_ = ~ rd_en;
  assign _038_ = ~ rd_en;
  assign _039_ = ~ wr_en;
  always @(posedge clk)
    _033_ <= _044_;
  always @(posedge clk)
    _034_ <= _042_;
  always @(posedge clk)
    _035_ <= _040_;
  always @(posedge clk, negedge reset_n)
    if (!reset_n) full <= 1'h0;
    else full <= _059_;
  always @(posedge clk, negedge reset_n)
    if (!reset_n) empty <= 1'h1;
    else empty <= _057_;
  always @(posedge clk, negedge reset_n)
    if (!reset_n) rd_ptr <= 3'h0;
    else rd_ptr <= _048_;
  always @(posedge clk, negedge reset_n)
    if (!reset_n) wr_ptr <= 3'h0;
    else wr_ptr <= _052_;
  assign _040_ = _041_ ? 8'hff : 8'h00;
  assign _042_ = _043_ ? wr_data : 8'hxx;
  assign _044_ = _045_ ? wr_ptr : 3'hx;
  assign _046_ = _047_ ? _010_ : rd_ptr;
  assign _048_ = _049_ ? 3'h0 : _046_;
  assign _050_ = _051_ ? _011_ : wr_ptr;
  assign _052_ = _053_ ? 3'h0 : _050_;
  assign _054_ = wr_ptr - rd_ptr;
  assign _055_ = wr_ptr - rd_ptr;
  assign _056_ = wr_ptr - rd_ptr;
  assign _057_ = _014_ ? 1'h1 : _058_;
  assign _058_ = _016_ ? 1'h0 : empty;
  assign _059_ = _018_ ? 1'h1 : _060_;
  assign _060_ = _020_ ? 1'h0 : full;
  assign rd_data = _032_;
  assign _002_ = _009_;
  assign _001_ = _008_;
  assign _000_ = _007_;
  assign _041_ = wr_en;
  assign _009_ = _040_;
  assign _043_ = wr_en;
  assign _008_ = _042_;
  assign _045_ = wr_en;
  assign _007_ = _044_;
  assign _004_ = _059_;
  assign _003_ = _057_;
  assign _047_ = _012_;
  assign _049_ = clr;
  assign _005_ = _048_;
  assign _051_ = _021_;
  assign _053_ = clr;
  assign _006_ = _052_;
endmodule

module \$paramod$4c24249e7e64ce62dd773950b0a0320969ed0b43\generic_register (we, data_in, reset_n, clk, data_out);
  input clk;
  wire clk;
  input [11:0] data_in;
  wire [11:0] data_in;
  output [11:0] data_out;
  wire [11:0] data_out;
  input reset_n;
  wire reset_n;
  input [11:0] we;
  wire [11:0] we;
  \$paramod\bit_register\RESET_DEFAULT=1'0  \gen_bit_reg[0].u_bit_reg  (
    .clk(clk),
    .data_in(data_in[0]),
    .data_out(data_out[0]),
    .reset_n(reset_n),
    .we(we[0])
  );
  \$paramod\bit_register\RESET_DEFAULT=1'0  \gen_bit_reg[10].u_bit_reg  (
    .clk(clk),
    .data_in(data_in[10]),
    .data_out(data_out[10]),
    .reset_n(reset_n),
    .we(we[10])
  );
  \$paramod\bit_register\RESET_DEFAULT=1'0  \gen_bit_reg[11].u_bit_reg  (
    .clk(clk),
    .data_in(data_in[11]),
    .data_out(data_out[11]),
    .reset_n(reset_n),
    .we(we[11])
  );
  \$paramod\bit_register\RESET_DEFAULT=1'0  \gen_bit_reg[1].u_bit_reg  (
    .clk(clk),
    .data_in(data_in[1]),
    .data_out(data_out[1]),
    .reset_n(reset_n),
    .we(we[1])
  );
  \$paramod\bit_register\RESET_DEFAULT=1'0  \gen_bit_reg[2].u_bit_reg  (
    .clk(clk),
    .data_in(data_in[2]),
    .data_out(data_out[2]),
    .reset_n(reset_n),
    .we(we[2])
  );
  \$paramod\bit_register\RESET_DEFAULT=1'0  \gen_bit_reg[3].u_bit_reg  (
    .clk(clk),
    .data_in(data_in[3]),
    .data_out(data_out[3]),
    .reset_n(reset_n),
    .we(we[3])
  );
  \$paramod\bit_register\RESET_DEFAULT=1'0  \gen_bit_reg[4].u_bit_reg  (
    .clk(clk),
    .data_in(data_in[4]),
    .data_out(data_out[4]),
    .reset_n(reset_n),
    .we(we[4])
  );
  \$paramod\bit_register\RESET_DEFAULT=1'0  \gen_bit_reg[5].u_bit_reg  (
    .clk(clk),
    .data_in(data_in[5]),
    .data_out(data_out[5]),
    .reset_n(reset_n),
    .we(we[5])
  );
  \$paramod\bit_register\RESET_DEFAULT=1'0  \gen_bit_reg[6].u_bit_reg  (
    .clk(clk),
    .data_in(data_in[6]),
    .data_out(data_out[6]),
    .reset_n(reset_n),
    .we(we[6])
  );
  \$paramod\bit_register\RESET_DEFAULT=1'0  \gen_bit_reg[7].u_bit_reg  (
    .clk(clk),
    .data_in(data_in[7]),
    .data_out(data_out[7]),
    .reset_n(reset_n),
    .we(we[7])
  );
  \$paramod\bit_register\RESET_DEFAULT=1'0  \gen_bit_reg[8].u_bit_reg  (
    .clk(clk),
    .data_in(data_in[8]),
    .data_out(data_out[8]),
    .reset_n(reset_n),
    .we(we[8])
  );
  \$paramod\bit_register\RESET_DEFAULT=1'0  \gen_bit_reg[9].u_bit_reg  (
    .clk(clk),
    .data_in(data_in[9]),
    .data_out(data_out[9]),
    .reset_n(reset_n),
    .we(we[9])
  );
endmodule

module \$paramod$a31044455865944557f28101338694099fdba264\generic_register (we, data_in, reset_n, clk, data_out);
  input clk;
  wire clk;
  input [4:0] data_in;
  wire [4:0] data_in;
  output [4:0] data_out;
  wire [4:0] data_out;
  input reset_n;
  wire reset_n;
  input [4:0] we;
  wire [4:0] we;
  \$paramod\bit_register\RESET_DEFAULT=1'0  \gen_bit_reg[0].u_bit_reg  (
    .clk(clk),
    .data_in(data_in[0]),
    .data_out(data_out[0]),
    .reset_n(reset_n),
    .we(we[0])
  );
  \$paramod\bit_register\RESET_DEFAULT=1'0  \gen_bit_reg[1].u_bit_reg  (
    .clk(clk),
    .data_in(data_in[1]),
    .data_out(data_out[1]),
    .reset_n(reset_n),
    .we(we[1])
  );
  \$paramod\bit_register\RESET_DEFAULT=1'0  \gen_bit_reg[2].u_bit_reg  (
    .clk(clk),
    .data_in(data_in[2]),
    .data_out(data_out[2]),
    .reset_n(reset_n),
    .we(we[2])
  );
  \$paramod\bit_register\RESET_DEFAULT=1'0  \gen_bit_reg[3].u_bit_reg  (
    .clk(clk),
    .data_in(data_in[3]),
    .data_out(data_out[3]),
    .reset_n(reset_n),
    .we(we[3])
  );
  \$paramod\bit_register\RESET_DEFAULT=1'0  \gen_bit_reg[4].u_bit_reg  (
    .clk(clk),
    .data_in(data_in[4]),
    .data_out(data_out[4]),
    .reset_n(reset_n),
    .we(we[4])
  );
endmodule

module \$paramod$a637ee2d0b9b2dd4e075a1cb20fc2f75abf9c453\generic_dpram (rclk, rrst, rce, oe, raddr, \do , wclk, wrst, wce, we, waddr, di);
  wire [5:0] _00_;
  wire [7:0] _01_;
  wire [7:0] _02_;
  wire [7:0] _03_;
  wire [5:0] _04_;
  wire [7:0] _05_;
  wire [7:0] _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire [7:0] _11_;
  reg [5:0] _12_;
  reg [7:0] _13_;
  reg [7:0] _14_;
  wire [7:0] _15_;
  wire _16_;
  wire [7:0] _17_;
  wire _18_;
  wire [5:0] _19_;
  wire _20_;
  wire [7:0] _21_;
  wire _22_;
  wire [7:0] _23_;
  wire [7:0] _24_;
  input [7:0] di;
  wire [7:0] di;
  output [7:0] \do ;
  wire [7:0] \do ;
  reg [7:0] do_reg;
  input oe;
  wire oe;
  input [5:0] raddr;
  wire [5:0] raddr;
  input rce;
  wire rce;
  input rclk;
  wire rclk;
  input rrst;
  wire rrst;
  input [5:0] waddr;
  wire [5:0] waddr;
  input wce;
  wire wce;
  input wclk;
  wire wclk;
  input we;
  wire we;
  input wrst;
  wire wrst;
  reg [7:0] mem [63:0];
  always @(posedge wclk) begin
    if (_06_[0])
      mem[_04_][0:0] <= _05_[0];
    if (_06_[1])
      mem[_04_][1:1] <= _05_[1];
    if (_06_[2])
      mem[_04_][2:2] <= _05_[2];
    if (_06_[3])
      mem[_04_][3:3] <= _05_[3];
    if (_06_[4])
      mem[_04_][4:4] <= _05_[4];
    if (_06_[5])
      mem[_04_][5:5] <= _05_[5];
    if (_06_[6])
      mem[_04_][6:6] <= _05_[6];
    if (_06_[7])
      mem[_04_][7:7] <= _05_[7];
  end
  assign _11_ = mem[raddr];
  assign _07_ = oe & rce;
  assign _08_ = waddr == raddr;
  assign _09_ = we && _08_;
  assign _10_ = wce && we;
  always @(posedge wclk)
    _12_ <= _19_;
  always @(posedge wclk)
    _13_ <= _17_;
  always @(posedge wclk)
    _14_ <= _15_;
  always @(posedge rclk)
    do_reg <= _21_;
  assign _15_ = _16_ ? 8'hff : 8'h00;
  assign _17_ = _18_ ? di : 8'hxx;
  assign _19_ = _20_ ? waddr : 6'hxx;
  assign _21_ = _22_ ? _24_ : do_reg;
  assign _23_ = _07_ ? do_reg : 8'hzz;
  assign _24_ = _09_ ? 8'hxx : _11_;
  assign \do  = _23_;
  assign _02_ = _06_;
  assign _01_ = _05_;
  assign _00_ = _04_;
  assign _16_ = _10_;
  assign _06_ = _15_;
  assign _18_ = _10_;
  assign _05_ = _17_;
  assign _20_ = _10_;
  assign _04_ = _19_;
  assign _22_ = rce;
  assign _03_ = _21_;
endmodule

module \$paramod\bit_register\RESET_DEFAULT=1'0 (we, clk, reset_n, data_in, data_out);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  input clk;
  wire clk;
  input data_in;
  wire data_in;
  output data_out;
  reg data_out;
  input reset_n;
  wire reset_n;
  input we;
  wire we;
  assign _1_ = ! reset_n;
  always @(posedge clk, negedge reset_n)
    if (!reset_n) data_out <= 1'h0;
    else data_out <= _2_;
  assign _2_ = _3_ ? data_in : data_out;
  assign _3_ = we;
  assign _0_ = _2_;
endmodule

module \$paramod\clk_ctl\WD=s32'00000000000000000000000000001011 (clk_o, mclk, reset_n, clk_div_ratio);
  wire [10:0] _00_;
  wire [10:0] _01_;
  wire _02_;
  wire [10:0] _03_;
  wire [31:0] _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire [10:0] _13_;
  wire _14_;
  wire [10:0] _15_;
  wire _16_;
  wire [10:0] _17_;
  wire _18_;
  wire [10:0] _19_;
  wire _20_;
  wire [31:0] _21_;
  wire [31:0] _22_;
  input [11:0] clk_div_ratio;
  wire [11:0] clk_div_ratio;
  output clk_o;
  wire clk_o;
  reg [10:0] high_count;
  reg [10:0] low_count;
  input mclk;
  wire mclk;
  reg mclk_div;
  input reset_n;
  wire reset_n;
  assign _03_ = clk_div_ratio[11:1] + clk_div_ratio[0];
  assign _04_ = clk_div_ratio[11:1] + 32'd1;
  assign _05_ = ~ reset_n;
  assign _06_ = | high_count;
  assign _07_ = | low_count;
  assign _08_ = ~ mclk_div;
  always @(posedge mclk, negedge reset_n)
    if (!reset_n) high_count <= 11'h000;
    else high_count <= _19_;
  always @(posedge mclk, negedge reset_n)
    if (!reset_n) low_count <= 11'h000;
    else low_count <= _15_;
  always @(posedge mclk, negedge reset_n)
    if (!reset_n) mclk_div <= 1'h0;
    else mclk_div <= _11_;
  assign _09_ = _10_ ? 1'h0 : _08_;
  assign _11_ = _12_ ? 1'h1 : _09_;
  assign _13_ = _14_ ? _22_[10:0] : _04_[10:0];
  assign _15_ = _16_ ? low_count : _13_;
  assign _17_ = _18_ ? high_count : _03_;
  assign _19_ = _20_ ? _21_[10:0] : _17_;
  assign _21_ = high_count - 32'd1;
  assign _22_ = low_count - 32'd1;
  assign clk_o = mclk_div;
  assign _10_ = _07_;
  assign _12_ = _06_;
  assign _02_ = _11_;
  assign _14_ = _07_;
  assign _16_ = _06_;
  assign _01_ = _15_;
  assign _18_ = _07_;
  assign _20_ = _06_;
  assign _00_ = _19_;
endmodule

module core(clk_i, rst_i, usb_txdp, usb_txdn, usb_txoe, usb_rxd, usb_rxdp, usb_rxdn, phy_tx_mode, usb_rst, dropped_frame, misaligned_frame, crc16_err, v_set_int, v_set_feature, wValue, wIndex, vendor_data, usb_busy, ep_sel, ep1_cfg
, ep1_din, ep1_we, ep1_full, ep1_dout, ep1_re, ep1_empty, ep1_bf_en, ep1_bf_size, ep2_cfg, ep2_din, ep2_we, ep2_full, ep2_dout, ep2_re, ep2_empty, ep2_bf_en, ep2_bf_size, ep3_cfg, ep3_din, ep3_we, ep3_full
, ep3_dout, ep3_re, ep3_empty, ep3_bf_en, ep3_bf_size, ep4_cfg, ep4_din, ep4_we, ep4_full, ep4_dout, ep4_re, ep4_empty, ep4_bf_en, ep4_bf_size, ep5_cfg, ep5_din, ep5_we, ep5_full, ep5_dout, ep5_re, ep5_empty
, ep5_bf_en, ep5_bf_size, ep6_cfg, ep6_din, ep6_we, ep6_full, ep6_dout, ep6_re, ep6_empty, ep6_bf_en, ep6_bf_size, ep7_cfg, ep7_din, ep7_we, ep7_full, ep7_dout, ep7_re, ep7_empty, ep7_bf_en, ep7_bf_size, uart_txd
, uart_rxd);
  wire _0_;
  wire [7:0] DataIn;
  wire [7:0] DataOut;
  wire [1:0] LineState;
  wire RxActive;
  wire RxError;
  wire RxValid;
  wire TxReady;
  wire TxValid;
  wire clk;
  input clk_i;
  wire clk_i;
  output crc16_err;
  wire crc16_err;
  output dropped_frame;
  wire dropped_frame;
  input ep1_bf_en;
  wire ep1_bf_en;
  input [6:0] ep1_bf_size;
  wire [6:0] ep1_bf_size;
  input [13:0] ep1_cfg;
  wire [13:0] ep1_cfg;
  input [7:0] ep1_din;
  wire [7:0] ep1_din;
  output [7:0] ep1_dout;
  wire [7:0] ep1_dout;
  input ep1_empty;
  wire ep1_empty;
  input ep1_full;
  wire ep1_full;
  output ep1_re;
  wire ep1_re;
  output ep1_we;
  wire ep1_we;
  input ep2_bf_en;
  wire ep2_bf_en;
  input [6:0] ep2_bf_size;
  wire [6:0] ep2_bf_size;
  input [13:0] ep2_cfg;
  wire [13:0] ep2_cfg;
  input [7:0] ep2_din;
  wire [7:0] ep2_din;
  output [7:0] ep2_dout;
  wire [7:0] ep2_dout;
  input ep2_empty;
  wire ep2_empty;
  input ep2_full;
  wire ep2_full;
  output ep2_re;
  wire ep2_re;
  output ep2_we;
  wire ep2_we;
  input ep3_bf_en;
  wire ep3_bf_en;
  input [6:0] ep3_bf_size;
  wire [6:0] ep3_bf_size;
  input [13:0] ep3_cfg;
  wire [13:0] ep3_cfg;
  input [7:0] ep3_din;
  wire [7:0] ep3_din;
  output [7:0] ep3_dout;
  wire [7:0] ep3_dout;
  input ep3_empty;
  wire ep3_empty;
  input ep3_full;
  wire ep3_full;
  output ep3_re;
  wire ep3_re;
  output ep3_we;
  wire ep3_we;
  input ep4_bf_en;
  wire ep4_bf_en;
  input [6:0] ep4_bf_size;
  wire [6:0] ep4_bf_size;
  input [13:0] ep4_cfg;
  wire [13:0] ep4_cfg;
  input [7:0] ep4_din;
  wire [7:0] ep4_din;
  output [7:0] ep4_dout;
  wire [7:0] ep4_dout;
  input ep4_empty;
  wire ep4_empty;
  input ep4_full;
  wire ep4_full;
  output ep4_re;
  wire ep4_re;
  output ep4_we;
  wire ep4_we;
  input ep5_bf_en;
  wire ep5_bf_en;
  input [6:0] ep5_bf_size;
  wire [6:0] ep5_bf_size;
  input [13:0] ep5_cfg;
  wire [13:0] ep5_cfg;
  input [7:0] ep5_din;
  wire [7:0] ep5_din;
  output [7:0] ep5_dout;
  wire [7:0] ep5_dout;
  input ep5_empty;
  wire ep5_empty;
  input ep5_full;
  wire ep5_full;
  output ep5_re;
  wire ep5_re;
  output ep5_we;
  wire ep5_we;
  input ep6_bf_en;
  wire ep6_bf_en;
  input [6:0] ep6_bf_size;
  wire [6:0] ep6_bf_size;
  input [13:0] ep6_cfg;
  wire [13:0] ep6_cfg;
  input [7:0] ep6_din;
  wire [7:0] ep6_din;
  output [7:0] ep6_dout;
  wire [7:0] ep6_dout;
  input ep6_empty;
  wire ep6_empty;
  input ep6_full;
  wire ep6_full;
  output ep6_re;
  wire ep6_re;
  output ep6_we;
  wire ep6_we;
  input ep7_bf_en;
  wire ep7_bf_en;
  input [6:0] ep7_bf_size;
  wire [6:0] ep7_bf_size;
  input [13:0] ep7_cfg;
  wire [13:0] ep7_cfg;
  input [7:0] ep7_din;
  wire [7:0] ep7_din;
  output [7:0] ep7_dout;
  wire [7:0] ep7_dout;
  input ep7_empty;
  wire ep7_empty;
  input ep7_full;
  wire ep7_full;
  output ep7_re;
  wire ep7_re;
  output ep7_we;
  wire ep7_we;
  output [3:0] ep_sel;
  wire [3:0] ep_sel;
  output misaligned_frame;
  wire misaligned_frame;
  input phy_tx_mode;
  wire phy_tx_mode;
  wire reg_ack;
  wire [31:0] reg_addr;
  wire [31:0] reg_rdata;
  wire reg_rdwrn;
  wire reg_req;
  wire [31:0] reg_wdata;
  wire rst;
  input rst_i;
  wire rst_i;
  input uart_rxd;
  wire uart_rxd;
  output uart_txd;
  wire uart_txd;
  output usb_busy;
  wire usb_busy;
  output usb_rst;
  wire usb_rst;
  input usb_rxd;
  wire usb_rxd;
  input usb_rxdn;
  wire usb_rxdn;
  input usb_rxdp;
  wire usb_rxdp;
  output usb_txdn;
  wire usb_txdn;
  output usb_txdp;
  wire usb_txdp;
  output usb_txoe;
  wire usb_txoe;
  output v_set_feature;
  wire v_set_feature;
  output v_set_int;
  wire v_set_int;
  input [15:0] vendor_data;
  wire [15:0] vendor_data;
  output [15:0] wIndex;
  wire [15:0] wIndex;
  output [15:0] wValue;
  wire [15:0] wValue;
  assign _0_ = ! reg_rdwrn;
  uart_core u_uart_core (
    .app_clk(clk_i),
    .app_reset_n(rst_i),
    .reg_ack(reg_ack),
    .reg_addr(reg_addr[5:2]),
    .reg_be(4'hf),
    .reg_cs(reg_req),
    .reg_rdata(reg_rdata),
    .reg_wdata(reg_wdata),
    .reg_wr(_0_),
    .si(uart_rxd),
    .so(uart_txd)
  );
  usb1_core u_usb_core (
    .DataIn(DataIn),
    .DataOut(DataOut),
    .LineState(LineState),
    .RxActive(RxActive),
    .RxError(RxError),
    .RxValid(RxValid),
    .TxReady(TxReady),
    .TxValid(TxValid),
    .clk_i(clk_i),
    .crc16_err(crc16_err),
    .dropped_frame(dropped_frame),
    .ep1_bf_en(ep1_bf_en),
    .ep1_bf_size(ep1_bf_size),
    .ep1_cfg(ep1_cfg),
    .ep1_din(ep1_din),
    .ep1_dout(ep1_dout),
    .ep1_empty(ep1_empty),
    .ep1_full(ep1_full),
    .ep1_re(ep1_re),
    .ep1_we(ep1_we),
    .ep2_bf_en(ep2_bf_en),
    .ep2_bf_size(ep2_bf_size),
    .ep2_cfg(ep2_cfg),
    .ep2_din(ep2_din),
    .ep2_dout(ep2_dout),
    .ep2_empty(ep2_empty),
    .ep2_full(ep2_full),
    .ep2_re(ep2_re),
    .ep2_we(ep2_we),
    .ep3_bf_en(ep3_bf_en),
    .ep3_bf_size(ep3_bf_size),
    .ep3_cfg(ep3_cfg),
    .ep3_din(ep3_din),
    .ep3_dout(ep3_dout),
    .ep3_empty(ep3_empty),
    .ep3_full(ep3_full),
    .ep3_re(ep3_re),
    .ep3_we(ep3_we),
    .ep4_bf_en(ep4_bf_en),
    .ep4_bf_size(ep4_bf_size),
    .ep4_cfg(ep4_cfg),
    .ep4_din(ep4_din),
    .ep4_dout(ep4_dout),
    .ep4_empty(ep4_empty),
    .ep4_full(ep4_full),
    .ep4_re(ep4_re),
    .ep4_we(ep4_we),
    .ep5_bf_en(ep5_bf_en),
    .ep5_bf_size(ep5_bf_size),
    .ep5_cfg(ep5_cfg),
    .ep5_din(ep5_din),
    .ep5_dout(ep5_dout),
    .ep5_empty(ep5_empty),
    .ep5_full(ep5_full),
    .ep5_re(ep5_re),
    .ep5_we(ep5_we),
    .ep6_bf_en(ep6_bf_en),
    .ep6_bf_size(ep6_bf_size),
    .ep6_cfg(ep6_cfg),
    .ep6_din(ep6_din),
    .ep6_dout(ep6_dout),
    .ep6_empty(ep6_empty),
    .ep6_full(ep6_full),
    .ep6_re(ep6_re),
    .ep6_we(ep6_we),
    .ep7_bf_en(ep7_bf_en),
    .ep7_bf_size(ep7_bf_size),
    .ep7_cfg(ep7_cfg),
    .ep7_din(ep7_din),
    .ep7_dout(ep7_dout),
    .ep7_empty(ep7_empty),
    .ep7_full(ep7_full),
    .ep7_re(ep7_re),
    .ep7_we(ep7_we),
    .ep_sel(ep_sel),
    .misaligned_frame(misaligned_frame),
    .phy_tx_mode(phy_tx_mode),
    .reg_ack(reg_ack),
    .reg_addr(reg_addr),
    .reg_rdata(reg_rdata),
    .reg_rdwrn(reg_rdwrn),
    .reg_req(reg_req),
    .reg_wdata(reg_wdata),
    .rst_i(rst_i),
    .usb_busy(usb_busy),
    .usb_rst(usb_rst),
    .v_set_feature(v_set_feature),
    .v_set_int(v_set_int),
    .vendor_data(vendor_data),
    .wIndex(wIndex),
    .wValue(wValue)
  );
  usb_phy u_usb_phy (
    .DataIn_o(DataIn),
    .DataOut_i(DataOut),
    .LineState_o(LineState),
    .RxActive_o(RxActive),
    .RxError_o(RxError),
    .RxValid_o(RxValid),
    .TxReady_o(TxReady),
    .TxValid_i(TxValid),
    .clk(clk_i),
    .phy_tx_mode(phy_tx_mode),
    .rst(rst_i),
    .rxd(usb_rxd),
    .rxdn(usb_rxdn),
    .rxdp(usb_rxdp),
    .txdn(usb_txdn),
    .txdp(usb_txdp),
    .txoe(usb_txoe),
    .usb_rst(usb_rst)
  );
endmodule

module double_sync_low(in_data, out_clk, out_rst_n, out_data);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  input in_data;
  wire in_data;
  reg in_data_2s;
  reg in_data_3s;
  reg in_data_s;
  input out_clk;
  wire out_clk;
  output out_data;
  wire out_data;
  input out_rst_n;
  wire out_rst_n;
  assign _3_ = ~ out_rst_n;
  always @(posedge out_clk, negedge out_rst_n)
    if (!out_rst_n) in_data_s <= 1'h1;
    else in_data_s <= in_data;
  always @(posedge out_clk, negedge out_rst_n)
    if (!out_rst_n) in_data_2s <= 1'h1;
    else in_data_2s <= in_data_s;
  always @(posedge out_clk, negedge out_rst_n)
    if (!out_rst_n) in_data_3s <= 1'h1;
    else in_data_3s <= in_data_2s;
  assign out_data = in_data_3s;
  assign _1_ = in_data_2s;
  assign _0_ = in_data_s;
  assign _2_ = in_data;
endmodule

module stat_register(clk, reset_n, cpu_we, cpu_ack, hware_req, data_out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  input clk;
  wire clk;
  input cpu_ack;
  wire cpu_ack;
  input cpu_we;
  wire cpu_we;
  output data_out;
  reg data_out;
  input hware_req;
  wire hware_req;
  input reset_n;
  wire reset_n;
  assign _01_ = cpu_we & cpu_ack;
  assign _02_ = ! reset_n;
  always @(posedge clk, negedge reset_n)
    if (!reset_n) data_out <= 1'h0;
    else data_out <= _05_;
  assign _03_ = _04_ ? 1'h0 : data_out;
  assign _05_ = _06_ ? 1'h1 : _03_;
  assign _04_ = _01_;
  assign _06_ = hware_req;
  assign _00_ = _05_;
endmodule

module uart_cfg(mclk, reset_n, reg_cs, reg_wr, reg_addr, reg_wdata, reg_be, reg_rdata, reg_ack, tx_fifo_full, tx_fifo_wr_en, tx_fifo_data, rx_fifo_empty, rx_fifo_rd_en, rx_fifo_data, cfg_tx_enable, cfg_rx_enable, cfg_stop_bit, cfg_pri_mod, cfg_baud_16x, frm_error_o
, par_error_o, rx_fifo_full_err_o);
  wire _000_;
  wire [31:0] _001_;
  wire [31:0] _002_;
  wire [31:0] _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire [31:0] _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire [31:0] _102_;
  wire _103_;
  output [11:0] cfg_baud_16x;
  wire [11:0] cfg_baud_16x;
  output [1:0] cfg_pri_mod;
  wire [1:0] cfg_pri_mod;
  output cfg_rx_enable;
  wire cfg_rx_enable;
  output cfg_stop_bit;
  wire cfg_stop_bit;
  output cfg_tx_enable;
  wire cfg_tx_enable;
  input frm_error_o;
  wire frm_error_o;
  input mclk;
  wire mclk;
  input par_error_o;
  wire par_error_o;
  wire [31:0] reg_0;
  wire [31:0] reg_1;
  wire [31:0] reg_10;
  wire [31:0] reg_11;
  wire [31:0] reg_12;
  wire [31:0] reg_13;
  wire [31:0] reg_14;
  wire [31:0] reg_15;
  wire [31:0] reg_2;
  wire [31:0] reg_3;
  wire [31:0] reg_4;
  wire [31:0] reg_5;
  wire [31:0] reg_6;
  wire [31:0] reg_7;
  wire [31:0] reg_8;
  wire [31:0] reg_9;
  output reg_ack;
  reg reg_ack;
  input [3:0] reg_addr;
  wire [3:0] reg_addr;
  input [3:0] reg_be;
  wire [3:0] reg_be;
  input reg_cs;
  wire reg_cs;
  wire [31:0] reg_out;
  output [31:0] reg_rdata;
  reg [31:0] reg_rdata;
  input [31:0] reg_wdata;
  wire [31:0] reg_wdata;
  input reg_wr;
  wire reg_wr;
  input reset_n;
  wire reset_n;
  input [7:0] rx_fifo_data;
  wire [7:0] rx_fifo_data;
  input rx_fifo_empty;
  wire rx_fifo_empty;
  input rx_fifo_full_err_o;
  wire rx_fifo_full_err_o;
  output rx_fifo_rd_en;
  wire rx_fifo_rd_en;
  wire [3:0] sw_addr;
  wire sw_rd_en;
  wire sw_rd_en_0;
  wire sw_rd_en_1;
  wire sw_rd_en_10;
  wire sw_rd_en_11;
  wire sw_rd_en_12;
  wire sw_rd_en_13;
  wire sw_rd_en_14;
  wire sw_rd_en_15;
  wire sw_rd_en_2;
  wire sw_rd_en_3;
  wire sw_rd_en_4;
  wire sw_rd_en_5;
  wire sw_rd_en_6;
  wire sw_rd_en_7;
  wire sw_rd_en_8;
  wire sw_rd_en_9;
  wire sw_wr_en;
  wire sw_wr_en_0;
  wire sw_wr_en_1;
  wire sw_wr_en_10;
  wire sw_wr_en_11;
  wire sw_wr_en_12;
  wire sw_wr_en_13;
  wire sw_wr_en_14;
  wire sw_wr_en_15;
  wire sw_wr_en_2;
  wire sw_wr_en_3;
  wire sw_wr_en_4;
  wire sw_wr_en_5;
  wire sw_wr_en_6;
  wire sw_wr_en_7;
  wire sw_wr_en_8;
  wire sw_wr_en_9;
  output [7:0] tx_fifo_data;
  wire [7:0] tx_fifo_data;
  input tx_fifo_full;
  wire tx_fifo_full;
  output tx_fifo_wr_en;
  wire tx_fifo_wr_en;
  wire [3:0] wr_be;
  assign _004_ = reg_cs & _078_;
  assign _005_ = reg_cs & reg_wr;
  assign _006_ = sw_wr_en & _044_;
  assign _007_ = sw_rd_en & _045_;
  assign _008_ = sw_wr_en & _046_;
  assign _009_ = sw_rd_en & _047_;
  assign _010_ = sw_wr_en & _048_;
  assign _011_ = sw_rd_en & _049_;
  assign _012_ = sw_wr_en & _050_;
  assign _013_ = sw_rd_en & _051_;
  assign _014_ = sw_wr_en & _052_;
  assign _015_ = sw_rd_en & _053_;
  assign _016_ = sw_wr_en & _054_;
  assign _017_ = sw_rd_en & _055_;
  assign _018_ = sw_wr_en & _056_;
  assign _019_ = sw_rd_en & _057_;
  assign _020_ = sw_wr_en & _058_;
  assign _021_ = sw_rd_en & _059_;
  assign _022_ = sw_wr_en & _060_;
  assign _023_ = sw_rd_en & _061_;
  assign _024_ = sw_wr_en & _062_;
  assign _025_ = sw_rd_en & _063_;
  assign _026_ = sw_wr_en & _064_;
  assign _027_ = sw_rd_en & _065_;
  assign _028_ = sw_wr_en & _066_;
  assign _029_ = sw_rd_en & _067_;
  assign _030_ = sw_wr_en & _068_;
  assign _031_ = sw_rd_en & _069_;
  assign _032_ = sw_wr_en & _070_;
  assign _033_ = sw_rd_en & _071_;
  assign _034_ = sw_wr_en & _072_;
  assign _035_ = sw_rd_en & _073_;
  assign _036_ = sw_wr_en & _074_;
  assign _037_ = sw_rd_en & _075_;
  assign _038_ = sw_wr_en_0 & wr_be[0];
  assign _039_ = sw_wr_en_1 & wr_be[0];
  assign _040_ = sw_wr_en_1 & wr_be[0];
  assign _041_ = sw_wr_en_1 & wr_be[0];
  assign _042_ = sw_wr_en_2 & wr_be[0];
  assign _043_ = ~ reset_n;
  assign _044_ = ! sw_addr;
  assign _045_ = ! sw_addr;
  assign _046_ = sw_addr == 4'h1;
  assign _047_ = sw_addr == 4'h1;
  assign _048_ = sw_addr == 4'h2;
  assign _049_ = sw_addr == 4'h2;
  assign _050_ = sw_addr == 4'h3;
  assign _051_ = sw_addr == 4'h3;
  assign _052_ = sw_addr == 4'h4;
  assign _053_ = sw_addr == 4'h4;
  assign _054_ = sw_addr == 4'h5;
  assign _055_ = sw_addr == 4'h5;
  assign _056_ = sw_addr == 4'h6;
  assign _057_ = sw_addr == 4'h6;
  assign _058_ = sw_addr == 4'h7;
  assign _059_ = sw_addr == 4'h7;
  assign _060_ = sw_addr == 4'h8;
  assign _061_ = sw_addr == 4'h8;
  assign _062_ = sw_addr == 4'h9;
  assign _063_ = sw_addr == 4'h9;
  assign _064_ = sw_addr == 4'ha;
  assign _065_ = sw_addr == 4'ha;
  assign _066_ = sw_addr == 4'hb;
  assign _067_ = sw_addr == 4'hb;
  assign _068_ = sw_addr == 4'hc;
  assign _069_ = sw_addr == 4'hc;
  assign _070_ = sw_addr == 4'hd;
  assign _071_ = sw_addr == 4'hd;
  assign _072_ = sw_addr == 4'he;
  assign _073_ = sw_addr == 4'he;
  assign _074_ = sw_addr == 4'hf;
  assign _075_ = sw_addr == 4'hf;
  assign _076_ = sw_rd_en && _079_;
  assign _077_ = sw_wr_en && _080_;
  assign _078_ = ! reg_wr;
  assign _079_ = ! reg_ack;
  assign _080_ = ! reg_ack;
  always @(posedge mclk, negedge reset_n)
    if (!reset_n) reg_rdata <= 32'd0;
    else reg_rdata <= _102_;
  always @(posedge mclk, negedge reset_n)
    if (!reset_n) reg_ack <= 1'h0;
    else reg_ack <= _100_;
  function [31:0] _183_;
    input [31:0] a;
    input [511:0] b;
    input [15:0] s;
    casez (s) // synopsys parallel_case
      16'b???????????????1:
        _183_ = b[31:0];
      16'b??????????????1?:
        _183_ = b[63:32];
      16'b?????????????1??:
        _183_ = b[95:64];
      16'b????????????1???:
        _183_ = b[127:96];
      16'b???????????1????:
        _183_ = b[159:128];
      16'b??????????1?????:
        _183_ = b[191:160];
      16'b?????????1??????:
        _183_ = b[223:192];
      16'b????????1???????:
        _183_ = b[255:224];
      16'b???????1????????:
        _183_ = b[287:256];
      16'b??????1?????????:
        _183_ = b[319:288];
      16'b?????1??????????:
        _183_ = b[351:320];
      16'b????1???????????:
        _183_ = b[383:352];
      16'b???1????????????:
        _183_ = b[415:384];
      16'b??1?????????????:
        _183_ = b[447:416];
      16'b?1??????????????:
        _183_ = b[479:448];
      16'b1???????????????:
        _183_ = b[511:480];
      default:
        _183_ = a;
    endcase
  endfunction
  assign _081_ = _183_(32'hxxxxxxxx, { 27'h0000000, reg_0[4:0], 29'h00000000, reg_1[2:0], 20'h00000, reg_2[11:0], 30'h00000000, rx_fifo_empty, tx_fifo_full, reg_4, 24'h000000, rx_fifo_data, reg_6, reg_7, reg_8, reg_9, reg_10, reg_11, reg_12, reg_13, reg_14, reg_15 }, { _097_, _096_, _095_, _094_, _093_, _092_, _091_, _090_, _089_, _088_, _087_, _086_, _085_, _084_, _083_, _082_ });
  assign _082_ = sw_addr == 4'hf;
  assign _083_ = sw_addr == 4'he;
  assign _084_ = sw_addr == 4'hd;
  assign _085_ = sw_addr == 4'hc;
  assign _086_ = sw_addr == 4'hb;
  assign _087_ = sw_addr == 4'ha;
  assign _088_ = sw_addr == 4'h9;
  assign _089_ = sw_addr == 4'h8;
  assign _090_ = sw_addr == 4'h7;
  assign _091_ = sw_addr == 4'h6;
  assign _092_ = sw_addr == 4'h5;
  assign _093_ = sw_addr == 4'h4;
  assign _094_ = sw_addr == 4'h3;
  assign _095_ = sw_addr == 4'h2;
  assign _096_ = sw_addr == 4'h1;
  assign _097_ = ! sw_addr;
  assign _098_ = _099_ ? 1'h1 : 1'h0;
  assign _100_ = _101_ ? 1'h1 : _098_;
  assign _102_ = _103_ ? reg_out : reg_rdata;
  stat_register u_intr_bit0 (
    .clk(mclk),
    .cpu_ack(reg_wdata[0]),
    .cpu_we(_039_),
    .data_out(reg_1[0]),
    .hware_req(frm_error_o),
    .reset_n(reset_n)
  );
  stat_register u_intr_bit1 (
    .clk(mclk),
    .cpu_ack(reg_wdata[1]),
    .cpu_we(_040_),
    .data_out(reg_1[1]),
    .hware_req(par_error_o),
    .reset_n(reset_n)
  );
  stat_register u_intr_bit2 (
    .clk(mclk),
    .cpu_ack(reg_wdata[2]),
    .cpu_we(_041_),
    .data_out(reg_1[2]),
    .hware_req(rx_fifo_full_err_o),
    .reset_n(reset_n)
  );
  \$paramod$a31044455865944557f28101338694099fdba264\generic_register  u_uart_ctrl_be0 (
    .clk(mclk),
    .data_in(reg_wdata[4:0]),
    .data_out(reg_0[4:0]),
    .reset_n(reset_n),
    .we({ _038_, _038_, _038_, _038_, _038_ })
  );
  \$paramod$4c24249e7e64ce62dd773950b0a0320969ed0b43\generic_register  u_uart_ctrl_reg2 (
    .clk(mclk),
    .data_in(reg_wdata[11:0]),
    .data_out(reg_2[11:0]),
    .reset_n(reset_n),
    .we({ _042_, _042_, _042_, _042_, _042_, _042_, _042_, _042_, _042_, _042_, _042_, _042_ })
  );
  assign sw_addr = reg_addr;
  assign sw_rd_en = _004_;
  assign sw_wr_en = _005_;
  assign wr_be = reg_be;
  assign sw_wr_en_0 = _006_;
  assign sw_rd_en_0 = _007_;
  assign sw_wr_en_1 = _008_;
  assign sw_rd_en_1 = _009_;
  assign sw_wr_en_2 = _010_;
  assign sw_rd_en_2 = _011_;
  assign sw_wr_en_3 = _012_;
  assign sw_rd_en_3 = _013_;
  assign sw_wr_en_4 = _014_;
  assign sw_rd_en_4 = _015_;
  assign sw_wr_en_5 = _016_;
  assign sw_rd_en_5 = _017_;
  assign sw_wr_en_6 = _018_;
  assign sw_rd_en_6 = _019_;
  assign sw_wr_en_7 = _020_;
  assign sw_rd_en_7 = _021_;
  assign sw_wr_en_8 = _022_;
  assign sw_rd_en_8 = _023_;
  assign sw_wr_en_9 = _024_;
  assign sw_rd_en_9 = _025_;
  assign sw_wr_en_10 = _026_;
  assign sw_rd_en_10 = _027_;
  assign sw_wr_en_11 = _028_;
  assign sw_rd_en_11 = _029_;
  assign sw_wr_en_12 = _030_;
  assign sw_rd_en_12 = _031_;
  assign sw_wr_en_13 = _032_;
  assign sw_rd_en_13 = _033_;
  assign sw_wr_en_14 = _034_;
  assign sw_rd_en_14 = _035_;
  assign sw_wr_en_15 = _036_;
  assign sw_rd_en_15 = _037_;
  assign cfg_pri_mod = reg_0[4:3];
  assign cfg_stop_bit = reg_0[2];
  assign cfg_rx_enable = reg_0[1];
  assign cfg_tx_enable = reg_0[0];
  assign reg_0[31:5] = 27'h0000000;
  assign reg_1[31:3] = 29'h00000000;
  assign cfg_baud_16x = reg_2[11:0];
  assign reg_2[31:12] = 20'h00000;
  assign reg_3 = { 30'h00000000, rx_fifo_empty, tx_fifo_full };
  assign tx_fifo_wr_en = sw_wr_en_4;
  assign tx_fifo_data = reg_wdata[7:0];
  assign reg_5 = { 24'h000000, rx_fifo_data };
  assign rx_fifo_rd_en = sw_rd_en_5;
  assign _001_ = _003_;
  assign _003_ = _081_;
  assign _099_ = _077_;
  assign _101_ = _076_;
  assign _000_ = _100_;
  assign _103_ = _076_;
  assign _002_ = _102_;
  assign reg_out = _081_;
endmodule

module uart_core(app_reset_n, app_clk, reg_cs, reg_wr, reg_addr, reg_wdata, reg_be, reg_rdata, reg_ack, si, so);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  input app_clk;
  wire app_clk;
  input app_reset_n;
  wire app_reset_n;
  wire [7:0] app_rxfifo_data;
  wire app_rxfifo_empty;
  wire app_rxfifo_rd_en;
  wire app_tx_fifo_full;
  wire [7:0] app_txfifo_data;
  wire [11:0] cfg_baud_16x;
  wire [1:0] cfg_pri_mod;
  wire cfg_rx_enable;
  wire cfg_stop_bit;
  wire cfg_tx_enable;
  wire [1:0] error_ind;
  wire frm_error;
  wire frm_error_o;
  wire line_clk_16x;
  wire line_reset_n;
  wire par_error;
  wire par_error_o;
  output reg_ack;
  wire reg_ack;
  input [3:0] reg_addr;
  wire [3:0] reg_addr;
  input [3:0] reg_be;
  wire [3:0] reg_be;
  input reg_cs;
  wire reg_cs;
  output [31:0] reg_rdata;
  wire [31:0] reg_rdata;
  input [31:0] reg_wdata;
  wire [31:0] reg_wdata;
  input reg_wr;
  wire reg_wr;
  wire rx_fifo_full_err;
  wire rx_fifo_full_err_o;
  wire rx_fifo_wr;
  wire [7:0] rx_fifo_wr_data;
  wire rx_fifo_wr_full;
  input si;
  wire si;
  wire si_ss;
  output so;
  wire so;
  wire tx_fifo_rd;
  wire [7:0] tx_fifo_rd_data;
  wire tx_fifo_rd_empty;
  wire tx_fifo_wr_en;
  assign _0_ = error_ind == 2'h1;
  assign _1_ = error_ind == 2'h2;
  assign _2_ = error_ind == 2'h3;
  assign _3_ = ! rx_fifo_wr_full;
  uart_cfg u_cfg (
    .cfg_baud_16x(cfg_baud_16x),
    .cfg_pri_mod(cfg_pri_mod),
    .cfg_rx_enable(cfg_rx_enable),
    .cfg_stop_bit(cfg_stop_bit),
    .cfg_tx_enable(cfg_tx_enable),
    .frm_error_o(frm_error_o),
    .mclk(app_clk),
    .par_error_o(par_error_o),
    .reg_ack(reg_ack),
    .reg_addr(reg_addr),
    .reg_be(reg_be),
    .reg_cs(reg_cs),
    .reg_rdata(reg_rdata),
    .reg_wdata(reg_wdata),
    .reg_wr(reg_wr),
    .reset_n(app_reset_n),
    .rx_fifo_data(app_rxfifo_data),
    .rx_fifo_empty(app_rxfifo_empty),
    .rx_fifo_full_err_o(rx_fifo_full_err_o),
    .rx_fifo_rd_en(app_rxfifo_rd_en),
    .tx_fifo_data(app_txfifo_data),
    .tx_fifo_full(app_tx_fifo_full),
    .tx_fifo_wr_en(tx_fifo_wr_en)
  );
  \$paramod\clk_ctl\WD=s32'00000000000000000000000000001011  u_clk_ctl (
    .clk_div_ratio(cfg_baud_16x),
    .clk_o(line_clk_16x),
    .mclk(app_clk),
    .reset_n(app_reset_n)
  );
  double_sync_low u_frm_err (
    .in_data(frm_error),
    .out_clk(app_clk),
    .out_data(frm_error_o),
    .out_rst_n(app_reset_n)
  );
  double_sync_low u_par_err (
    .in_data(par_error),
    .out_clk(app_clk),
    .out_data(par_error_o),
    .out_rst_n(app_reset_n)
  );
  \$paramod$29a704771d1a366e9079d73384eed490f854b27d\async_fifo  u_rxfifo (
    .empty(app_rxfifo_empty),
    .full(rx_fifo_wr_full),
    .rd_clk(app_clk),
    .rd_data(app_rxfifo_data),
    .rd_en(app_rxfifo_rd_en),
    .rd_reset_n(app_reset_n),
    .wr_clk(line_clk_16x),
    .wr_data(rx_fifo_wr_data),
    .wr_en(rx_fifo_wr),
    .wr_reset_n(line_reset_n)
  );
  double_sync_low u_rxfifo_err (
    .in_data(rx_fifo_full_err),
    .out_clk(app_clk),
    .out_data(rx_fifo_full_err_o),
    .out_rst_n(app_reset_n)
  );
  uart_rxfsm u_rxfsm (
    .baud_clk_16x(line_clk_16x),
    .cfg_pri_mod(cfg_pri_mod),
    .cfg_rx_enable(cfg_rx_enable),
    .cfg_stop_bit(cfg_stop_bit),
    .error_ind(error_ind),
    .fifo_aval(_3_),
    .fifo_data(rx_fifo_wr_data),
    .fifo_wr(rx_fifo_wr),
    .reset_n(line_reset_n),
    .si(si_ss)
  );
  double_sync_low u_si_sync (
    .in_data(si),
    .out_clk(line_clk_16x),
    .out_data(si_ss),
    .out_rst_n(line_reset_n)
  );
  \$paramod$29a704771d1a366e9079d73384eed490f854b27d\async_fifo  u_txfifo (
    .empty(tx_fifo_rd_empty),
    .full(app_tx_fifo_full),
    .rd_clk(line_clk_16x),
    .rd_data(tx_fifo_rd_data),
    .rd_en(tx_fifo_rd),
    .rd_reset_n(line_reset_n),
    .wr_clk(app_clk),
    .wr_data(app_txfifo_data),
    .wr_en(tx_fifo_wr_en),
    .wr_reset_n(app_reset_n)
  );
  uart_txfsm u_txfsm (
    .baud_clk_16x(line_clk_16x),
    .cfg_pri_mod(cfg_pri_mod),
    .cfg_stop_bit(cfg_stop_bit),
    .cfg_tx_enable(cfg_tx_enable),
    .fifo_data(tx_fifo_rd_data),
    .fifo_empty(tx_fifo_rd_empty),
    .fifo_rd(tx_fifo_rd),
    .reset_n(line_reset_n),
    .so(so)
  );
  assign line_reset_n = app_reset_n;
  assign frm_error = _0_;
  assign par_error = _1_;
  assign rx_fifo_full_err = _2_;
endmodule

module uart_rxfsm(reset_n, baud_clk_16x, cfg_rx_enable, cfg_stop_bit, cfg_pri_mod, error_ind, fifo_aval, fifo_wr, fifo_data, si);
  wire [2:0] _000_;
  wire [7:0] _001_;
  wire [2:0] _002_;
  wire [1:0] _003_;
  wire [7:0] _004_;
  wire _005_;
  wire [3:0] _006_;
  wire [3:0] _007_;
  wire [2:0] _008_;
  wire [2:0] _009_;
  wire [7:0] _010_;
  wire [2:0] _011_;
  wire [7:0] _012_;
  wire [2:0] _013_;
  wire [7:0] _014_;
  wire [31:0] _015_;
  wire [31:0] _016_;
  wire [31:0] _017_;
  wire [31:0] _018_;
  wire [7:0] _019_;
  reg [2:0] _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  reg [7:0] _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire [3:0] _040_;
  wire [3:0] _041_;
  wire [7:0] _042_;
  wire _043_;
  wire [7:0] _044_;
  wire [7:0] _045_;
  wire _046_;
  wire [7:0] _047_;
  wire _048_;
  wire [2:0] _049_;
  wire _050_;
  wire [2:0] _051_;
  wire _052_;
  wire [7:0] _053_;
  wire _054_;
  wire [2:0] _055_;
  wire _056_;
  wire [2:0] _057_;
  wire _058_;
  wire [2:0] _059_;
  wire _060_;
  wire [2:0] _061_;
  wire _062_;
  wire [2:0] _063_;
  wire _064_;
  wire [2:0] _065_;
  wire _066_;
  wire _067_;
  wire [2:0] _068_;
  wire _069_;
  wire _070_;
  wire [2:0] _071_;
  wire _072_;
  wire [2:0] _073_;
  wire _074_;
  wire [2:0] _075_;
  wire _076_;
  wire _077_;
  wire [2:0] _078_;
  wire _079_;
  wire [2:0] _080_;
  wire _081_;
  wire _082_;
  wire [2:0] _083_;
  wire _084_;
  wire [2:0] _085_;
  wire _086_;
  wire _087_;
  wire [3:0] _088_;
  wire _089_;
  wire [3:0] _090_;
  wire _091_;
  wire [3:0] _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire [1:0] _102_;
  wire _103_;
  wire [1:0] _104_;
  wire _105_;
  wire [1:0] _106_;
  wire _107_;
  wire [1:0] _108_;
  wire _109_;
  wire [1:0] _110_;
  wire _111_;
  wire _112_;
  wire [1:0] _113_;
  wire _114_;
  wire [1:0] _115_;
  wire _116_;
  wire [1:0] _117_;
  wire _118_;
  wire [1:0] _119_;
  wire _120_;
  wire [1:0] _121_;
  wire _122_;
  wire _123_;
  wire [1:0] _124_;
  wire _125_;
  wire [1:0] _126_;
  wire _127_;
  wire _128_;
  wire [2:0] _129_;
  wire _130_;
  wire [2:0] _131_;
  wire _132_;
  wire [2:0] _133_;
  wire _134_;
  wire [2:0] _135_;
  wire _136_;
  wire _137_;
  wire [2:0] _138_;
  wire _139_;
  wire [2:0] _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire [7:0] _144_;
  wire [7:0] _145_;
  input baud_clk_16x;
  wire baud_clk_16x;
  input [1:0] cfg_pri_mod;
  wire [1:0] cfg_pri_mod;
  input cfg_rx_enable;
  wire cfg_rx_enable;
  input cfg_stop_bit;
  wire cfg_stop_bit;
  reg [2:0] cnt;
  output [1:0] error_ind;
  reg [1:0] error_ind;
  input fifo_aval;
  wire fifo_aval;
  output [7:0] fifo_data;
  reg [7:0] fifo_data;
  output fifo_wr;
  reg fifo_wr;
  reg [3:0] offset;
  wire parity;
  input reset_n;
  wire reset_n;
  reg [3:0] rxpos;
  reg [2:0] rxstate;
  input si;
  wire si;
  assign _015_ = offset + 32'd1;
  assign _016_ = offset + 32'd8;
  assign _017_ = cnt + 32'd1;
  assign _018_ = cnt + 32'd1;
  assign _019_ = fifo_data & _042_;
  assign _021_ = ~ reset_n;
  assign _022_ = cnt == 3'h7;
  assign _023_ = rxpos == offset;
  assign _024_ = cnt == 3'h7;
  assign _025_ = ! cfg_pri_mod;
  assign _026_ = rxpos == offset;
  assign _027_ = cfg_pri_mod == 2'h2;
  assign _028_ = cfg_pri_mod == 2'h3;
  assign _029_ = rxpos == offset;
  assign _030_ = rxpos == offset;
  assign _031_ = fifo_aval && cfg_rx_enable;
  assign _032_ = _037_ && si;
  assign _033_ = _022_ && _035_;
  assign _034_ = ! si;
  assign _035_ = ! si;
  assign _037_ = cnt < 32'd7;
  assign _038_ = si != parity;
  assign _039_ = si != _043_;
  assign _040_ = - $signed({ 1'h0, cnt });
  assign _041_ = - $signed({ 1'h0, cnt });
  assign _042_ = ~ _144_;
  assign _043_ = ~ parity;
  assign _044_ = _019_ | _145_;
  always @(posedge baud_clk_16x, negedge reset_n)
    if (!reset_n) cnt <= 3'h0;
    else cnt <= _131_;
  always @(posedge baud_clk_16x, negedge reset_n)
    if (!reset_n) error_ind <= 2'h0;
    else error_ind <= _106_;
  always @(posedge baud_clk_16x, negedge reset_n)
    if (!reset_n) fifo_data <= 8'h00;
    else fifo_data <= _053_;
  always @(posedge baud_clk_16x, negedge reset_n)
    if (!reset_n) fifo_wr <= 1'h0;
    else fifo_wr <= _094_;
  always @(posedge baud_clk_16x, negedge reset_n)
    if (!reset_n) offset <= 4'h0;
    else offset <= _015_[3:0];
  always @(posedge baud_clk_16x, negedge reset_n)
    if (!reset_n) rxpos <= 4'h0;
    else rxpos <= _092_;
  always @(posedge baud_clk_16x, negedge reset_n)
    if (!reset_n) rxstate <= 3'h0;
    else rxstate <= _059_;
  always @(posedge baud_clk_16x, negedge reset_n)
    if (!reset_n) _020_ <= 3'hx;
    else _020_ <= 3'hx;
  always @(posedge baud_clk_16x, negedge reset_n)
    if (!reset_n) _036_ <= 8'hxx;
    else _036_ <= 8'hxx;
  assign _045_ = _046_ ? _044_ : fifo_data;
  assign _047_ = _048_ ? _045_ : 8'hxx;
  assign _048_ = rxstate == 3'h2;
  assign _049_ = _050_ ? cnt : _020_;
  assign _051_ = _052_ ? _049_ : 3'hx;
  assign _052_ = rxstate == 3'h2;
  assign _053_ = _054_ ? _014_ : fifo_data;
  assign _054_ = rxstate == 3'h2;
  assign _055_ = _056_ ? _013_ : _020_;
  assign _056_ = rxstate == 3'h2;
  assign _057_ = _058_ ? 3'h0 : rxstate;
  function [2:0] _194_;
    input [2:0] a;
    input [17:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _194_ = b[2:0];
      6'b????1?:
        _194_ = b[5:3];
      6'b???1??:
        _194_ = b[8:6];
      6'b??1???:
        _194_ = b[11:9];
      6'b?1????:
        _194_ = b[14:12];
      6'b1?????:
        _194_ = b[17:15];
      default:
        _194_ = a;
    endcase
  endfunction
  assign _059_ = _194_(rxstate, { _085_, _080_, _075_, _068_, _065_, _057_ }, { _087_, _082_, _077_, _070_, _067_, _060_ });
  assign _060_ = rxstate == 3'h5;
  assign _061_ = _062_ ? 3'h5 : 3'h0;
  assign _063_ = _064_ ? _061_ : 3'h0;
  assign _065_ = _066_ ? _063_ : rxstate;
  assign _067_ = rxstate == 3'h4;
  assign _068_ = _069_ ? 3'h4 : rxstate;
  assign _070_ = rxstate == 3'h3;
  assign _071_ = _072_ ? 3'h4 : 3'h3;
  assign _073_ = _074_ ? _071_ : rxstate;
  assign _075_ = _076_ ? _073_ : rxstate;
  assign _077_ = rxstate == 3'h2;
  assign _078_ = _079_ ? 3'h2 : rxstate;
  assign _080_ = _081_ ? 3'h0 : _078_;
  assign _082_ = rxstate == 3'h1;
  assign _083_ = _084_ ? 3'h1 : rxstate;
  assign _085_ = si ? rxstate : _083_;
  assign _087_ = ! rxstate;
  assign _088_ = _089_ ? _016_[3:0] : rxpos;
  assign _090_ = si ? rxpos : _088_;
  assign _092_ = _093_ ? _090_ : rxpos;
  assign _093_ = ! rxstate;
  function [0:0] _216_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _216_ = b[0:0];
      3'b?1?:
        _216_ = b[1:1];
      3'b1??:
        _216_ = b[2:2];
      default:
        _216_ = a;
    endcase
  endfunction
  assign _094_ = _216_(fifo_wr, { _099_, 2'h0 }, { _101_, _096_, _095_ });
  assign _095_ = rxstate == 3'h4;
  assign _096_ = rxstate == 3'h3;
  assign _097_ = _098_ ? 1'h1 : fifo_wr;
  assign _099_ = _100_ ? _097_ : fifo_wr;
  assign _101_ = rxstate == 3'h2;
  assign _102_ = _103_ ? error_ind : 2'h1;
  assign _104_ = _105_ ? _102_ : error_ind;
  function [1:0] _224_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _224_ = b[1:0];
      4'b??1?:
        _224_ = b[3:2];
      4'b?1??:
        _224_ = b[5:4];
      4'b1???:
        _224_ = b[7:6];
      default:
        _224_ = a;
    endcase
  endfunction
  assign _106_ = _224_(error_ind, { _126_, _121_, _110_, _104_ }, { _128_, _123_, _112_, _107_ });
  assign _107_ = rxstate == 3'h5;
  assign _108_ = _109_ ? error_ind : 2'h1;
  assign _110_ = _111_ ? _108_ : error_ind;
  assign _112_ = rxstate == 3'h4;
  assign _113_ = _114_ ? 2'h2 : error_ind;
  assign _115_ = _116_ ? _113_ : error_ind;
  assign _117_ = _118_ ? 2'h2 : error_ind;
  assign _119_ = _120_ ? _117_ : _115_;
  assign _121_ = _122_ ? _119_ : error_ind;
  assign _123_ = rxstate == 3'h3;
  assign _124_ = _125_ ? 2'h0 : 2'h3;
  assign _126_ = si ? 2'h0 : _124_;
  assign _128_ = ! rxstate;
  assign _129_ = _130_ ? _018_[2:0] : cnt;
  function [2:0] _239_;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _239_ = b[2:0];
      3'b?1?:
        _239_ = b[5:3];
      3'b1??:
        _239_ = b[8:6];
      default:
        _239_ = a;
    endcase
  endfunction
  assign _131_ = _239_(cnt, { _140_, _135_, _129_ }, { _142_, _137_, _132_ });
  assign _132_ = rxstate == 3'h2;
  assign _133_ = _134_ ? 3'h0 : _017_[2:0];
  assign _135_ = _136_ ? cnt : _133_;
  assign _137_ = rxstate == 3'h1;
  assign _138_ = _139_ ? 3'h0 : cnt;
  assign _140_ = si ? cnt : _138_;
  assign _142_ = ! rxstate;
  assign _143_ = ^ fifo_data;
  assign _144_ = $signed(_040_) < 0 ? 1'h1 << - _040_ : 1'h1 >> _040_;
  assign _145_ = $signed(_041_) < 0 ? si << - _041_ : si >> _041_;
  assign parity = _143_;
  assign _004_ = _010_;
  assign _001_ = _010_;
  assign _000_ = _009_;
  assign _046_ = _023_;
  assign _014_ = _047_;
  assign _050_ = _023_;
  assign _013_ = _051_;
  assign _012_ = _053_;
  assign _011_ = _055_;
  assign _010_ = _012_;
  assign _009_ = _011_;
  assign _006_ = _015_[3:0];
  assign _058_ = _030_;
  assign _062_ = cfg_stop_bit;
  assign _064_ = si;
  assign _066_ = _029_;
  assign _069_ = _026_;
  assign _072_ = _025_;
  assign _074_ = _024_;
  assign _076_ = _023_;
  assign _079_ = _033_;
  assign _081_ = _032_;
  assign _084_ = _031_;
  assign _086_ = _034_;
  assign _008_ = _059_;
  assign _089_ = _031_;
  assign _091_ = _034_;
  assign _007_ = _092_;
  assign _098_ = _024_;
  assign _100_ = _023_;
  assign _005_ = _094_;
  assign _103_ = si;
  assign _105_ = _030_;
  assign _109_ = si;
  assign _111_ = _029_;
  assign _114_ = _039_;
  assign _116_ = _028_;
  assign _118_ = _038_;
  assign _120_ = _027_;
  assign _122_ = _026_;
  assign _125_ = _031_;
  assign _127_ = _034_;
  assign _003_ = _106_;
  assign _130_ = _023_;
  assign _134_ = _033_;
  assign _136_ = _032_;
  assign _139_ = _031_;
  assign _141_ = _034_;
  assign _002_ = _131_;
endmodule

module uart_txfsm(reset_n, baud_clk_16x, cfg_tx_enable, cfg_stop_bit, cfg_pri_mod, fifo_empty, fifo_rd, fifo_data, so);
  wire [2:0] _000_;
  wire [3:0] _001_;
  wire _002_;
  wire _003_;
  wire [7:0] _004_;
  wire [2:0] _005_;
  wire [31:0] _006_;
  wire [31:0] _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire [7:0] _017_;
  wire _018_;
  wire [7:0] _019_;
  wire _020_;
  wire [7:0] _021_;
  wire _022_;
  wire [2:0] _023_;
  wire _024_;
  wire [2:0] _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire [2:0] _029_;
  wire _030_;
  wire [2:0] _031_;
  wire _032_;
  wire _033_;
  wire [2:0] _034_;
  wire _035_;
  wire _036_;
  wire [2:0] _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire [2:0] _046_;
  wire _047_;
  wire [2:0] _048_;
  wire _049_;
  wire _050_;
  wire [2:0] _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  input baud_clk_16x;
  wire baud_clk_16x;
  input [1:0] cfg_pri_mod;
  wire [1:0] cfg_pri_mod;
  input cfg_stop_bit;
  wire cfg_stop_bit;
  input cfg_tx_enable;
  wire cfg_tx_enable;
  reg [2:0] cnt;
  reg [3:0] divcnt;
  input [7:0] fifo_data;
  wire [7:0] fifo_data;
  input fifo_empty;
  wire fifo_empty;
  output fifo_rd;
  reg fifo_rd;
  input reset_n;
  wire reset_n;
  output so;
  reg so;
  reg [7:0] txdata;
  reg [2:0] txstate;
  assign _006_ = divcnt + 32'd1;
  assign _007_ = cnt + 32'd1;
  assign _008_ = ~ reset_n;
  assign _009_ = ! divcnt;
  assign _010_ = cnt == 3'h7;
  assign _011_ = ! cfg_pri_mod;
  assign _012_ = cfg_pri_mod == 2'h2;
  assign _013_ = ~ cfg_stop_bit;
  assign _014_ = _015_ && cfg_tx_enable;
  assign _015_ = ! fifo_empty;
  assign _016_ = ~ _066_;
  always @(posedge baud_clk_16x, negedge reset_n)
    if (!reset_n) so <= 1'h1;
    else so <= _063_;
  always @(posedge baud_clk_16x, negedge reset_n)
    if (!reset_n) cnt <= 3'h0;
    else cnt <= _051_;
  always @(posedge baud_clk_16x, negedge reset_n)
    if (!reset_n) fifo_rd <= 1'h0;
    else fifo_rd <= _044_;
  always @(posedge baud_clk_16x, negedge reset_n)
    if (!reset_n) txstate <= 3'h0;
    else txstate <= _037_;
  always @(posedge baud_clk_16x, negedge reset_n)
    if (!reset_n) txdata <= 8'h00;
    else txdata <= _021_;
  always @(posedge baud_clk_16x, negedge reset_n)
    if (!reset_n) divcnt <= 4'h0;
    else divcnt <= _006_[3:0];
  assign _017_ = _018_ ? fifo_data : txdata;
  assign _019_ = _020_ ? _017_ : txdata;
  assign _020_ = ! txstate;
  assign _021_ = _022_ ? _019_ : txdata;
  function [2:0] _089_;
    input [2:0] a;
    input [14:0] b;
    input [4:0] s;
    casez (s) // synopsys parallel_case
      5'b????1:
        _089_ = b[2:0];
      5'b???1?:
        _089_ = b[5:3];
      5'b??1??:
        _089_ = b[8:6];
      5'b?1???:
        _089_ = b[11:9];
      5'b1????:
        _089_ = b[14:12];
      default:
        _089_ = a;
    endcase
  endfunction
  assign _023_ = _089_(txstate, { _034_, _031_, 3'h3, _025_, 3'h0 }, { _036_, _033_, _028_, _027_, _024_ });
  assign _024_ = txstate == 3'h4;
  assign _025_ = cfg_stop_bit ? 3'h4 : 3'h0;
  assign _027_ = txstate == 3'h3;
  assign _028_ = txstate == 3'h2;
  assign _029_ = _030_ ? 3'h3 : 3'h2;
  assign _031_ = _032_ ? _029_ : txstate;
  assign _033_ = txstate == 3'h1;
  assign _034_ = _035_ ? 3'h1 : txstate;
  assign _036_ = ! txstate;
  assign _037_ = _038_ ? _023_ : txstate;
  function [0:0] _100_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _100_ = b[0:0];
      2'b1?:
        _100_ = b[1:1];
      default:
        _100_ = a;
    endcase
  endfunction
  assign _039_ = _100_(fifo_rd, { _041_, 1'h0 }, { _043_, _040_ });
  assign _040_ = txstate == 3'h1;
  assign _041_ = _042_ ? 1'h1 : fifo_rd;
  assign _043_ = ! txstate;
  assign _044_ = _045_ ? _039_ : 1'h0;
  function [2:0] _105_;
    input [2:0] a;
    input [5:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _105_ = b[2:0];
      2'b1?:
        _105_ = b[5:3];
      default:
        _105_ = a;
    endcase
  endfunction
  assign _046_ = _105_(cnt, { _048_, _007_[2:0] }, { _050_, _047_ });
  assign _047_ = txstate == 3'h1;
  assign _048_ = _049_ ? 3'h0 : cnt;
  assign _050_ = ! txstate;
  assign _051_ = _052_ ? _046_ : cnt;
  function [0:0] _110_;
    input [0:0] a;
    input [4:0] b;
    input [4:0] s;
    casez (s) // synopsys parallel_case
      5'b????1:
        _110_ = b[0:0];
      5'b???1?:
        _110_ = b[1:1];
      5'b??1??:
        _110_ = b[2:2];
      5'b?1???:
        _110_ = b[3:3];
      5'b1????:
        _110_ = b[4:4];
      default:
        _110_ = a;
    endcase
  endfunction
  assign _053_ = _110_(so, { _060_, _067_, _056_, 2'h3 }, { _062_, _059_, _058_, _055_, _054_ });
  assign _054_ = txstate == 3'h4;
  assign _055_ = txstate == 3'h3;
  assign _056_ = _057_ ? _065_ : _016_;
  assign _058_ = txstate == 3'h2;
  assign _059_ = txstate == 3'h1;
  assign _060_ = _061_ ? 1'h0 : so;
  assign _062_ = ! txstate;
  assign _063_ = _064_ ? _053_ : so;
  assign _065_ = ^ txdata;
  assign _066_ = ^ txdata;
  wire [7:0] _122_ = txdata;
  assign _067_ = _122_[cnt +: 1];
  assign _001_ = _006_[3:0];
  assign _018_ = _014_;
  assign _022_ = _009_;
  assign _004_ = _021_;
  assign _026_ = _013_;
  assign _030_ = _011_;
  assign _032_ = _010_;
  assign _035_ = _014_;
  assign _038_ = _009_;
  assign _005_ = _037_;
  assign _042_ = _014_;
  assign _045_ = _009_;
  assign _002_ = _044_;
  assign _049_ = _014_;
  assign _052_ = _009_;
  assign _000_ = _051_;
  assign _057_ = _012_;
  assign _061_ = _014_;
  assign _064_ = _009_;
  assign _003_ = _063_;
endmodule

module usb1_core(clk_i, rst_i, DataOut, TxValid, TxReady, RxValid, RxActive, RxError, DataIn, LineState, phy_tx_mode, usb_rst, dropped_frame, misaligned_frame, crc16_err, v_set_int, v_set_feature, wValue, wIndex, vendor_data, usb_busy
, ep_sel, ep1_cfg, ep1_din, ep1_we, ep1_full, ep1_dout, ep1_re, ep1_empty, ep1_bf_en, ep1_bf_size, ep2_cfg, ep2_din, ep2_we, ep2_full, ep2_dout, ep2_re, ep2_empty, ep2_bf_en, ep2_bf_size, ep3_cfg, ep3_din
, ep3_we, ep3_full, ep3_dout, ep3_re, ep3_empty, ep3_bf_en, ep3_bf_size, ep4_cfg, ep4_din, ep4_we, ep4_full, ep4_dout, ep4_re, ep4_empty, ep4_bf_en, ep4_bf_size, ep5_cfg, ep5_din, ep5_we, ep5_full, ep5_dout
, ep5_re, ep5_empty, ep5_bf_en, ep5_bf_size, ep6_cfg, ep6_din, ep6_we, ep6_full, ep6_dout, ep6_re, ep6_empty, ep6_bf_en, ep6_bf_size, ep7_cfg, ep7_din, ep7_we, ep7_full, ep7_dout, ep7_re, ep7_empty, ep7_bf_en
, ep7_bf_size, reg_addr, reg_rdwrn, reg_req, reg_wdata, reg_rdata, reg_ack);
  wire [13:0] _000_;
  wire _001_;
  wire [6:0] _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire [7:0] _006_;
  wire [13:0] _007_;
  wire _008_;
  wire [6:0] _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire [13:0] _073_;
  wire [6:0] _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire [7:0] _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire [13:0] _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  input [7:0] DataIn;
  wire [7:0] DataIn;
  output [7:0] DataOut;
  wire [7:0] DataOut;
  input [1:0] LineState;
  wire [1:0] LineState;
  input RxActive;
  wire RxActive;
  input RxError;
  wire RxError;
  input RxValid;
  wire RxValid;
  input TxReady;
  wire TxReady;
  output TxValid;
  wire TxValid;
  wire [13:0] cfg;
  input clk_i;
  wire clk_i;
  output crc16_err;
  wire crc16_err;
  wire crc5_err;
  wire ctrl_in;
  wire ctrl_out;
  wire ctrl_setup;
  output dropped_frame;
  wire dropped_frame;
  wire [13:0] ep0_cfg;
  wire [7:0] ep0_ctrl_din;
  wire [7:0] ep0_ctrl_dout;
  wire ep0_ctrl_re;
  wire [3:0] ep0_ctrl_stat;
  wire ep0_ctrl_we;
  wire [7:0] ep0_din;
  wire [7:0] ep0_dout;
  wire ep0_empty;
  wire ep0_full;
  wire ep0_re;
  wire [7:0] ep0_size;
  wire ep0_we;
  input ep1_bf_en;
  wire ep1_bf_en;
  input [6:0] ep1_bf_size;
  wire [6:0] ep1_bf_size;
  input [13:0] ep1_cfg;
  wire [13:0] ep1_cfg;
  input [7:0] ep1_din;
  wire [7:0] ep1_din;
  output [7:0] ep1_dout;
  wire [7:0] ep1_dout;
  input ep1_empty;
  wire ep1_empty;
  input ep1_full;
  wire ep1_full;
  output ep1_re;
  wire ep1_re;
  output ep1_we;
  wire ep1_we;
  input ep2_bf_en;
  wire ep2_bf_en;
  input [6:0] ep2_bf_size;
  wire [6:0] ep2_bf_size;
  input [13:0] ep2_cfg;
  wire [13:0] ep2_cfg;
  input [7:0] ep2_din;
  wire [7:0] ep2_din;
  output [7:0] ep2_dout;
  wire [7:0] ep2_dout;
  input ep2_empty;
  wire ep2_empty;
  input ep2_full;
  wire ep2_full;
  output ep2_re;
  wire ep2_re;
  output ep2_we;
  wire ep2_we;
  input ep3_bf_en;
  wire ep3_bf_en;
  input [6:0] ep3_bf_size;
  wire [6:0] ep3_bf_size;
  input [13:0] ep3_cfg;
  wire [13:0] ep3_cfg;
  input [7:0] ep3_din;
  wire [7:0] ep3_din;
  output [7:0] ep3_dout;
  wire [7:0] ep3_dout;
  input ep3_empty;
  wire ep3_empty;
  input ep3_full;
  wire ep3_full;
  output ep3_re;
  wire ep3_re;
  output ep3_we;
  wire ep3_we;
  input ep4_bf_en;
  wire ep4_bf_en;
  input [6:0] ep4_bf_size;
  wire [6:0] ep4_bf_size;
  input [13:0] ep4_cfg;
  wire [13:0] ep4_cfg;
  input [7:0] ep4_din;
  wire [7:0] ep4_din;
  output [7:0] ep4_dout;
  wire [7:0] ep4_dout;
  input ep4_empty;
  wire ep4_empty;
  input ep4_full;
  wire ep4_full;
  output ep4_re;
  wire ep4_re;
  output ep4_we;
  wire ep4_we;
  input ep5_bf_en;
  wire ep5_bf_en;
  input [6:0] ep5_bf_size;
  wire [6:0] ep5_bf_size;
  input [13:0] ep5_cfg;
  wire [13:0] ep5_cfg;
  input [7:0] ep5_din;
  wire [7:0] ep5_din;
  output [7:0] ep5_dout;
  wire [7:0] ep5_dout;
  input ep5_empty;
  wire ep5_empty;
  input ep5_full;
  wire ep5_full;
  output ep5_re;
  wire ep5_re;
  output ep5_we;
  wire ep5_we;
  input ep6_bf_en;
  wire ep6_bf_en;
  input [6:0] ep6_bf_size;
  wire [6:0] ep6_bf_size;
  input [13:0] ep6_cfg;
  wire [13:0] ep6_cfg;
  input [7:0] ep6_din;
  wire [7:0] ep6_din;
  output [7:0] ep6_dout;
  wire [7:0] ep6_dout;
  input ep6_empty;
  wire ep6_empty;
  input ep6_full;
  wire ep6_full;
  output ep6_re;
  wire ep6_re;
  output ep6_we;
  wire ep6_we;
  input ep7_bf_en;
  wire ep7_bf_en;
  input [6:0] ep7_bf_size;
  wire [6:0] ep7_bf_size;
  input [13:0] ep7_cfg;
  wire [13:0] ep7_cfg;
  input [7:0] ep7_din;
  wire [7:0] ep7_din;
  output [7:0] ep7_dout;
  wire [7:0] ep7_dout;
  input ep7_empty;
  wire ep7_empty;
  input ep7_full;
  wire ep7_full;
  output ep7_re;
  wire ep7_re;
  output ep7_we;
  wire ep7_we;
  reg ep_bf_en;
  reg [6:0] ep_bf_size;
  reg ep_empty;
  wire ep_full;
  output [3:0] ep_sel;
  wire [3:0] ep_sel;
  wire [31:0] frm_nat;
  wire [6:0] funct_adr;
  wire idma_re;
  wire idma_we;
  wire int_seqerr_set;
  wire int_to_set;
  output misaligned_frame;
  wire misaligned_frame;
  wire nse_err;
  input phy_tx_mode;
  wire phy_tx_mode;
  wire pid_cs_err;
  input reg_ack;
  wire reg_ack;
  output [31:0] reg_addr;
  wire [31:0] reg_addr;
  input [31:0] reg_rdata;
  wire [31:0] reg_rdata;
  output reg_rdwrn;
  wire reg_rdwrn;
  output reg_req;
  wire reg_req;
  output [31:0] reg_wdata;
  wire [31:0] reg_wdata;
  wire [6:0] rom_adr;
  wire [7:0] rom_data;
  input rst_i;
  wire rst_i;
  reg rst_local;
  wire rx_active;
  wire [7:0] rx_ctrl_data;
  wire [7:0] rx_ctrl_data_d;
  wire rx_ctrl_ddone;
  wire rx_ctrl_dvalid;
  wire [7:0] rx_data;
  wire rx_done;
  wire rx_err;
  wire [7:0] rx_size;
  wire rx_valid;
  wire send_stall;
  wire token_valid;
  wire [7:0] tx_data;
  reg [7:0] tx_data_st;
  wire tx_first;
  wire tx_ready;
  wire tx_valid;
  wire tx_valid_last;
  output usb_busy;
  wire usb_busy;
  input usb_rst;
  wire usb_rst;
  output v_set_feature;
  wire v_set_feature;
  output v_set_int;
  wire v_set_int;
  input [15:0] vendor_data;
  wire [15:0] vendor_data;
  output [15:0] wIndex;
  wire [15:0] wIndex;
  output [15:0] wValue;
  wire [15:0] wValue;
  assign _011_ = rst_i & _072_;
  assign _012_ = idma_re & _042_;
  assign _013_ = idma_re & _043_;
  assign _014_ = _013_ & _058_;
  assign _015_ = idma_re & _044_;
  assign _016_ = _015_ & _059_;
  assign _017_ = idma_re & _045_;
  assign _018_ = _017_ & _060_;
  assign _019_ = idma_re & _046_;
  assign _020_ = _019_ & _061_;
  assign _021_ = idma_re & _047_;
  assign _022_ = _021_ & _062_;
  assign _023_ = idma_re & _048_;
  assign _024_ = _023_ & _063_;
  assign _025_ = idma_re & _049_;
  assign _026_ = _025_ & _064_;
  assign _027_ = idma_we & _050_;
  assign _028_ = idma_we & _051_;
  assign _029_ = _028_ & _065_;
  assign _030_ = idma_we & _052_;
  assign _031_ = _030_ & _066_;
  assign _032_ = idma_we & _053_;
  assign _033_ = _032_ & _067_;
  assign _034_ = idma_we & _054_;
  assign _035_ = _034_ & _068_;
  assign _036_ = idma_we & _055_;
  assign _037_ = _036_ & _069_;
  assign _038_ = idma_we & _056_;
  assign _039_ = _038_ & _070_;
  assign _040_ = idma_we & _057_;
  assign _041_ = _040_ & _071_;
  assign _042_ = ! ep_sel;
  assign _043_ = ep_sel == 4'h1;
  assign _044_ = ep_sel == 4'h2;
  assign _045_ = ep_sel == 4'h3;
  assign _046_ = ep_sel == 4'h4;
  assign _047_ = ep_sel == 4'h5;
  assign _048_ = ep_sel == 4'h6;
  assign _049_ = ep_sel == 4'h7;
  assign _050_ = ! ep_sel;
  assign _051_ = ep_sel == 4'h1;
  assign _052_ = ep_sel == 4'h2;
  assign _053_ = ep_sel == 4'h3;
  assign _054_ = ep_sel == 4'h4;
  assign _055_ = ep_sel == 4'h5;
  assign _056_ = ep_sel == 4'h6;
  assign _057_ = ep_sel == 4'h7;
  assign _058_ = ! ep1_empty;
  assign _059_ = ! ep2_empty;
  assign _060_ = ! ep3_empty;
  assign _061_ = ! ep4_empty;
  assign _062_ = ! ep5_empty;
  assign _063_ = ! ep6_empty;
  assign _064_ = ! ep7_empty;
  assign _065_ = ! ep1_full;
  assign _066_ = ! ep2_full;
  assign _067_ = ! ep3_full;
  assign _068_ = ! ep4_full;
  assign _069_ = ! ep5_full;
  assign _070_ = ! ep6_full;
  assign _071_ = ! ep7_full;
  assign _072_ = ~ usb_rst;
  always @(posedge clk_i)
    ep_bf_size <= _074_;
  always @(posedge clk_i)
    ep_bf_en <= _082_;
  always @(posedge clk_i)
    ep_empty <= _100_;
  always @(posedge clk_i)
    tx_data_st <= _109_;
  always @(posedge clk_i)
    rst_local <= _011_;
  function [6:0] _194_;
    input [6:0] a;
    input [48:0] b;
    input [6:0] s;
    casez (s) // synopsys parallel_case
      7'b??????1:
        _194_ = b[6:0];
      7'b?????1?:
        _194_ = b[13:7];
      7'b????1??:
        _194_ = b[20:14];
      7'b???1???:
        _194_ = b[27:21];
      7'b??1????:
        _194_ = b[34:28];
      7'b?1?????:
        _194_ = b[41:35];
      7'b1??????:
        _194_ = b[48:42];
      default:
        _194_ = a;
    endcase
  endfunction
  assign _074_ = _194_(7'hxx, { ep1_bf_size, ep2_bf_size, ep3_bf_size, ep4_bf_size, ep5_bf_size, ep6_bf_size, ep7_bf_size }, { _081_, _080_, _079_, _078_, _077_, _076_, _075_ });
  assign _075_ = ep_sel == 4'h7;
  assign _076_ = ep_sel == 4'h6;
  assign _077_ = ep_sel == 4'h5;
  assign _078_ = ep_sel == 4'h4;
  assign _079_ = ep_sel == 4'h3;
  assign _080_ = ep_sel == 4'h2;
  assign _081_ = ep_sel == 4'h1;
  function [0:0] _202_;
    input [0:0] a;
    input [7:0] b;
    input [7:0] s;
    casez (s) // synopsys parallel_case
      8'b???????1:
        _202_ = b[0:0];
      8'b??????1?:
        _202_ = b[1:1];
      8'b?????1??:
        _202_ = b[2:2];
      8'b????1???:
        _202_ = b[3:3];
      8'b???1????:
        _202_ = b[4:4];
      8'b??1?????:
        _202_ = b[5:5];
      8'b?1??????:
        _202_ = b[6:6];
      8'b1???????:
        _202_ = b[7:7];
      default:
        _202_ = a;
    endcase
  endfunction
  assign _082_ = _202_(1'hx, { 1'h0, ep1_bf_en, ep2_bf_en, ep3_bf_en, ep4_bf_en, ep5_bf_en, ep6_bf_en, ep7_bf_en }, { _090_, _089_, _088_, _087_, _086_, _085_, _084_, _083_ });
  assign _083_ = ep_sel == 4'h7;
  assign _084_ = ep_sel == 4'h6;
  assign _085_ = ep_sel == 4'h5;
  assign _086_ = ep_sel == 4'h4;
  assign _087_ = ep_sel == 4'h3;
  assign _088_ = ep_sel == 4'h2;
  assign _089_ = ep_sel == 4'h1;
  assign _090_ = ! ep_sel;
  function [0:0] _211_;
    input [0:0] a;
    input [7:0] b;
    input [7:0] s;
    casez (s) // synopsys parallel_case
      8'b???????1:
        _211_ = b[0:0];
      8'b??????1?:
        _211_ = b[1:1];
      8'b?????1??:
        _211_ = b[2:2];
      8'b????1???:
        _211_ = b[3:3];
      8'b???1????:
        _211_ = b[4:4];
      8'b??1?????:
        _211_ = b[5:5];
      8'b?1??????:
        _211_ = b[6:6];
      8'b1???????:
        _211_ = b[7:7];
      default:
        _211_ = a;
    endcase
  endfunction
  assign _091_ = _211_(1'hx, { ep0_full, ep1_full, ep2_full, ep3_full, ep4_full, ep5_full, ep6_full, ep7_full }, { _099_, _098_, _097_, _096_, _095_, _094_, _093_, _092_ });
  assign _092_ = ep_sel == 4'h7;
  assign _093_ = ep_sel == 4'h6;
  assign _094_ = ep_sel == 4'h5;
  assign _095_ = ep_sel == 4'h4;
  assign _096_ = ep_sel == 4'h3;
  assign _097_ = ep_sel == 4'h2;
  assign _098_ = ep_sel == 4'h1;
  assign _099_ = ! ep_sel;
  function [0:0] _220_;
    input [0:0] a;
    input [7:0] b;
    input [7:0] s;
    casez (s) // synopsys parallel_case
      8'b???????1:
        _220_ = b[0:0];
      8'b??????1?:
        _220_ = b[1:1];
      8'b?????1??:
        _220_ = b[2:2];
      8'b????1???:
        _220_ = b[3:3];
      8'b???1????:
        _220_ = b[4:4];
      8'b??1?????:
        _220_ = b[5:5];
      8'b?1??????:
        _220_ = b[6:6];
      8'b1???????:
        _220_ = b[7:7];
      default:
        _220_ = a;
    endcase
  endfunction
  assign _100_ = _220_(ep_empty, { ep0_empty, ep1_empty, ep2_empty, ep3_empty, ep4_empty, ep5_empty, ep6_empty, ep7_empty }, { _108_, _107_, _106_, _105_, _104_, _103_, _102_, _101_ });
  assign _101_ = ep_sel == 4'h7;
  assign _102_ = ep_sel == 4'h6;
  assign _103_ = ep_sel == 4'h5;
  assign _104_ = ep_sel == 4'h4;
  assign _105_ = ep_sel == 4'h3;
  assign _106_ = ep_sel == 4'h2;
  assign _107_ = ep_sel == 4'h1;
  assign _108_ = ! ep_sel;
  function [7:0] _229_;
    input [7:0] a;
    input [63:0] b;
    input [7:0] s;
    casez (s) // synopsys parallel_case
      8'b???????1:
        _229_ = b[7:0];
      8'b??????1?:
        _229_ = b[15:8];
      8'b?????1??:
        _229_ = b[23:16];
      8'b????1???:
        _229_ = b[31:24];
      8'b???1????:
        _229_ = b[39:32];
      8'b??1?????:
        _229_ = b[47:40];
      8'b?1??????:
        _229_ = b[55:48];
      8'b1???????:
        _229_ = b[63:56];
      default:
        _229_ = a;
    endcase
  endfunction
  assign _109_ = _229_(tx_data_st, { ep0_dout, ep1_din, ep2_din, ep3_din, ep4_din, ep5_din, ep6_din, ep7_din }, { _117_, _116_, _115_, _114_, _113_, _112_, _111_, _110_ });
  assign _110_ = ep_sel == 4'h7;
  assign _111_ = ep_sel == 4'h6;
  assign _112_ = ep_sel == 4'h5;
  assign _113_ = ep_sel == 4'h4;
  assign _114_ = ep_sel == 4'h3;
  assign _115_ = ep_sel == 4'h2;
  assign _116_ = ep_sel == 4'h1;
  assign _117_ = ! ep_sel;
  function [13:0] _238_;
    input [13:0] a;
    input [111:0] b;
    input [7:0] s;
    casez (s) // synopsys parallel_case
      8'b???????1:
        _238_ = b[13:0];
      8'b??????1?:
        _238_ = b[27:14];
      8'b?????1??:
        _238_ = b[41:28];
      8'b????1???:
        _238_ = b[55:42];
      8'b???1????:
        _238_ = b[69:56];
      8'b??1?????:
        _238_ = b[83:70];
      8'b?1??????:
        _238_ = b[97:84];
      8'b1???????:
        _238_ = b[111:98];
      default:
        _238_ = a;
    endcase
  endfunction
  assign _118_ = _238_(14'hxxxx, { _073_, ep1_cfg, ep2_cfg, ep3_cfg, ep4_cfg, ep5_cfg, ep6_cfg, ep7_cfg }, { _126_, _125_, _124_, _123_, _122_, _121_, _120_, _119_ });
  assign _119_ = ep_sel == 4'h7;
  assign _120_ = ep_sel == 4'h6;
  assign _121_ = ep_sel == 4'h5;
  assign _122_ = ep_sel == 4'h4;
  assign _123_ = ep_sel == 4'h3;
  assign _124_ = ep_sel == 4'h2;
  assign _125_ = ep_sel == 4'h1;
  assign _126_ = ! ep_sel;
  usb1_rom1 rom1 (
    .adr(rom_adr),
    .clk(clk_i),
    .dout(rom_data)
  );
  usb1_utmi_if u0 (
    .DataIn(DataIn),
    .DataOut(DataOut),
    .RxActive(RxActive),
    .RxError(RxError),
    .RxValid(RxValid),
    .TxReady(TxReady),
    .TxValid(TxValid),
    .phy_clk(clk_i),
    .rst(rst_local),
    .rx_active(rx_active),
    .rx_data(rx_data),
    .rx_err(rx_err),
    .rx_valid(rx_valid),
    .tx_data(tx_data),
    .tx_first(tx_first),
    .tx_ready(tx_ready),
    .tx_valid(tx_valid),
    .tx_valid_last(tx_valid_last)
  );
  usb1_pl u1 (
    .clk(clk_i),
    .crc5_err(crc5_err),
    .csr(cfg),
    .ctrl_in(ctrl_in),
    .ctrl_out(ctrl_out),
    .ctrl_setup(ctrl_setup),
    .dropped_frame(dropped_frame),
    .ep_bf_en(ep_bf_en),
    .ep_bf_size(ep_bf_size),
    .ep_empty(ep_empty),
    .ep_full(ep_full),
    .ep_sel(ep_sel),
    .fa(funct_adr),
    .frm_nat(frm_nat),
    .idma_re(idma_re),
    .idma_we(idma_we),
    .int_crc16_set(crc16_err),
    .int_seqerr_set(int_seqerr_set),
    .int_to_set(int_to_set),
    .misaligned_frame(misaligned_frame),
    .nse_err(nse_err),
    .pid_cs_err(pid_cs_err),
    .rst(rst_local),
    .rx_active(rx_active),
    .rx_ctrl_data(rx_ctrl_data),
    .rx_ctrl_data_d(rx_ctrl_data_d),
    .rx_ctrl_ddone(rx_ctrl_ddone),
    .rx_ctrl_dvalid(rx_ctrl_dvalid),
    .rx_data(rx_data),
    .rx_done(rx_done),
    .rx_err(rx_err),
    .rx_size(rx_size),
    .rx_valid(rx_valid),
    .send_stall(send_stall),
    .token_valid(token_valid),
    .tx_data(tx_data),
    .tx_data_st(tx_data_st),
    .tx_first(tx_first),
    .tx_ready(tx_ready),
    .tx_valid(tx_valid),
    .tx_valid_last(tx_valid_last),
    .tx_valid_out(TxValid),
    .x_busy(usb_busy)
  );
  \$paramod$389dff3e1ebfe229ad24155dbc541c2a3c8e57d3\sync_fifo  u10 (
    .clk(clk_i),
    .clr(usb_rst),
    .empty(ep0_ctrl_stat[1]),
    .full(ep0_full),
    .rd_data(ep0_ctrl_dout),
    .rd_en(ep0_ctrl_re),
    .reset_n(rst_i),
    .wr_data(rx_ctrl_data_d),
    .wr_en(ep0_we)
  );
  \$paramod$170963f8ce395e45e1b6bf6be200a9f4d63be4c1\generic_fifo_sc_a  u11 (
    .clk(clk_i),
    .clr(usb_rst),
    .din(ep0_ctrl_din),
    .dout(ep0_dout),
    .empty(ep0_empty),
    .full(ep0_ctrl_stat[2]),
    .re(ep0_re),
    .rst(rst_i),
    .we(ep0_ctrl_we)
  );
  usb1_ctrl u4 (
    .clk(clk_i),
    .ctrl_in(ctrl_in),
    .ctrl_out(ctrl_out),
    .ctrl_setup(ctrl_setup),
    .ep0_din(ep0_ctrl_dout),
    .ep0_dout(ep0_ctrl_din),
    .ep0_re(ep0_ctrl_re),
    .ep0_size(ep0_size),
    .ep0_stat(ep0_ctrl_stat),
    .ep0_we(ep0_ctrl_we),
    .frame_no(frm_nat[26:16]),
    .funct_adr(funct_adr),
    .reg_ack(reg_ack),
    .reg_addr(reg_addr),
    .reg_rdata(reg_rdata),
    .reg_rdwrn(reg_rdwrn),
    .reg_req(reg_req),
    .reg_wdata(reg_wdata),
    .rom_adr(rom_adr),
    .rom_data(rom_data),
    .rst(rst_local),
    .rx_ctrl_data(rx_ctrl_data),
    .rx_ctrl_ddone(rx_ctrl_ddone),
    .rx_ctrl_dvalid(rx_ctrl_dvalid),
    .send_stall(send_stall),
    .v_set_feature(v_set_feature),
    .v_set_int(v_set_int),
    .vendor_data(vendor_data),
    .wIndex(wIndex),
    .wValue(wValue)
  );
  assign ep0_cfg = _073_;
  assign ep1_dout = rx_ctrl_data_d;
  assign ep2_dout = rx_ctrl_data_d;
  assign ep3_dout = rx_ctrl_data_d;
  assign ep4_dout = rx_ctrl_data_d;
  assign ep5_dout = rx_ctrl_data_d;
  assign ep6_dout = rx_ctrl_data_d;
  assign ep7_dout = rx_ctrl_data_d;
  assign ep0_re = _012_;
  assign ep1_re = _014_;
  assign ep2_re = _016_;
  assign ep3_re = _018_;
  assign ep4_re = _020_;
  assign ep5_re = _022_;
  assign ep6_re = _024_;
  assign ep7_re = _026_;
  assign ep0_we = _027_;
  assign ep1_we = _029_;
  assign ep2_we = _031_;
  assign ep3_we = _033_;
  assign ep4_we = _035_;
  assign ep5_we = _037_;
  assign ep6_we = _039_;
  assign ep7_we = _041_;
  assign _002_ = _009_;
  assign _001_ = _008_;
  assign _004_ = _010_;
  assign _000_ = _007_;
  assign _005_ = _011_;
  assign _009_ = _074_;
  assign _008_ = _082_;
  assign _010_ = _091_;
  assign _003_ = _100_;
  assign _006_ = _109_;
  assign _007_ = _118_;
  assign ep_full = _091_;
  assign cfg = _118_;
  assign { _073_[12], _073_[10:0] } = { 4'h0, ep0_size };
  assign { _073_[13], _073_[11] } = 2'h3;
endmodule

module usb1_crc16(crc_in, din, crc_out);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  input [15:0] crc_in;
  wire [15:0] crc_in;
  output [15:0] crc_out;
  wire [15:0] crc_out;
  input [7:0] din;
  wire [7:0] din;
  assign _000_ = din[7] ^ din[6];
  assign _001_ = _000_ ^ din[5];
  assign _002_ = _001_ ^ din[4];
  assign _003_ = _002_ ^ din[3];
  assign _004_ = _003_ ^ din[2];
  assign _005_ = _004_ ^ din[1];
  assign _006_ = _005_ ^ din[0];
  assign _007_ = _006_ ^ crc_in[8];
  assign _008_ = _007_ ^ crc_in[9];
  assign _009_ = _008_ ^ crc_in[10];
  assign _010_ = _009_ ^ crc_in[11];
  assign _011_ = _010_ ^ crc_in[12];
  assign _012_ = _011_ ^ crc_in[13];
  assign _013_ = _012_ ^ crc_in[14];
  assign _014_ = _013_ ^ crc_in[15];
  assign _015_ = din[7] ^ din[6];
  assign _016_ = _015_ ^ din[5];
  assign _017_ = _016_ ^ din[4];
  assign _018_ = _017_ ^ din[3];
  assign _019_ = _018_ ^ din[2];
  assign _020_ = _019_ ^ din[1];
  assign _021_ = _020_ ^ crc_in[9];
  assign _022_ = _021_ ^ crc_in[10];
  assign _023_ = _022_ ^ crc_in[11];
  assign _024_ = _023_ ^ crc_in[12];
  assign _025_ = _024_ ^ crc_in[13];
  assign _026_ = _025_ ^ crc_in[14];
  assign _027_ = _026_ ^ crc_in[15];
  assign _028_ = din[1] ^ din[0];
  assign _029_ = _028_ ^ crc_in[8];
  assign _030_ = _029_ ^ crc_in[9];
  assign _031_ = din[2] ^ din[1];
  assign _032_ = _031_ ^ crc_in[9];
  assign _033_ = _032_ ^ crc_in[10];
  assign _034_ = din[3] ^ din[2];
  assign _035_ = _034_ ^ crc_in[10];
  assign _036_ = _035_ ^ crc_in[11];
  assign _037_ = din[4] ^ din[3];
  assign _038_ = _037_ ^ crc_in[11];
  assign _039_ = _038_ ^ crc_in[12];
  assign _040_ = din[5] ^ din[4];
  assign _041_ = _040_ ^ crc_in[12];
  assign _042_ = _041_ ^ crc_in[13];
  assign _043_ = din[6] ^ din[5];
  assign _044_ = _043_ ^ crc_in[13];
  assign _045_ = _044_ ^ crc_in[14];
  assign _046_ = din[7] ^ din[6];
  assign _047_ = _046_ ^ crc_in[0];
  assign _048_ = _047_ ^ crc_in[14];
  assign _049_ = _048_ ^ crc_in[15];
  assign _050_ = din[7] ^ crc_in[1];
  assign _051_ = _050_ ^ crc_in[15];
  assign _052_ = din[7] ^ din[6];
  assign _053_ = _052_ ^ din[5];
  assign _054_ = _053_ ^ din[4];
  assign _055_ = _054_ ^ din[3];
  assign _056_ = _055_ ^ din[2];
  assign _057_ = _056_ ^ din[1];
  assign _058_ = _057_ ^ din[0];
  assign _059_ = _058_ ^ crc_in[7];
  assign _060_ = _059_ ^ crc_in[8];
  assign _061_ = _060_ ^ crc_in[9];
  assign _062_ = _061_ ^ crc_in[10];
  assign _063_ = _062_ ^ crc_in[11];
  assign _064_ = _063_ ^ crc_in[12];
  assign _065_ = _064_ ^ crc_in[13];
  assign _066_ = _065_ ^ crc_in[14];
  assign _067_ = _066_ ^ crc_in[15];
  assign crc_out[0] = _014_;
  assign crc_out[1] = _027_;
  assign crc_out[2] = _030_;
  assign crc_out[3] = _033_;
  assign crc_out[4] = _036_;
  assign crc_out[5] = _039_;
  assign crc_out[6] = _042_;
  assign crc_out[7] = _045_;
  assign crc_out[8] = _049_;
  assign crc_out[9] = _051_;
  assign crc_out[10] = crc_in[2];
  assign crc_out[11] = crc_in[3];
  assign crc_out[12] = crc_in[4];
  assign crc_out[13] = crc_in[5];
  assign crc_out[14] = crc_in[6];
  assign crc_out[15] = _067_;
endmodule

module usb1_crc5(crc_in, din, crc_out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  wire _44_;
  input [4:0] crc_in;
  wire [4:0] crc_in;
  output [4:0] crc_out;
  wire [4:0] crc_out;
  input [10:0] din;
  wire [10:0] din;
  assign _00_ = din[10] ^ din[9];
  assign _01_ = _00_ ^ din[6];
  assign _02_ = _01_ ^ din[5];
  assign _03_ = _02_ ^ din[3];
  assign _04_ = _03_ ^ din[0];
  assign _05_ = _04_ ^ crc_in[0];
  assign _06_ = _05_ ^ crc_in[3];
  assign _07_ = _06_ ^ crc_in[4];
  assign _08_ = din[10] ^ din[7];
  assign _09_ = _08_ ^ din[6];
  assign _10_ = _09_ ^ din[4];
  assign _11_ = _10_ ^ din[1];
  assign _12_ = _11_ ^ crc_in[0];
  assign _13_ = _12_ ^ crc_in[1];
  assign _14_ = _13_ ^ crc_in[4];
  assign _15_ = din[10] ^ din[9];
  assign _16_ = _15_ ^ din[8];
  assign _17_ = _16_ ^ din[7];
  assign _18_ = _17_ ^ din[6];
  assign _19_ = _18_ ^ din[3];
  assign _20_ = _19_ ^ din[2];
  assign _21_ = _20_ ^ din[0];
  assign _22_ = _21_ ^ crc_in[0];
  assign _23_ = _22_ ^ crc_in[1];
  assign _24_ = _23_ ^ crc_in[2];
  assign _25_ = _24_ ^ crc_in[3];
  assign _26_ = _25_ ^ crc_in[4];
  assign _27_ = din[10] ^ din[9];
  assign _28_ = _27_ ^ din[8];
  assign _29_ = _28_ ^ din[7];
  assign _30_ = _29_ ^ din[4];
  assign _31_ = _30_ ^ din[3];
  assign _32_ = _31_ ^ din[1];
  assign _33_ = _32_ ^ crc_in[1];
  assign _34_ = _33_ ^ crc_in[2];
  assign _35_ = _34_ ^ crc_in[3];
  assign _36_ = _35_ ^ crc_in[4];
  assign _37_ = din[10] ^ din[9];
  assign _38_ = _37_ ^ din[8];
  assign _39_ = _38_ ^ din[5];
  assign _40_ = _39_ ^ din[4];
  assign _41_ = _40_ ^ din[2];
  assign _42_ = _41_ ^ crc_in[2];
  assign _43_ = _42_ ^ crc_in[3];
  assign _44_ = _43_ ^ crc_in[4];
  assign crc_out[0] = _07_;
  assign crc_out[1] = _14_;
  assign crc_out[2] = _26_;
  assign crc_out[3] = _36_;
  assign crc_out[4] = _44_;
endmodule

module usb1_ctrl(clk, rst, rom_adr, rom_data, ctrl_setup, ctrl_in, ctrl_out, rx_ctrl_data, rx_ctrl_dvalid, rx_ctrl_ddone, ep0_din, ep0_dout, ep0_re, ep0_we, ep0_stat, ep0_size, send_stall, frame_no, funct_adr, configured, halt
, v_set_int, v_set_feature, wValue, wIndex, vendor_data, reg_addr, reg_rdwrn, reg_req, reg_wdata, reg_rdata, reg_ack);
  wire _0000_;
  wire _0001_;
  wire _0002_;
  wire _0003_;
  wire _0004_;
  wire [5:0] _0005_;
  wire [7:0] _0006_;
  wire [7:0] _0007_;
  wire _0008_;
  wire _0009_;
  wire _0010_;
  wire _0011_;
  wire [6:0] _0012_;
  wire [6:0] _0013_;
  wire _0014_;
  wire _0015_;
  wire _0016_;
  wire _0017_;
  wire _0018_;
  wire _0019_;
  wire [7:0] _0020_;
  wire [7:0] _0021_;
  wire [7:0] _0022_;
  wire [7:0] _0023_;
  wire [7:0] _0024_;
  wire [7:0] _0025_;
  wire [7:0] _0026_;
  wire [7:0] _0027_;
  wire _0028_;
  wire _0029_;
  wire _0030_;
  wire _0031_;
  wire _0032_;
  wire [7:0] _0033_;
  wire [19:0] _0034_;
  wire [31:0] _0035_;
  wire [1:0] _0036_;
  wire [31:0] _0037_;
  wire _0038_;
  wire _0039_;
  wire [31:0] _0040_;
  wire _0041_;
  wire [6:0] _0042_;
  wire _0043_;
  wire _0044_;
  wire [6:0] _0045_;
  wire [6:0] _0046_;
  wire [7:0] _0047_;
  wire _0048_;
  wire _0049_;
  wire _0050_;
  wire _0051_;
  wire _0052_;
  wire _0053_;
  wire _0054_;
  wire [19:0] _0055_;
  wire _0056_;
  wire [3:0] _0057_;
  wire _0058_;
  wire _0059_;
  wire _0060_;
  wire _0061_;
  wire _0062_;
  wire _0063_;
  wire [19:0] _0064_;
  wire [19:0] _0065_;
  wire [19:0] _0066_;
  wire [19:0] _0067_;
  wire [19:0] _0068_;
  wire [19:0] _0069_;
  wire [19:0] _0070_;
  wire [19:0] _0071_;
  wire [19:0] _0072_;
  wire [19:0] _0073_;
  wire [5:0] _0074_;
  wire _0075_;
  wire _0076_;
  wire _0077_;
  wire _0078_;
  wire _0079_;
  wire _0080_;
  wire [19:0] _0081_;
  wire _0082_;
  wire [6:0] _0083_;
  wire [7:0] _0084_;
  wire [19:0] _0085_;
  wire [19:0] _0086_;
  wire [19:0] _0087_;
  wire [19:0] _0088_;
  wire [19:0] _0089_;
  wire [19:0] _0090_;
  wire [19:0] _0091_;
  wire [19:0] _0092_;
  wire [19:0] _0093_;
  wire [19:0] _0094_;
  wire [5:0] _0095_;
  wire _0096_;
  wire [19:0] _0097_;
  wire _0098_;
  wire [6:0] _0099_;
  wire [7:0] _0100_;
  wire [19:0] _0101_;
  wire [19:0] _0102_;
  wire [19:0] _0103_;
  wire [19:0] _0104_;
  wire [19:0] _0105_;
  wire [19:0] _0106_;
  wire _0107_;
  wire [19:0] _0108_;
  wire _0109_;
  wire [19:0] _0110_;
  wire _0111_;
  wire [19:0] _0112_;
  wire _0113_;
  wire [19:0] _0114_;
  wire _0115_;
  wire [19:0] _0116_;
  wire [19:0] _0117_;
  wire [19:0] _0118_;
  wire [6:0] _0119_;
  wire [31:0] _0120_;
  wire [31:0] _0121_;
  wire [31:0] _0122_;
  wire _0123_;
  wire _0124_;
  wire _0125_;
  wire _0126_;
  wire _0127_;
  wire _0128_;
  wire _0129_;
  wire _0130_;
  wire _0131_;
  wire _0132_;
  wire _0133_;
  wire _0134_;
  wire _0135_;
  wire _0136_;
  wire _0137_;
  wire _0138_;
  wire _0139_;
  wire _0140_;
  wire _0141_;
  wire _0142_;
  wire _0143_;
  wire _0144_;
  wire _0145_;
  wire _0146_;
  wire _0147_;
  wire _0148_;
  wire _0149_;
  wire _0150_;
  wire _0151_;
  wire _0152_;
  wire _0153_;
  wire _0154_;
  wire _0155_;
  wire _0156_;
  wire _0157_;
  wire _0158_;
  wire _0159_;
  wire _0160_;
  wire _0161_;
  wire _0162_;
  wire _0163_;
  wire _0164_;
  wire _0165_;
  wire _0166_;
  wire _0167_;
  wire _0168_;
  wire _0169_;
  wire _0170_;
  wire _0171_;
  wire _0172_;
  wire _0173_;
  wire _0174_;
  wire _0175_;
  wire _0176_;
  wire _0177_;
  wire _0178_;
  wire _0179_;
  wire _0180_;
  wire _0181_;
  wire _0182_;
  wire _0183_;
  wire _0184_;
  wire _0185_;
  wire _0186_;
  wire _0187_;
  wire _0188_;
  wire _0189_;
  wire _0190_;
  wire _0191_;
  wire _0192_;
  wire _0193_;
  wire _0194_;
  wire _0195_;
  wire _0196_;
  wire _0197_;
  wire _0198_;
  wire _0199_;
  wire _0200_;
  wire _0201_;
  wire _0202_;
  wire _0203_;
  wire _0204_;
  wire _0205_;
  wire _0206_;
  wire _0207_;
  wire _0208_;
  wire _0209_;
  wire _0210_;
  wire _0211_;
  wire _0212_;
  wire _0213_;
  wire _0214_;
  wire _0215_;
  wire _0216_;
  wire _0217_;
  wire _0218_;
  wire _0219_;
  wire _0220_;
  wire _0221_;
  wire _0222_;
  wire _0223_;
  wire _0224_;
  wire _0225_;
  wire _0226_;
  wire _0227_;
  wire _0228_;
  wire _0229_;
  wire _0230_;
  wire _0231_;
  wire _0232_;
  wire _0233_;
  wire _0234_;
  wire _0235_;
  wire _0236_;
  wire _0237_;
  wire _0238_;
  wire _0239_;
  wire _0240_;
  wire _0241_;
  wire _0242_;
  wire _0243_;
  wire _0244_;
  wire _0245_;
  wire _0246_;
  wire _0247_;
  wire _0248_;
  wire _0249_;
  wire _0250_;
  wire _0251_;
  wire _0252_;
  wire _0253_;
  wire _0254_;
  wire _0255_;
  wire _0256_;
  wire _0257_;
  wire _0258_;
  wire _0259_;
  wire _0260_;
  wire _0261_;
  wire _0262_;
  wire _0263_;
  wire _0264_;
  wire _0265_;
  wire _0266_;
  wire _0267_;
  wire _0268_;
  wire _0269_;
  wire _0270_;
  wire _0271_;
  wire _0272_;
  wire _0273_;
  wire _0274_;
  wire _0275_;
  wire _0276_;
  wire _0277_;
  wire _0278_;
  wire _0279_;
  wire _0280_;
  wire [19:0] _0281_;
  wire _0282_;
  wire [19:0] _0283_;
  wire _0284_;
  wire [19:0] _0285_;
  wire _0286_;
  wire [19:0] _0287_;
  wire _0288_;
  wire [19:0] _0289_;
  wire _0290_;
  wire [19:0] _0291_;
  wire _0292_;
  wire [19:0] _0293_;
  wire _0294_;
  wire [19:0] _0295_;
  wire _0296_;
  wire [19:0] _0297_;
  wire _0298_;
  wire [19:0] _0299_;
  wire _0300_;
  wire [19:0] _0301_;
  wire _0302_;
  wire _0303_;
  wire _0304_;
  wire _0305_;
  wire _0306_;
  wire [19:0] _0307_;
  wire _0308_;
  wire [19:0] _0309_;
  wire _0310_;
  wire _0311_;
  wire _0312_;
  wire _0313_;
  wire _0314_;
  wire [19:0] _0315_;
  wire _0316_;
  wire [19:0] _0317_;
  wire _0318_;
  wire _0319_;
  wire _0320_;
  wire _0321_;
  wire _0322_;
  wire [19:0] _0323_;
  wire _0324_;
  wire [19:0] _0325_;
  wire _0326_;
  wire _0327_;
  wire _0328_;
  wire _0329_;
  wire _0330_;
  wire [19:0] _0331_;
  wire _0332_;
  wire [19:0] _0333_;
  wire _0334_;
  wire [19:0] _0335_;
  wire _0336_;
  wire [19:0] _0337_;
  wire _0338_;
  wire [19:0] _0339_;
  wire _0340_;
  wire [19:0] _0341_;
  wire _0342_;
  wire [19:0] _0343_;
  wire _0344_;
  wire _0345_;
  wire _0346_;
  wire _0347_;
  wire _0348_;
  wire [19:0] _0349_;
  wire _0350_;
  wire [19:0] _0351_;
  wire _0352_;
  wire [19:0] _0353_;
  wire _0354_;
  wire [19:0] _0355_;
  wire _0356_;
  wire [19:0] _0357_;
  wire _0358_;
  wire [19:0] _0359_;
  wire _0360_;
  wire [19:0] _0361_;
  wire _0362_;
  wire _0363_;
  wire _0364_;
  wire _0365_;
  wire _0366_;
  wire [19:0] _0367_;
  wire _0368_;
  wire [19:0] _0369_;
  wire _0370_;
  wire [19:0] _0371_;
  wire _0372_;
  wire [19:0] _0373_;
  wire _0374_;
  wire [19:0] _0375_;
  wire _0376_;
  wire _0377_;
  wire _0378_;
  wire _0379_;
  wire _0380_;
  wire [5:0] _0381_;
  wire _0382_;
  wire [5:0] _0383_;
  wire _0384_;
  wire [19:0] _0385_;
  wire _0386_;
  wire [19:0] _0387_;
  wire _0388_;
  wire [19:0] _0389_;
  wire _0390_;
  wire [19:0] _0391_;
  wire _0392_;
  wire [19:0] _0393_;
  wire _0394_;
  wire [19:0] _0395_;
  wire _0396_;
  wire [19:0] _0397_;
  wire _0398_;
  wire [19:0] _0399_;
  wire _0400_;
  wire [19:0] _0401_;
  wire _0402_;
  wire [19:0] _0403_;
  wire _0404_;
  wire [19:0] _0405_;
  wire _0406_;
  wire [19:0] _0407_;
  wire _0408_;
  wire [19:0] _0409_;
  wire _0410_;
  wire [19:0] _0411_;
  wire _0412_;
  wire [19:0] _0413_;
  wire _0414_;
  wire [19:0] _0415_;
  wire _0416_;
  wire [19:0] _0417_;
  wire _0418_;
  wire [19:0] _0419_;
  wire _0420_;
  wire [19:0] _0421_;
  wire _0422_;
  wire [19:0] _0423_;
  wire _0424_;
  wire [19:0] _0425_;
  wire _0426_;
  wire [19:0] _0427_;
  wire _0428_;
  wire [19:0] _0429_;
  wire _0430_;
  wire [19:0] _0431_;
  wire _0432_;
  wire [19:0] _0433_;
  wire _0434_;
  wire [19:0] _0435_;
  wire _0436_;
  wire [19:0] _0437_;
  wire _0438_;
  wire [19:0] _0439_;
  wire _0440_;
  wire [19:0] _0441_;
  wire _0442_;
  wire [19:0] _0443_;
  wire _0444_;
  wire [19:0] _0445_;
  wire _0446_;
  wire [19:0] _0447_;
  wire _0448_;
  wire [19:0] _0449_;
  wire _0450_;
  wire [19:0] _0451_;
  wire _0452_;
  wire [19:0] _0453_;
  wire _0454_;
  wire [19:0] _0455_;
  wire _0456_;
  wire [19:0] _0457_;
  wire _0458_;
  wire _0459_;
  wire _0460_;
  wire _0461_;
  wire _0462_;
  wire _0463_;
  wire _0464_;
  wire _0465_;
  wire _0466_;
  wire _0467_;
  wire _0468_;
  wire _0469_;
  wire _0470_;
  wire _0471_;
  wire _0472_;
  wire _0473_;
  wire _0474_;
  wire _0475_;
  wire _0476_;
  wire _0477_;
  wire _0478_;
  wire _0479_;
  wire _0480_;
  wire _0481_;
  wire _0482_;
  wire _0483_;
  wire _0484_;
  wire _0485_;
  wire _0486_;
  wire _0487_;
  wire _0488_;
  wire _0489_;
  wire _0490_;
  wire _0491_;
  wire _0492_;
  wire _0493_;
  wire _0494_;
  wire _0495_;
  wire _0496_;
  wire _0497_;
  wire _0498_;
  wire _0499_;
  wire _0500_;
  wire _0501_;
  wire _0502_;
  wire _0503_;
  wire _0504_;
  wire _0505_;
  wire _0506_;
  wire _0507_;
  wire _0508_;
  wire _0509_;
  wire _0510_;
  wire _0511_;
  wire _0512_;
  wire _0513_;
  wire _0514_;
  wire _0515_;
  wire _0516_;
  wire _0517_;
  wire _0518_;
  wire _0519_;
  wire _0520_;
  wire _0521_;
  wire _0522_;
  wire _0523_;
  wire _0524_;
  wire _0525_;
  wire _0526_;
  wire _0527_;
  wire _0528_;
  wire _0529_;
  wire _0530_;
  wire _0531_;
  wire _0532_;
  wire _0533_;
  wire _0534_;
  wire _0535_;
  wire _0536_;
  wire _0537_;
  wire _0538_;
  wire _0539_;
  wire _0540_;
  wire _0541_;
  wire _0542_;
  wire _0543_;
  wire _0544_;
  wire _0545_;
  wire _0546_;
  wire _0547_;
  wire _0548_;
  wire _0549_;
  wire _0550_;
  wire _0551_;
  wire _0552_;
  wire _0553_;
  wire _0554_;
  wire _0555_;
  wire _0556_;
  wire _0557_;
  wire _0558_;
  wire _0559_;
  wire _0560_;
  wire _0561_;
  wire _0562_;
  wire _0563_;
  wire _0564_;
  wire _0565_;
  wire _0566_;
  wire _0567_;
  wire _0568_;
  wire _0569_;
  wire _0570_;
  wire _0571_;
  wire _0572_;
  wire _0573_;
  wire _0574_;
  wire _0575_;
  wire _0576_;
  wire _0577_;
  wire _0578_;
  wire _0579_;
  wire _0580_;
  wire _0581_;
  wire _0582_;
  wire _0583_;
  wire _0584_;
  wire _0585_;
  wire _0586_;
  wire _0587_;
  wire _0588_;
  wire _0589_;
  wire _0590_;
  wire _0591_;
  wire _0592_;
  wire _0593_;
  wire _0594_;
  wire _0595_;
  wire _0596_;
  wire _0597_;
  wire _0598_;
  wire _0599_;
  wire _0600_;
  wire _0601_;
  wire _0602_;
  wire _0603_;
  wire [5:0] _0604_;
  wire _0605_;
  wire _0606_;
  wire _0607_;
  wire _0608_;
  wire _0609_;
  wire _0610_;
  wire _0611_;
  wire _0612_;
  wire _0613_;
  wire _0614_;
  wire _0615_;
  wire _0616_;
  wire _0617_;
  wire _0618_;
  wire _0619_;
  wire _0620_;
  wire _0621_;
  wire _0622_;
  wire _0623_;
  wire _0624_;
  wire _0625_;
  wire _0626_;
  wire _0627_;
  wire _0628_;
  wire _0629_;
  wire _0630_;
  wire _0631_;
  wire _0632_;
  wire _0633_;
  wire _0634_;
  wire _0635_;
  wire _0636_;
  wire _0637_;
  wire _0638_;
  wire _0639_;
  wire _0640_;
  wire _0641_;
  wire _0642_;
  wire _0643_;
  wire _0644_;
  wire _0645_;
  wire [19:0] _0646_;
  wire _0647_;
  wire [6:0] _0648_;
  wire _0649_;
  wire [6:0] _0650_;
  wire _0651_;
  wire [6:0] _0652_;
  wire _0653_;
  wire [6:0] _0654_;
  wire _0655_;
  wire _0656_;
  wire _0657_;
  wire _0658_;
  wire _0659_;
  wire _0660_;
  wire _0661_;
  wire _0662_;
  wire _0663_;
  wire _0664_;
  wire _0665_;
  wire _0666_;
  wire _0667_;
  wire _0668_;
  wire _0669_;
  wire _0670_;
  wire _0671_;
  wire [31:0] _0672_;
  wire _0673_;
  wire [31:0] _0674_;
  wire _0675_;
  wire [1:0] _0676_;
  wire _0677_;
  wire [1:0] _0678_;
  wire _0679_;
  wire [1:0] _0680_;
  wire _0681_;
  wire [1:0] _0682_;
  wire _0683_;
  wire _0684_;
  wire _0685_;
  wire _0686_;
  wire _0687_;
  wire _0688_;
  wire _0689_;
  wire [31:0] _0690_;
  wire _0691_;
  wire [3:0] _0692_;
  wire _0693_;
  wire [3:0] _0694_;
  wire _0695_;
  wire [3:0] _0696_;
  wire _0697_;
  wire [3:0] _0698_;
  wire _0699_;
  wire _0700_;
  wire _0701_;
  wire _0702_;
  wire _0703_;
  wire _0704_;
  wire _0705_;
  wire _0706_;
  wire _0707_;
  wire [7:0] _0708_;
  wire _0709_;
  wire [7:0] _0710_;
  wire _0711_;
  wire [7:0] _0712_;
  wire _0713_;
  wire [7:0] _0714_;
  wire _0715_;
  wire [7:0] _0716_;
  wire _0717_;
  wire [7:0] _0718_;
  wire _0719_;
  wire _0720_;
  wire _0721_;
  wire _0722_;
  wire _0723_;
  wire _0724_;
  wire [7:0] _0725_;
  wire _0726_;
  wire [7:0] _0727_;
  wire _0728_;
  wire [7:0] _0729_;
  wire _0730_;
  wire [7:0] _0731_;
  wire _0732_;
  wire [7:0] _0733_;
  wire _0734_;
  wire [7:0] _0735_;
  wire _0736_;
  wire [7:0] _0737_;
  wire _0738_;
  wire [7:0] _0739_;
  wire _0740_;
  wire [7:0] _0741_;
  wire _0742_;
  wire [7:0] _0743_;
  wire _0744_;
  wire [7:0] _0745_;
  wire _0746_;
  wire [7:0] _0747_;
  wire _0748_;
  wire [6:0] _0749_;
  wire _0750_;
  wire [6:0] _0751_;
  wire _0752_;
  wire [6:0] _0753_;
  wire _0754_;
  wire [6:0] _0755_;
  wire _0756_;
  wire [6:0] _0757_;
  wire _0758_;
  wire [6:0] _0759_;
  wire _0760_;
  wire [6:0] _0761_;
  wire _0762_;
  wire _0763_;
  wire _0764_;
  wire [6:0] _0765_;
  wire _0766_;
  wire [6:0] _0767_;
  wire _0768_;
  wire _0769_;
  wire _0770_;
  wire [7:0] _0771_;
  wire _0772_;
  wire _0773_;
  wire _0774_;
  wire [7:0] _0775_;
  wire _0776_;
  wire [7:0] _0777_;
  wire _0778_;
  wire _0779_;
  wire _0780_;
  wire _0781_;
  wire _0782_;
  wire _0783_;
  wire _0784_;
  wire _0785_;
  wire _0786_;
  wire _0787_;
  wire _0788_;
  wire _0789_;
  wire _0790_;
  wire _0791_;
  wire _0792_;
  wire _0793_;
  wire _0794_;
  wire [6:0] _0795_;
  wire [6:0] _0796_;
  wire [7:0] _0797_;
  wire [7:0] _0798_;
  wire [7:0] _0799_;
  wire [7:0] _0800_;
  wire [7:0] _0801_;
  wire [7:0] _0802_;
  wire [7:0] _0803_;
  reg addressed;
  reg adv;
  wire [7:0] bRequest;
  wire [7:0] bmReqType;
  wire bm_req_dir;
  wire [4:0] bm_req_recp;
  wire [1:0] bm_req_type;
  reg clear_feature;
  input clk;
  wire clk;
  wire clr_halt;
  reg config_err;
  output configured;
  reg configured;
  input ctrl_in;
  wire ctrl_in;
  input ctrl_out;
  wire ctrl_out;
  input ctrl_setup;
  wire ctrl_setup;
  wire [5:0] data_sel;
  input [7:0] ep0_din;
  wire [7:0] ep0_din;
  output [7:0] ep0_dout;
  reg [7:0] ep0_dout;
  output ep0_re;
  wire ep0_re;
  output [7:0] ep0_size;
  reg [7:0] ep0_size;
  input [3:0] ep0_stat;
  wire [3:0] ep0_stat;
  output ep0_we;
  reg ep0_we;
  wire fifo_empty;
  wire fifo_full;
  wire fifo_re1;
  wire fifo_we_d;
  wire fifo_we_rom;
  reg fifo_we_rom_r;
  reg fifo_we_rom_r2;
  input [10:0] frame_no;
  wire [10:0] frame_no;
  output [6:0] funct_adr;
  reg [6:0] funct_adr;
  reg [6:0] funct_adr_tmp;
  reg get_config;
  reg get_descriptor;
  wire get_hdr;
  reg get_interface;
  reg get_status;
  output halt;
  reg halt;
  reg [7:0] hdr0;
  reg [7:0] hdr1;
  reg [7:0] hdr2;
  reg [7:0] hdr3;
  reg [7:0] hdr4;
  reg [7:0] hdr5;
  reg [7:0] hdr6;
  reg [7:0] hdr7;
  wire hdr_done;
  reg hdr_done_r;
  wire high_sel;
  wire in_size_0;
  wire in_size_1;
  wire in_size_2;
  wire in_size_4;
  reg [7:0] le;
  wire [19:0] next_state;
  input reg_ack;
  wire reg_ack;
  output [31:0] reg_addr;
  reg [31:0] reg_addr;
  reg [1:0] reg_byte_cnt;
  input [31:0] reg_rdata;
  wire [31:0] reg_rdata;
  reg [31:0] reg_rdata_r;
  output reg_rdwrn;
  reg reg_rdwrn;
  output reg_req;
  reg reg_req;
  wire reg_rphase;
  output [31:0] reg_wdata;
  reg [31:0] reg_wdata;
  reg reg_wphase;
  output [6:0] rom_adr;
  reg [6:0] rom_adr;
  input [7:0] rom_data;
  wire [7:0] rom_data;
  wire rom_done;
  wire rom_sel;
  reg rom_sel_r;
  reg [6:0] rom_size;
  wire [6:0] rom_size_d;
  wire [6:0] rom_size_dd;
  wire [7:0] rom_start_d;
  input rst;
  wire rst;
  input [7:0] rx_ctrl_data;
  wire [7:0] rx_ctrl_data;
  input rx_ctrl_ddone;
  wire rx_ctrl_ddone;
  input rx_ctrl_dvalid;
  wire rx_ctrl_dvalid;
  output send_stall;
  reg send_stall;
  reg set_address;
  reg set_adr_pending;
  reg set_config;
  reg set_descriptor;
  reg set_feature;
  wire set_halt;
  reg set_interface;
  reg [19:0] state;
  reg synch_frame;
  reg [3:0] tx_bcnt;
  reg v_get_status;
  output v_set_feature;
  reg v_set_feature;
  output v_set_int;
  reg v_set_int;
  reg v_set_reg_raddr;
  reg v_set_reg_waddr;
  input [15:0] vendor_data;
  wire [15:0] vendor_data;
  output [15:0] wIndex;
  wire [15:0] wIndex;
  wire [15:0] wLength;
  output [15:0] wValue;
  wire [15:0] wValue;
  reg write_done;
  assign _0119_ = rom_adr + 7'h01;
  assign _0120_ = tx_bcnt + 32'd1;
  assign _0121_ = tx_bcnt + 32'd1;
  assign _0122_ = reg_byte_cnt + 32'd1;
  assign _0123_ = rom_sel & _0229_;
  assign _0124_ = rom_sel & _0230_;
  assign _0125_ = rom_sel & _0232_;
  assign _0126_ = rom_sel & _0233_;
  assign _0127_ = rom_sel & fifo_we_rom_r2;
  assign _0128_ = rom_sel & _0234_;
  assign _0129_ = _0170_ & _0235_;
  assign _0130_ = _0260_ & _0236_;
  assign _0131_ = get_hdr & _0237_;
  assign _0132_ = _0131_ & _0238_;
  assign _0133_ = le[7] & fifo_re1;
  assign _0134_ = _0133_ & get_hdr;
  assign _0135_ = fifo_we_d & _0242_;
  assign _0136_ = hdr_done & _0176_;
  assign _0137_ = _0136_ & _0177_;
  assign _0138_ = hdr_done & _0178_;
  assign _0139_ = _0138_ & _0179_;
  assign _0140_ = hdr_done & _0180_;
  assign _0141_ = _0140_ & _0181_;
  assign _0142_ = hdr_done & _0182_;
  assign _0143_ = _0142_ & _0183_;
  assign _0144_ = hdr_done & _0184_;
  assign _0145_ = _0144_ & _0185_;
  assign _0146_ = hdr_done & _0186_;
  assign _0147_ = _0146_ & _0187_;
  assign _0148_ = hdr_done & _0188_;
  assign _0149_ = _0148_ & _0189_;
  assign _0150_ = hdr_done & _0190_;
  assign _0151_ = _0150_ & _0191_;
  assign _0152_ = hdr_done & _0192_;
  assign _0153_ = _0152_ & _0193_;
  assign _0154_ = hdr_done & _0194_;
  assign _0155_ = _0154_ & _0195_;
  assign _0156_ = hdr_done & _0196_;
  assign _0157_ = _0156_ & _0197_;
  assign _0158_ = hdr_done & _0198_;
  assign _0159_ = _0158_ & _0199_;
  assign _0160_ = hdr_done & _0200_;
  assign _0161_ = _0160_ & _0201_;
  assign _0162_ = hdr_done & _0202_;
  assign _0163_ = _0162_ & _0203_;
  assign _0164_ = hdr_done & _0204_;
  assign _0165_ = _0164_ & _0205_;
  assign _0166_ = hdr_done & _0206_;
  assign _0167_ = _0166_ & _0207_;
  assign _0168_ = hdr_done_r & _0248_;
  assign _0169_ = set_adr_pending & ctrl_in;
  assign _0170_ = ! rom_size;
  assign _0171_ = ! tx_bcnt;
  assign _0172_ = tx_bcnt == 4'h1;
  assign _0173_ = tx_bcnt == 4'h2;
  assign _0174_ = state == 20'h00001;
  assign _0175_ = ep0_size == _0120_;
  assign _0176_ = ! bRequest;
  assign _0177_ = ! bm_req_type;
  assign _0178_ = bRequest == 8'h01;
  assign _0179_ = ! bm_req_type;
  assign _0180_ = bRequest == 8'h03;
  assign _0181_ = ! bm_req_type;
  assign _0182_ = bRequest == 8'h05;
  assign _0183_ = ! bm_req_type;
  assign _0184_ = bRequest == 8'h06;
  assign _0185_ = ! bm_req_type;
  assign _0186_ = bRequest == 8'h07;
  assign _0187_ = ! bm_req_type;
  assign _0188_ = bRequest == 8'h08;
  assign _0189_ = ! bm_req_type;
  assign _0190_ = bRequest == 8'h09;
  assign _0191_ = ! bm_req_type;
  assign _0192_ = bRequest == 8'h0a;
  assign _0193_ = ! bm_req_type;
  assign _0194_ = bRequest == 8'h0b;
  assign _0195_ = ! bm_req_type;
  assign _0196_ = bRequest == 8'h0c;
  assign _0197_ = ! bm_req_type;
  assign _0198_ = bRequest == 8'h0f;
  assign _0199_ = bm_req_type == 2'h2;
  assign _0200_ = bRequest == 8'h03;
  assign _0201_ = bm_req_type == 2'h2;
  assign _0202_ = ! bRequest;
  assign _0203_ = bm_req_type == 2'h2;
  assign _0204_ = bRequest == 8'h10;
  assign _0205_ = bm_req_type == 2'h2;
  assign _0206_ = bRequest == 8'h11;
  assign _0207_ = bm_req_type == 2'h2;
  assign _0208_ = reg_byte_cnt == 2'h3;
  assign _0209_ = reg_byte_cnt == 2'h3;
  assign _0210_ = ! bm_req_recp;
  assign _0211_ = wValue[15:8] == 8'h01;
  assign _0212_ = wValue[15:8] == 8'h02;
  assign _0213_ = wValue[15:8] == 8'h03;
  assign _0214_ = rom_size_dd > wLength[6:0];
  assign _0215_ = fifo_re1 && get_hdr;
  assign _0216_ = _0244_ && fifo_we_d;
  assign _0217_ = _0175_ && _0216_;
  assign _0218_ = _0245_ && fifo_we_d;
  assign _0219_ = _0208_ && fifo_re1;
  assign _0220_ = reg_wphase && fifo_re1;
  assign _0221_ = reg_wphase && fifo_re1;
  assign _0222_ = reg_rdwrn && reg_ack;
  assign _0223_ = fifo_re1 && reg_wphase;
  assign _0224_ = _0223_ && _0209_;
  assign _0225_ = ! rst;
  assign _0226_ = ! rst;
  assign _0227_ = ! rst;
  assign _0228_ = ! rst;
  assign _0229_ = ! rom_sel_r;
  assign _0230_ = ! fifo_full;
  assign _0231_ = ! rst;
  assign _0232_ = ! rom_sel_r;
  assign _0233_ = ! fifo_full;
  assign _0234_ = ! rom_sel_r;
  assign _0235_ = ! _0128_;
  assign _0236_ = ! fifo_empty;
  assign _0237_ = ! fifo_empty;
  assign _0238_ = ! adv;
  assign _0239_ = ! rst;
  assign _0240_ = ! get_hdr;
  assign _0241_ = ! _0794_;
  assign _0242_ = ! write_done;
  assign _0243_ = ! rst;
  assign _0244_ = ! fifo_full;
  assign _0245_ = ! fifo_full;
  assign _0246_ = ! rst;
  assign _0247_ = ! rst;
  assign _0248_ = ! _0276_;
  assign _0249_ = ! rst;
  assign _0250_ = ! rst;
  assign _0251_ = ! rst;
  assign _0252_ = ! rst;
  assign _0253_ = ! fifo_full;
  assign _0254_ = ! fifo_full;
  assign _0255_ = ! fifo_full;
  assign _0256_ = ! fifo_full;
  assign _0257_ = ! fifo_full;
  assign _0258_ = ! fifo_full;
  assign _0259_ = v_set_reg_waddr || v_set_reg_raddr;
  assign _0260_ = get_hdr | reg_wphase;
  assign _0261_ = _0135_ | fifo_we_rom;
  assign _0262_ = get_status | clear_feature;
  assign _0263_ = _0262_ | set_feature;
  assign _0264_ = _0263_ | set_address;
  assign _0265_ = _0264_ | get_descriptor;
  assign _0266_ = _0265_ | set_descriptor;
  assign _0267_ = _0266_ | get_config;
  assign _0268_ = _0267_ | set_config;
  assign _0269_ = _0268_ | get_interface;
  assign _0270_ = _0269_ | set_interface;
  assign _0271_ = _0270_ | synch_frame;
  assign _0272_ = _0271_ | v_set_int;
  assign _0273_ = _0272_ | v_set_feature;
  assign _0274_ = _0273_ | v_get_status;
  assign _0275_ = _0274_ | v_set_reg_waddr;
  assign _0276_ = _0275_ | v_set_reg_raddr;
  assign _0277_ = ctrl_in | ctrl_out;
  assign _0278_ = _0277_ | ctrl_setup;
  assign _0279_ = _0280_ | _0213_;
  assign _0280_ = _0211_ | _0212_;
  always @(posedge clk)
    state <= _0646_;
  always @(posedge clk)
    funct_adr <= _0650_;
  always @(posedge clk)
    funct_adr_tmp <= _0654_;
  always @(posedge clk)
    set_adr_pending <= _0660_;
  always @(posedge clk)
    send_stall <= config_err;
  always @(posedge clk)
    config_err <= _0168_;
  always @(posedge clk)
    reg_rdwrn <= _0664_;
  always @(posedge clk)
    reg_req <= _0670_;
  always @(posedge clk)
    reg_rdata_r <= _0672_;
  always @(posedge clk)
    reg_wdata <= _0674_;
  always @(posedge clk)
    reg_wphase <= _0688_;
  always @(posedge clk)
    reg_byte_cnt <= _0682_;
  always @(posedge clk)
    reg_addr <= _0690_;
  always @(posedge clk)
    v_set_reg_raddr <= _0167_;
  always @(posedge clk)
    v_set_reg_waddr <= _0165_;
  always @(posedge clk)
    v_get_status <= _0163_;
  always @(posedge clk)
    v_set_feature <= _0161_;
  always @(posedge clk)
    v_set_int <= _0159_;
  always @(posedge clk)
    synch_frame <= _0157_;
  always @(posedge clk)
    set_interface <= _0155_;
  always @(posedge clk)
    get_interface <= _0153_;
  always @(posedge clk)
    set_config <= _0151_;
  always @(posedge clk)
    get_config <= _0149_;
  always @(posedge clk)
    set_descriptor <= _0147_;
  always @(posedge clk)
    get_descriptor <= _0145_;
  always @(posedge clk)
    set_address <= _0143_;
  always @(posedge clk)
    set_feature <= _0141_;
  always @(posedge clk)
    clear_feature <= _0139_;
  always @(posedge clk)
    get_status <= _0137_;
  always @(posedge clk)
    hdr_done_r <= _0134_;
  always @(posedge clk)
    write_done <= _0706_;
  always @(posedge clk)
    tx_bcnt <= _0698_;
  always @(posedge clk)
    ep0_size <= _0716_;
  always @(posedge clk)
    ep0_we <= _0261_;
  always @(posedge clk)
    ep0_dout <= _0718_;
  always @(posedge clk)
    hdr7 <= _0725_;
  always @(posedge clk)
    hdr6 <= _0727_;
  always @(posedge clk)
    hdr5 <= _0729_;
  always @(posedge clk)
    hdr4 <= _0731_;
  always @(posedge clk)
    hdr3 <= _0733_;
  always @(posedge clk)
    hdr2 <= _0735_;
  always @(posedge clk)
    hdr1 <= _0737_;
  always @(posedge clk)
    hdr0 <= _0739_;
  always @(posedge clk)
    le <= _0747_;
  always @(posedge clk)
    adv <= _0132_;
  always @(posedge clk)
    fifo_we_rom_r2 <= fifo_we_rom_r;
  always @(posedge clk)
    fifo_we_rom_r <= _0478_;
  always @(posedge clk)
    rom_size <= _0753_;
  always @(posedge clk)
    rom_adr <= _0759_;
  always @(posedge clk)
    rom_sel_r <= _0478_;
  always @(posedge clk)
    halt <= _0784_;
  always @(posedge clk)
    configured <= _0788_;
  always @(posedge clk)
    addressed <= _0792_;
  assign _0281_ = _0282_ ? 20'h00001 : state;
  assign _0283_ = _0284_ ? _0281_ : 20'hxxxxx;
  assign _0284_ = state == 20'h08000;
  assign _0285_ = _0286_ ? 20'h00001 : state;
  assign _0287_ = _0288_ ? _0285_ : 20'hxxxxx;
  assign _0288_ = state == 20'h04000;
  assign _0289_ = _0290_ ? 20'h08000 : state;
  assign _0291_ = _0292_ ? _0289_ : 20'hxxxxx;
  assign _0292_ = state == 20'h02000;
  assign _0293_ = _0294_ ? 20'h02000 : state;
  assign _0295_ = ep0_stat[2] ? 20'hxxxxx : _0293_;
  assign _0297_ = _0298_ ? _0295_ : 20'hxxxxx;
  assign _0298_ = state == 20'h01000;
  assign _0299_ = ep0_stat[2] ? state : _0103_;
  assign _0301_ = _0302_ ? _0299_ : 20'hxxxxx;
  assign _0302_ = state == 20'h01000;
  assign _0303_ = ep0_stat[2] ? 1'h0 : 1'h1;
  assign _0305_ = _0306_ ? _0303_ : 1'hx;
  assign _0306_ = state == 20'h01000;
  assign _0307_ = ep0_stat[2] ? state : 20'h02000;
  assign _0309_ = _0310_ ? _0307_ : 20'hxxxxx;
  assign _0310_ = state == 20'h00400;
  assign _0311_ = ep0_stat[2] ? 1'h0 : 1'h1;
  assign _0313_ = _0314_ ? _0311_ : 1'hx;
  assign _0314_ = state == 20'h00400;
  assign _0315_ = ep0_stat[2] ? state : 20'h02000;
  assign _0317_ = _0318_ ? _0315_ : 20'hxxxxx;
  assign _0318_ = state == 20'h00100;
  assign _0319_ = ep0_stat[2] ? 1'h0 : 1'h1;
  assign _0321_ = _0322_ ? _0319_ : 1'hx;
  assign _0322_ = state == 20'h00100;
  assign _0323_ = _0324_ ? 20'h00001 : _0092_;
  assign _0325_ = _0326_ ? _0323_ : 20'hxxxxx;
  assign _0326_ = state == 20'h00040;
  assign _0327_ = _0328_ ? 1'h1 : 1'h0;
  assign _0329_ = _0330_ ? _0327_ : 1'hx;
  assign _0330_ = state == 20'h00040;
  assign _0331_ = _0332_ ? state : 20'h00001;
  assign _0333_ = _0334_ ? _0331_ : 20'hxxxxx;
  assign _0334_ = state == 20'h00040;
  assign _0335_ = _0336_ ? 20'h02000 : state;
  assign _0337_ = ep0_stat[2] ? 20'hxxxxx : _0335_;
  assign _0339_ = _0340_ ? _0337_ : 20'hxxxxx;
  assign _0340_ = state == 20'h40000;
  assign _0341_ = ep0_stat[2] ? state : _0091_;
  assign _0343_ = _0344_ ? _0341_ : 20'hxxxxx;
  assign _0344_ = state == 20'h40000;
  assign _0345_ = ep0_stat[2] ? 1'h0 : 1'h1;
  assign _0347_ = _0348_ ? _0345_ : 1'hx;
  assign _0348_ = state == 20'h40000;
  assign _0349_ = _0350_ ? 20'h40000 : state;
  assign _0351_ = _0352_ ? _0349_ : 20'hxxxxx;
  assign _0352_ = state == 20'h80000;
  assign _0353_ = _0354_ ? 20'h02000 : state;
  assign _0355_ = ep0_stat[2] ? 20'hxxxxx : _0353_;
  assign _0357_ = _0358_ ? _0355_ : 20'hxxxxx;
  assign _0358_ = state == 20'h20000;
  assign _0359_ = ep0_stat[2] ? state : _0088_;
  assign _0361_ = _0362_ ? _0359_ : 20'hxxxxx;
  assign _0362_ = state == 20'h20000;
  assign _0363_ = ep0_stat[2] ? 1'h0 : 1'h1;
  assign _0365_ = _0366_ ? _0363_ : 1'hx;
  assign _0366_ = state == 20'h20000;
  assign _0367_ = _0368_ ? 20'h02000 : state;
  assign _0369_ = ep0_stat[2] ? 20'hxxxxx : _0367_;
  assign _0371_ = _0372_ ? _0369_ : 20'hxxxxx;
  assign _0372_ = state == 20'h00004;
  assign _0373_ = ep0_stat[2] ? state : _0086_;
  assign _0375_ = _0376_ ? _0373_ : 20'hxxxxx;
  assign _0376_ = state == 20'h00004;
  assign _0377_ = ep0_stat[2] ? 1'h0 : 1'h1;
  assign _0379_ = _0380_ ? _0377_ : 1'hx;
  assign _0380_ = state == 20'h00004;
  assign _0381_ = _0382_ ? 6'h02 : 6'h01;
  assign _0383_ = _0384_ ? _0381_ : 6'hxx;
  assign _0384_ = state == 20'h00004;
  assign _0385_ = _0386_ ? 20'h00001 : state;
  assign _0387_ = _0388_ ? _0385_ : 20'hxxxxx;
  assign _0388_ = state == 20'h00002;
  assign _0389_ = _0390_ ? 20'h80000 : _0071_;
  assign _0391_ = _0392_ ? _0389_ : 20'hxxxxx;
  assign _0392_ = state == 20'h00001;
  assign _0393_ = _0394_ ? 20'h04000 : _0070_;
  assign _0395_ = _0396_ ? _0393_ : 20'hxxxxx;
  assign _0396_ = state == 20'h00001;
  assign _0397_ = _0398_ ? 20'h20000 : _0069_;
  assign _0399_ = _0400_ ? _0397_ : 20'hxxxxx;
  assign _0400_ = state == 20'h00001;
  assign _0401_ = _0402_ ? 20'h10000 : _0068_;
  assign _0403_ = _0404_ ? _0401_ : 20'hxxxxx;
  assign _0404_ = state == 20'h00001;
  assign _0405_ = _0406_ ? 20'h10000 : _0067_;
  assign _0407_ = _0408_ ? _0405_ : 20'hxxxxx;
  assign _0408_ = state == 20'h00001;
  assign _0409_ = _0410_ ? 20'h01000 : _0066_;
  assign _0411_ = _0412_ ? _0409_ : 20'hxxxxx;
  assign _0412_ = state == 20'h00001;
  assign _0413_ = _0414_ ? 20'h00800 : _0065_;
  assign _0415_ = _0416_ ? _0413_ : 20'hxxxxx;
  assign _0416_ = state == 20'h00001;
  assign _0417_ = _0418_ ? 20'h00400 : _0064_;
  assign _0419_ = _0420_ ? _0417_ : 20'hxxxxx;
  assign _0420_ = state == 20'h00001;
  assign _0421_ = _0422_ ? 20'h00200 : _0118_;
  assign _0423_ = _0424_ ? _0421_ : 20'hxxxxx;
  assign _0424_ = state == 20'h00001;
  assign _0425_ = _0426_ ? 20'h00100 : _0117_;
  assign _0427_ = _0428_ ? _0425_ : 20'hxxxxx;
  assign _0428_ = state == 20'h00001;
  assign _0429_ = _0430_ ? 20'h00080 : _0116_;
  assign _0431_ = _0432_ ? _0429_ : 20'hxxxxx;
  assign _0432_ = state == 20'h00001;
  assign _0433_ = _0434_ ? 20'h00040 : _0114_;
  assign _0435_ = _0436_ ? _0433_ : 20'hxxxxx;
  assign _0436_ = state == 20'h00001;
  assign _0437_ = _0438_ ? 20'h00020 : _0112_;
  assign _0439_ = _0440_ ? _0437_ : 20'hxxxxx;
  assign _0440_ = state == 20'h00001;
  assign _0441_ = _0442_ ? 20'h00010 : _0110_;
  assign _0443_ = _0444_ ? _0441_ : 20'hxxxxx;
  assign _0444_ = state == 20'h00001;
  assign _0445_ = _0446_ ? 20'h00008 : _0108_;
  assign _0447_ = _0448_ ? _0445_ : 20'hxxxxx;
  assign _0448_ = state == 20'h00001;
  assign _0449_ = _0450_ ? 20'h00004 : _0097_;
  assign _0451_ = _0452_ ? _0449_ : 20'hxxxxx;
  assign _0452_ = state == 20'h00001;
  assign _0453_ = _0454_ ? 20'h00002 : state;
  assign _0455_ = _0456_ ? _0453_ : 20'hxxxxx;
  assign _0456_ = state == 20'h00001;
  function [19:0] _1149_;
    input [19:0] a;
    input [399:0] b;
    input [19:0] s;
    casez (s) // synopsys parallel_case
      20'b???????????????????1:
        _1149_ = b[19:0];
      20'b??????????????????1?:
        _1149_ = b[39:20];
      20'b?????????????????1??:
        _1149_ = b[59:40];
      20'b????????????????1???:
        _1149_ = b[79:60];
      20'b???????????????1????:
        _1149_ = b[99:80];
      20'b??????????????1?????:
        _1149_ = b[119:100];
      20'b?????????????1??????:
        _1149_ = b[139:120];
      20'b????????????1???????:
        _1149_ = b[159:140];
      20'b???????????1????????:
        _1149_ = b[179:160];
      20'b??????????1?????????:
        _1149_ = b[199:180];
      20'b?????????1??????????:
        _1149_ = b[219:200];
      20'b????????1???????????:
        _1149_ = b[239:220];
      20'b???????1????????????:
        _1149_ = b[259:240];
      20'b??????1?????????????:
        _1149_ = b[279:260];
      20'b?????1??????????????:
        _1149_ = b[299:280];
      20'b????1???????????????:
        _1149_ = b[319:300];
      20'b???1????????????????:
        _1149_ = b[339:320];
      20'b??1?????????????????:
        _1149_ = b[359:340];
      20'b?1??????????????????:
        _1149_ = b[379:360];
      20'b1???????????????????:
        _1149_ = b[399:380];
      default:
        _1149_ = a;
    endcase
  endfunction
  assign _0457_ = _1149_(20'hxxxxx, { _0072_, _0073_, _0085_, _0087_, _0089_, _0090_, 60'h040000400004000, _0093_, 20'h00001, _0094_, 20'h04000, _0101_, 20'h04000, _0102_, 20'h04000, _0104_, _0105_, _0106_ }, { _0477_, _0476_, _0475_, _0474_, _0473_, _0472_, _0471_, _0470_, _0469_, _0468_, _0467_, _0466_, _0465_, _0464_, _0463_, _0462_, _0461_, _0460_, _0459_, _0458_ });
  assign _0458_ = state == 20'h08000;
  assign _0459_ = state == 20'h04000;
  assign _0460_ = state == 20'h02000;
  assign _0461_ = state == 20'h10000;
  assign _0462_ = state == 20'h01000;
  assign _0463_ = state == 20'h00800;
  assign _0464_ = state == 20'h00400;
  assign _0465_ = state == 20'h00200;
  assign _0466_ = state == 20'h00100;
  assign _0467_ = state == 20'h00080;
  assign _0468_ = state == 20'h00040;
  assign _0469_ = state == 20'h00020;
  assign _0470_ = state == 20'h00010;
  assign _0471_ = state == 20'h00008;
  assign _0472_ = state == 20'h40000;
  assign _0473_ = state == 20'h80000;
  assign _0474_ = state == 20'h20000;
  assign _0475_ = state == 20'h00004;
  assign _0476_ = state == 20'h00002;
  assign _0477_ = state == 20'h00001;
  function [0:0] _1170_;
    input [0:0] a;
    input [19:0] b;
    input [19:0] s;
    casez (s) // synopsys parallel_case
      20'b???????????????????1:
        _1170_ = b[0:0];
      20'b??????????????????1?:
        _1170_ = b[1:1];
      20'b?????????????????1??:
        _1170_ = b[2:2];
      20'b????????????????1???:
        _1170_ = b[3:3];
      20'b???????????????1????:
        _1170_ = b[4:4];
      20'b??????????????1?????:
        _1170_ = b[5:5];
      20'b?????????????1??????:
        _1170_ = b[6:6];
      20'b????????????1???????:
        _1170_ = b[7:7];
      20'b???????????1????????:
        _1170_ = b[8:8];
      20'b??????????1?????????:
        _1170_ = b[9:9];
      20'b?????????1??????????:
        _1170_ = b[10:10];
      20'b????????1???????????:
        _1170_ = b[11:11];
      20'b???????1????????????:
        _1170_ = b[12:12];
      20'b??????1?????????????:
        _1170_ = b[13:13];
      20'b?????1??????????????:
        _1170_ = b[14:14];
      20'b????1???????????????:
        _1170_ = b[15:15];
      20'b???1????????????????:
        _1170_ = b[16:16];
      20'b??1?????????????????:
        _1170_ = b[17:17];
      20'b?1??????????????????:
        _1170_ = b[18:18];
      20'b1???????????????????:
        _1170_ = b[19:19];
      default:
        _1170_ = a;
    endcase
  endfunction
  assign _0478_ = _1170_(1'hx, { 9'h000, _0098_, 10'h000 }, { _0498_, _0497_, _0496_, _0495_, _0494_, _0493_, _0492_, _0491_, _0490_, _0489_, _0488_, _0487_, _0486_, _0485_, _0484_, _0483_, _0482_, _0481_, _0480_, _0479_ });
  assign _0479_ = state == 20'h08000;
  assign _0480_ = state == 20'h04000;
  assign _0481_ = state == 20'h02000;
  assign _0482_ = state == 20'h10000;
  assign _0483_ = state == 20'h01000;
  assign _0484_ = state == 20'h00800;
  assign _0485_ = state == 20'h00400;
  assign _0486_ = state == 20'h00200;
  assign _0487_ = state == 20'h00100;
  assign _0488_ = state == 20'h00080;
  assign _0489_ = state == 20'h00040;
  assign _0490_ = state == 20'h00020;
  assign _0491_ = state == 20'h00010;
  assign _0492_ = state == 20'h00008;
  assign _0493_ = state == 20'h40000;
  assign _0494_ = state == 20'h80000;
  assign _0495_ = state == 20'h20000;
  assign _0496_ = state == 20'h00004;
  assign _0497_ = state == 20'h00002;
  assign _0498_ = state == 20'h00001;
  function [0:0] _1191_;
    input [0:0] a;
    input [19:0] b;
    input [19:0] s;
    casez (s) // synopsys parallel_case
      20'b???????????????????1:
        _1191_ = b[0:0];
      20'b??????????????????1?:
        _1191_ = b[1:1];
      20'b?????????????????1??:
        _1191_ = b[2:2];
      20'b????????????????1???:
        _1191_ = b[3:3];
      20'b???????????????1????:
        _1191_ = b[4:4];
      20'b??????????????1?????:
        _1191_ = b[5:5];
      20'b?????????????1??????:
        _1191_ = b[6:6];
      20'b????????????1???????:
        _1191_ = b[7:7];
      20'b???????????1????????:
        _1191_ = b[8:8];
      20'b??????????1?????????:
        _1191_ = b[9:9];
      20'b?????????1??????????:
        _1191_ = b[10:10];
      20'b????????1???????????:
        _1191_ = b[11:11];
      20'b???????1????????????:
        _1191_ = b[12:12];
      20'b??????1?????????????:
        _1191_ = b[13:13];
      20'b?????1??????????????:
        _1191_ = b[14:14];
      20'b????1???????????????:
        _1191_ = b[15:15];
      20'b???1????????????????:
        _1191_ = b[16:16];
      20'b??1?????????????????:
        _1191_ = b[17:17];
      20'b?1??????????????????:
        _1191_ = b[18:18];
      20'b1???????????????????:
        _1191_ = b[19:19];
      default:
        _1191_ = a;
    endcase
  endfunction
  assign _0499_ = _1191_(1'hx, 20'h04000, { _0519_, _0518_, _0517_, _0516_, _0515_, _0514_, _0513_, _0512_, _0511_, _0510_, _0509_, _0508_, _0507_, _0506_, _0505_, _0504_, _0503_, _0502_, _0501_, _0500_ });
  assign _0500_ = state == 20'h08000;
  assign _0501_ = state == 20'h04000;
  assign _0502_ = state == 20'h02000;
  assign _0503_ = state == 20'h10000;
  assign _0504_ = state == 20'h01000;
  assign _0505_ = state == 20'h00800;
  assign _0506_ = state == 20'h00400;
  assign _0507_ = state == 20'h00200;
  assign _0508_ = state == 20'h00100;
  assign _0509_ = state == 20'h00080;
  assign _0510_ = state == 20'h00040;
  assign _0511_ = state == 20'h00020;
  assign _0512_ = state == 20'h00010;
  assign _0513_ = state == 20'h00008;
  assign _0514_ = state == 20'h40000;
  assign _0515_ = state == 20'h80000;
  assign _0516_ = state == 20'h20000;
  assign _0517_ = state == 20'h00004;
  assign _0518_ = state == 20'h00002;
  assign _0519_ = state == 20'h00001;
  function [0:0] _1212_;
    input [0:0] a;
    input [19:0] b;
    input [19:0] s;
    casez (s) // synopsys parallel_case
      20'b???????????????????1:
        _1212_ = b[0:0];
      20'b??????????????????1?:
        _1212_ = b[1:1];
      20'b?????????????????1??:
        _1212_ = b[2:2];
      20'b????????????????1???:
        _1212_ = b[3:3];
      20'b???????????????1????:
        _1212_ = b[4:4];
      20'b??????????????1?????:
        _1212_ = b[5:5];
      20'b?????????????1??????:
        _1212_ = b[6:6];
      20'b????????????1???????:
        _1212_ = b[7:7];
      20'b???????????1????????:
        _1212_ = b[8:8];
      20'b??????????1?????????:
        _1212_ = b[9:9];
      20'b?????????1??????????:
        _1212_ = b[10:10];
      20'b????????1???????????:
        _1212_ = b[11:11];
      20'b???????1????????????:
        _1212_ = b[12:12];
      20'b??????1?????????????:
        _1212_ = b[13:13];
      20'b?????1??????????????:
        _1212_ = b[14:14];
      20'b????1???????????????:
        _1212_ = b[15:15];
      20'b???1????????????????:
        _1212_ = b[16:16];
      20'b??1?????????????????:
        _1212_ = b[17:17];
      20'b?1??????????????????:
        _1212_ = b[18:18];
      20'b1???????????????????:
        _1212_ = b[19:19];
      default:
        _1212_ = a;
    endcase
  endfunction
  assign _0520_ = _1212_(1'hx, 20'h30010, { _0540_, _0539_, _0538_, _0537_, _0536_, _0535_, _0534_, _0533_, _0532_, _0531_, _0530_, _0529_, _0528_, _0527_, _0526_, _0525_, _0524_, _0523_, _0522_, _0521_ });
  assign _0521_ = state == 20'h08000;
  assign _0522_ = state == 20'h04000;
  assign _0523_ = state == 20'h02000;
  assign _0524_ = state == 20'h10000;
  assign _0525_ = state == 20'h01000;
  assign _0526_ = state == 20'h00800;
  assign _0527_ = state == 20'h00400;
  assign _0528_ = state == 20'h00200;
  assign _0529_ = state == 20'h00100;
  assign _0530_ = state == 20'h00080;
  assign _0531_ = state == 20'h00040;
  assign _0532_ = state == 20'h00020;
  assign _0533_ = state == 20'h00010;
  assign _0534_ = state == 20'h00008;
  assign _0535_ = state == 20'h40000;
  assign _0536_ = state == 20'h80000;
  assign _0537_ = state == 20'h20000;
  assign _0538_ = state == 20'h00004;
  assign _0539_ = state == 20'h00002;
  assign _0540_ = state == 20'h00001;
  function [0:0] _1233_;
    input [0:0] a;
    input [19:0] b;
    input [19:0] s;
    casez (s) // synopsys parallel_case
      20'b???????????????????1:
        _1233_ = b[0:0];
      20'b??????????????????1?:
        _1233_ = b[1:1];
      20'b?????????????????1??:
        _1233_ = b[2:2];
      20'b????????????????1???:
        _1233_ = b[3:3];
      20'b???????????????1????:
        _1233_ = b[4:4];
      20'b??????????????1?????:
        _1233_ = b[5:5];
      20'b?????????????1??????:
        _1233_ = b[6:6];
      20'b????????????1???????:
        _1233_ = b[7:7];
      20'b???????????1????????:
        _1233_ = b[8:8];
      20'b??????????1?????????:
        _1233_ = b[9:9];
      20'b?????????1??????????:
        _1233_ = b[10:10];
      20'b????????1???????????:
        _1233_ = b[11:11];
      20'b???????1????????????:
        _1233_ = b[12:12];
      20'b??????1?????????????:
        _1233_ = b[13:13];
      20'b?????1??????????????:
        _1233_ = b[14:14];
      20'b????1???????????????:
        _1233_ = b[15:15];
      20'b???1????????????????:
        _1233_ = b[16:16];
      20'b??1?????????????????:
        _1233_ = b[17:17];
      20'b?1??????????????????:
        _1233_ = b[18:18];
      20'b1???????????????????:
        _1233_ = b[19:19];
      default:
        _1233_ = a;
    endcase
  endfunction
  assign _0541_ = _1233_(1'hx, 20'h00140, { _0561_, _0560_, _0559_, _0558_, _0557_, _0556_, _0555_, _0554_, _0553_, _0552_, _0551_, _0550_, _0549_, _0548_, _0547_, _0546_, _0545_, _0544_, _0543_, _0542_ });
  assign _0542_ = state == 20'h08000;
  assign _0543_ = state == 20'h04000;
  assign _0544_ = state == 20'h02000;
  assign _0545_ = state == 20'h10000;
  assign _0546_ = state == 20'h01000;
  assign _0547_ = state == 20'h00800;
  assign _0548_ = state == 20'h00400;
  assign _0549_ = state == 20'h00200;
  assign _0550_ = state == 20'h00100;
  assign _0551_ = state == 20'h00080;
  assign _0552_ = state == 20'h00040;
  assign _0553_ = state == 20'h00020;
  assign _0554_ = state == 20'h00010;
  assign _0555_ = state == 20'h00008;
  assign _0556_ = state == 20'h40000;
  assign _0557_ = state == 20'h80000;
  assign _0558_ = state == 20'h20000;
  assign _0559_ = state == 20'h00004;
  assign _0560_ = state == 20'h00002;
  assign _0561_ = state == 20'h00001;
  function [0:0] _1254_;
    input [0:0] a;
    input [19:0] b;
    input [19:0] s;
    casez (s) // synopsys parallel_case
      20'b???????????????????1:
        _1254_ = b[0:0];
      20'b??????????????????1?:
        _1254_ = b[1:1];
      20'b?????????????????1??:
        _1254_ = b[2:2];
      20'b????????????????1???:
        _1254_ = b[3:3];
      20'b???????????????1????:
        _1254_ = b[4:4];
      20'b??????????????1?????:
        _1254_ = b[5:5];
      20'b?????????????1??????:
        _1254_ = b[6:6];
      20'b????????????1???????:
        _1254_ = b[7:7];
      20'b???????????1????????:
        _1254_ = b[8:8];
      20'b??????????1?????????:
        _1254_ = b[9:9];
      20'b?????????1??????????:
        _1254_ = b[10:10];
      20'b????????1???????????:
        _1254_ = b[11:11];
      20'b???????1????????????:
        _1254_ = b[12:12];
      20'b??????1?????????????:
        _1254_ = b[13:13];
      20'b?????1??????????????:
        _1254_ = b[14:14];
      20'b????1???????????????:
        _1254_ = b[15:15];
      20'b???1????????????????:
        _1254_ = b[16:16];
      20'b??1?????????????????:
        _1254_ = b[17:17];
      20'b?1??????????????????:
        _1254_ = b[18:18];
      20'b1???????????????????:
        _1254_ = b[19:19];
      default:
        _1254_ = a;
    endcase
  endfunction
  assign _0562_ = _1254_(1'hx, 20'h00002, { _0582_, _0581_, _0580_, _0579_, _0578_, _0577_, _0576_, _0575_, _0574_, _0573_, _0572_, _0571_, _0570_, _0569_, _0568_, _0567_, _0566_, _0565_, _0564_, _0563_ });
  assign _0563_ = state == 20'h08000;
  assign _0564_ = state == 20'h04000;
  assign _0565_ = state == 20'h02000;
  assign _0566_ = state == 20'h10000;
  assign _0567_ = state == 20'h01000;
  assign _0568_ = state == 20'h00800;
  assign _0569_ = state == 20'h00400;
  assign _0570_ = state == 20'h00200;
  assign _0571_ = state == 20'h00100;
  assign _0572_ = state == 20'h00080;
  assign _0573_ = state == 20'h00040;
  assign _0574_ = state == 20'h00020;
  assign _0575_ = state == 20'h00010;
  assign _0576_ = state == 20'h00008;
  assign _0577_ = state == 20'h40000;
  assign _0578_ = state == 20'h80000;
  assign _0579_ = state == 20'h20000;
  assign _0580_ = state == 20'h00004;
  assign _0581_ = state == 20'h00002;
  assign _0582_ = state == 20'h00001;
  function [0:0] _1275_;
    input [0:0] a;
    input [19:0] b;
    input [19:0] s;
    casez (s) // synopsys parallel_case
      20'b???????????????????1:
        _1275_ = b[0:0];
      20'b??????????????????1?:
        _1275_ = b[1:1];
      20'b?????????????????1??:
        _1275_ = b[2:2];
      20'b????????????????1???:
        _1275_ = b[3:3];
      20'b???????????????1????:
        _1275_ = b[4:4];
      20'b??????????????1?????:
        _1275_ = b[5:5];
      20'b?????????????1??????:
        _1275_ = b[6:6];
      20'b????????????1???????:
        _1275_ = b[7:7];
      20'b???????????1????????:
        _1275_ = b[8:8];
      20'b??????????1?????????:
        _1275_ = b[9:9];
      20'b?????????1??????????:
        _1275_ = b[10:10];
      20'b????????1???????????:
        _1275_ = b[11:11];
      20'b???????1????????????:
        _1275_ = b[12:12];
      20'b??????1?????????????:
        _1275_ = b[13:13];
      20'b?????1??????????????:
        _1275_ = b[14:14];
      20'b????1???????????????:
        _1275_ = b[15:15];
      20'b???1????????????????:
        _1275_ = b[16:16];
      20'b??1?????????????????:
        _1275_ = b[17:17];
      20'b?1??????????????????:
        _1275_ = b[18:18];
      20'b1???????????????????:
        _1275_ = b[19:19];
      default:
        _1275_ = a;
    endcase
  endfunction
  assign _0583_ = _1275_(1'hx, 20'h40000, { _0603_, _0602_, _0601_, _0600_, _0599_, _0598_, _0597_, _0596_, _0595_, _0594_, _0593_, _0592_, _0591_, _0590_, _0589_, _0588_, _0587_, _0586_, _0585_, _0584_ });
  assign _0584_ = state == 20'h08000;
  assign _0585_ = state == 20'h04000;
  assign _0586_ = state == 20'h02000;
  assign _0587_ = state == 20'h10000;
  assign _0588_ = state == 20'h01000;
  assign _0589_ = state == 20'h00800;
  assign _0590_ = state == 20'h00400;
  assign _0591_ = state == 20'h00200;
  assign _0592_ = state == 20'h00100;
  assign _0593_ = state == 20'h00080;
  assign _0594_ = state == 20'h00040;
  assign _0595_ = state == 20'h00020;
  assign _0596_ = state == 20'h00010;
  assign _0597_ = state == 20'h00008;
  assign _0598_ = state == 20'h40000;
  assign _0599_ = state == 20'h80000;
  assign _0600_ = state == 20'h20000;
  assign _0601_ = state == 20'h00004;
  assign _0602_ = state == 20'h00002;
  assign _0603_ = state == 20'h00001;
  function [5:0] _1296_;
    input [5:0] a;
    input [119:0] b;
    input [19:0] s;
    casez (s) // synopsys parallel_case
      20'b???????????????????1:
        _1296_ = b[5:0];
      20'b??????????????????1?:
        _1296_ = b[11:6];
      20'b?????????????????1??:
        _1296_ = b[17:12];
      20'b????????????????1???:
        _1296_ = b[23:18];
      20'b???????????????1????:
        _1296_ = b[29:24];
      20'b??????????????1?????:
        _1296_ = b[35:30];
      20'b?????????????1??????:
        _1296_ = b[41:36];
      20'b????????????1???????:
        _1296_ = b[47:42];
      20'b???????????1????????:
        _1296_ = b[53:48];
      20'b??????????1?????????:
        _1296_ = b[59:54];
      20'b?????????1??????????:
        _1296_ = b[65:60];
      20'b????????1???????????:
        _1296_ = b[71:66];
      20'b???????1????????????:
        _1296_ = b[77:72];
      20'b??????1?????????????:
        _1296_ = b[83:78];
      20'b?????1??????????????:
        _1296_ = b[89:84];
      20'b????1???????????????:
        _1296_ = b[95:90];
      20'b???1????????????????:
        _1296_ = b[101:96];
      20'b??1?????????????????:
        _1296_ = b[107:102];
      20'b?1??????????????????:
        _1296_ = b[113:108];
      20'b1???????????????????:
        _1296_ = b[119:114];
      default:
        _1296_ = a;
    endcase
  endfunction
  assign _0604_ = _1296_(6'hxx, { 12'h041, _0095_, 102'h10060041041044041048041041 }, { _0624_, _0623_, _0622_, _0621_, _0620_, _0619_, _0618_, _0617_, _0616_, _0615_, _0614_, _0613_, _0612_, _0611_, _0610_, _0609_, _0608_, _0607_, _0606_, _0605_ });
  assign _0605_ = state == 20'h08000;
  assign _0606_ = state == 20'h04000;
  assign _0607_ = state == 20'h02000;
  assign _0608_ = state == 20'h10000;
  assign _0609_ = state == 20'h01000;
  assign _0610_ = state == 20'h00800;
  assign _0611_ = state == 20'h00400;
  assign _0612_ = state == 20'h00200;
  assign _0613_ = state == 20'h00100;
  assign _0614_ = state == 20'h00080;
  assign _0615_ = state == 20'h00040;
  assign _0616_ = state == 20'h00020;
  assign _0617_ = state == 20'h00010;
  assign _0618_ = state == 20'h00008;
  assign _0619_ = state == 20'h40000;
  assign _0620_ = state == 20'h80000;
  assign _0621_ = state == 20'h20000;
  assign _0622_ = state == 20'h00004;
  assign _0623_ = state == 20'h00002;
  assign _0624_ = state == 20'h00001;
  function [0:0] _1317_;
    input [0:0] a;
    input [19:0] b;
    input [19:0] s;
    casez (s) // synopsys parallel_case
      20'b???????????????????1:
        _1317_ = b[0:0];
      20'b??????????????????1?:
        _1317_ = b[1:1];
      20'b?????????????????1??:
        _1317_ = b[2:2];
      20'b????????????????1???:
        _1317_ = b[3:3];
      20'b???????????????1????:
        _1317_ = b[4:4];
      20'b??????????????1?????:
        _1317_ = b[5:5];
      20'b?????????????1??????:
        _1317_ = b[6:6];
      20'b????????????1???????:
        _1317_ = b[7:7];
      20'b???????????1????????:
        _1317_ = b[8:8];
      20'b??????????1?????????:
        _1317_ = b[9:9];
      20'b?????????1??????????:
        _1317_ = b[10:10];
      20'b????????1???????????:
        _1317_ = b[11:11];
      20'b???????1????????????:
        _1317_ = b[12:12];
      20'b??????1?????????????:
        _1317_ = b[13:13];
      20'b?????1??????????????:
        _1317_ = b[14:14];
      20'b????1???????????????:
        _1317_ = b[15:15];
      20'b???1????????????????:
        _1317_ = b[16:16];
      20'b??1?????????????????:
        _1317_ = b[17:17];
      20'b?1??????????????????:
        _1317_ = b[18:18];
      20'b1???????????????????:
        _1317_ = b[19:19];
      default:
        _1317_ = a;
    endcase
  endfunction
  assign _0625_ = _1317_(1'hx, { 2'h0, _0096_, _0107_, 1'h0, _0109_, 5'h00, _0111_, 1'h0, _0113_, 1'h0, _0115_, 4'h0 }, { _0645_, _0644_, _0643_, _0642_, _0641_, _0640_, _0639_, _0638_, _0637_, _0636_, _0635_, _0634_, _0633_, _0632_, _0631_, _0630_, _0629_, _0628_, _0627_, _0626_ });
  assign _0626_ = state == 20'h08000;
  assign _0627_ = state == 20'h04000;
  assign _0628_ = state == 20'h02000;
  assign _0629_ = state == 20'h10000;
  assign _0630_ = state == 20'h01000;
  assign _0631_ = state == 20'h00800;
  assign _0632_ = state == 20'h00400;
  assign _0633_ = state == 20'h00200;
  assign _0634_ = state == 20'h00100;
  assign _0635_ = state == 20'h00080;
  assign _0636_ = state == 20'h00040;
  assign _0637_ = state == 20'h00020;
  assign _0638_ = state == 20'h00010;
  assign _0639_ = state == 20'h00008;
  assign _0640_ = state == 20'h40000;
  assign _0641_ = state == 20'h80000;
  assign _0642_ = state == 20'h20000;
  assign _0643_ = state == 20'h00004;
  assign _0644_ = state == 20'h00002;
  assign _0645_ = state == 20'h00001;
  assign _0646_ = rst ? next_state : 20'h00001;
  assign _0648_ = _0649_ ? funct_adr_tmp : funct_adr;
  assign _0650_ = rst ? _0648_ : 7'h00;
  assign _0652_ = _0653_ ? hdr2[6:0] : funct_adr_tmp;
  assign _0654_ = rst ? _0652_ : 7'h00;
  assign _0656_ = _0657_ ? 1'h1 : set_adr_pending;
  assign _0658_ = _0659_ ? 1'h0 : _0656_;
  assign _0660_ = rst ? _0658_ : 1'h0;
  assign _0662_ = _0663_ ? 1'h0 : reg_rdwrn;
  assign _0664_ = _0665_ ? 1'h1 : _0662_;
  assign _0666_ = _0667_ ? 1'h1 : 1'h0;
  assign _0668_ = _0669_ ? 1'h1 : _0666_;
  assign _0670_ = rst ? _0668_ : 1'h0;
  assign _0672_ = _0673_ ? reg_rdata : reg_rdata_r;
  assign _0674_ = _0675_ ? { reg_wdata[23:0], ep0_din } : reg_wdata;
  assign _0676_ = _0677_ ? _0122_[1:0] : reg_byte_cnt;
  assign _0678_ = _0679_ ? 2'h0 : _0676_;
  assign _0680_ = _0681_ ? 2'h0 : _0678_;
  assign _0682_ = rst ? _0680_ : 2'h0;
  assign _0684_ = _0685_ ? 1'h0 : reg_wphase;
  assign _0686_ = _0687_ ? 1'h1 : _0684_;
  assign _0688_ = rst ? _0686_ : reg_wphase;
  assign _0690_ = _0691_ ? { hdr2, hdr3, hdr4, hdr5 } : reg_addr;
  assign _0692_ = _0693_ ? _0121_[3:0] : tx_bcnt;
  assign _0694_ = _0695_ ? tx_bcnt : _0692_;
  assign _0696_ = _0697_ ? 4'h0 : _0694_;
  assign _0698_ = rst ? _0696_ : 4'h0;
  assign _0700_ = _0701_ ? write_done : 1'h0;
  assign _0702_ = _0703_ ? 1'h1 : _0700_;
  assign _0704_ = _0705_ ? 1'h0 : _0702_;
  assign _0706_ = rst ? _0704_ : 1'h0;
  assign _0708_ = _0709_ ? { 1'h0, _0796_ } : ep0_size;
  assign _0710_ = _0711_ ? 8'h04 : _0708_;
  assign _0712_ = _0713_ ? 8'h02 : _0710_;
  assign _0714_ = _0715_ ? 8'h01 : _0712_;
  assign _0716_ = _0717_ ? 8'h00 : _0714_;
  function [7:0] _1374_;
    input [7:0] a;
    input [47:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _1374_ = b[7:0];
      6'b????1?:
        _1374_ = b[15:8];
      6'b???1??:
        _1374_ = b[23:16];
      6'b??1???:
        _1374_ = b[31:24];
      6'b?1????:
        _1374_ = b[39:32];
      6'b1?????:
        _1374_ = b[47:40];
      default:
        _1374_ = a;
    endcase
  endfunction
  assign _0718_ = _1374_(ep0_dout, { _0797_, _0798_, 7'h00, configured, _0799_, _0800_, _0801_ }, { _0724_, _0723_, _0722_, _0721_, _0720_, _0719_ });
  assign _0719_ = data_sel == 6'h20;
  assign _0720_ = data_sel == 6'h10;
  assign _0721_ = data_sel == 6'h08;
  assign _0722_ = data_sel == 6'h04;
  assign _0723_ = data_sel == 6'h02;
  assign _0724_ = data_sel == 6'h01;
  assign _0725_ = _0726_ ? ep0_din : hdr7;
  assign _0727_ = _0728_ ? ep0_din : hdr6;
  assign _0729_ = _0730_ ? ep0_din : hdr5;
  assign _0731_ = _0732_ ? ep0_din : hdr4;
  assign _0733_ = _0734_ ? ep0_din : hdr3;
  assign _0735_ = _0736_ ? ep0_din : hdr2;
  assign _0737_ = _0738_ ? ep0_din : hdr1;
  assign _0739_ = _0740_ ? ep0_din : hdr0;
  assign _0741_ = _0742_ ? { le[6:0], 1'h0 } : le;
  assign _0743_ = _0794_ ? _0741_ : 8'h01;
  assign _0745_ = _0583_ ? _0743_ : 8'h00;
  assign _0747_ = rst ? _0745_ : 8'h00;
  assign _0749_ = _0750_ ? _0795_ : rom_size;
  assign _0751_ = _0752_ ? _0796_ : _0749_;
  assign _0753_ = rst ? _0751_ : 7'h00;
  assign _0755_ = _0756_ ? _0119_ : rom_adr;
  assign _0757_ = _0758_ ? rom_start_d[6:0] : _0755_;
  assign _0759_ = rst ? _0757_ : 7'h00;
  function [6:0] _1399_;
    input [6:0] a;
    input [20:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _1399_ = b[6:0];
      3'b?1?:
        _1399_ = b[13:7];
      3'b1??:
        _1399_ = b[20:14];
      default:
        _1399_ = a;
    endcase
  endfunction
  assign _0761_ = _1399_(7'h04, 21'h02850a, { _0764_, _0763_, _0762_ });
  assign _0762_ = wValue[3:0] == 4'h3;
  assign _0763_ = wValue[3:0] == 4'h2;
  assign _0764_ = wValue[3:0] == 4'h1;
  assign _0765_ = _0766_ ? _0761_ : 7'hxx;
  assign _0766_ = wValue[11:8] == 4'h3;
  function [6:0] _1405_;
    input [6:0] a;
    input [20:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _1405_ = b[6:0];
      3'b?1?:
        _1405_ = b[13:7];
      3'b1??:
        _1405_ = b[20:14];
      default:
        _1405_ = a;
    endcase
  endfunction
  assign _0767_ = _1405_(7'h01, { 14'h0935, _0099_ }, { _0770_, _0769_, _0768_ });
  assign _0768_ = wValue[11:8] == 4'h3;
  assign _0769_ = wValue[11:8] == 4'h2;
  assign _0770_ = wValue[11:8] == 4'h1;
  function [7:0] _1409_;
    input [7:0] a;
    input [23:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _1409_ = b[7:0];
      3'b?1?:
        _1409_ = b[15:8];
      3'b1??:
        _1409_ = b[23:16];
      default:
        _1409_ = a;
    endcase
  endfunction
  assign _0771_ = _1409_(8'h47, 24'h506070, { _0774_, _0773_, _0772_ });
  assign _0772_ = wValue[3:0] == 4'h3;
  assign _0773_ = wValue[3:0] == 4'h2;
  assign _0774_ = wValue[3:0] == 4'h1;
  assign _0775_ = _0776_ ? _0771_ : 8'hxx;
  assign _0776_ = wValue[11:8] == 4'h3;
  function [7:0] _1415_;
    input [7:0] a;
    input [15:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _1415_ = b[7:0];
      2'b1?:
        _1415_ = b[15:8];
      default:
        _1415_ = a;
    endcase
  endfunction
  assign _0777_ = _1415_(8'h00, { 8'h12, _0100_ }, { _0779_, _0778_ });
  assign _0778_ = wValue[11:8] == 4'h3;
  assign _0779_ = wValue[11:8] == 4'h2;
  assign _0782_ = _0783_ ? 1'h0 : _0780_;
  assign _0784_ = rst ? _0782_ : 1'h0;
  assign _0786_ = _0787_ ? 1'h1 : configured;
  assign _0788_ = rst ? _0786_ : 1'h0;
  assign _0790_ = _0791_ ? 1'h1 : addressed;
  assign _0792_ = rst ? _0790_ : 1'h0;
  assign _0794_ = | le;
  assign _0795_ = rom_size - 7'h01;
  assign _0796_ = _0214_ ? wLength[6:0] : rom_size_dd;
  assign _0797_ = rom_sel ? rom_data : 8'h00;
  assign _0798_ = high_sel ? 8'h01 : 8'h00;
  assign _0799_ = high_sel ? { 5'h00, frame_no[10:8] } : frame_no[7:0];
  assign _0800_ = high_sel ? vendor_data[15:8] : vendor_data[7:0];
  assign _0801_ = _0171_ ? reg_rdata_r[31:24] : _0802_;
  assign _0802_ = _0172_ ? reg_rdata_r[23:16] : _0803_;
  assign _0803_ = _0173_ ? reg_rdata_r[15:8] : reg_rdata_r[7:0];
  assign ep0_re = fifo_re1;
  assign fifo_empty = ep0_stat[1];
  assign fifo_full = ep0_stat[2];
  assign set_halt = 1'h0;
  assign clr_halt = ctrl_setup;
  assign rom_size_d = _0796_;
  assign fifo_we_rom = _0127_;
  assign rom_done = _0129_;
  assign fifo_re1 = _0130_;
  assign hdr_done = _0134_;
  assign high_sel = write_done;
  assign bmReqType = hdr0;
  assign bm_req_dir = bmReqType[7];
  assign bm_req_type = bmReqType[6:5];
  assign bm_req_recp = bmReqType[4:0];
  assign bRequest = hdr1;
  assign wValue = { hdr3, hdr2 };
  assign wIndex = { hdr5, hdr4 };
  assign wLength = { hdr7, hdr6 };
  assign _0043_ = _0082_;
  assign _0032_ = _0080_;
  assign _0031_ = _0079_;
  assign _0030_ = _0078_;
  assign _0029_ = _0077_;
  assign _0016_ = _0076_;
  assign _0034_ = _0081_;
  assign _0005_ = _0074_;
  assign _0009_ = _0075_;
  assign _0048_ = config_err;
  assign _0003_ = _0168_;
  assign _0061_ = _0167_;
  assign _0062_ = _0165_;
  assign _0058_ = _0163_;
  assign _0059_ = _0161_;
  assign _0060_ = _0159_;
  assign _0056_ = _0157_;
  assign _0054_ = _0155_;
  assign _0017_ = _0153_;
  assign _0051_ = _0151_;
  assign _0014_ = _0149_;
  assign _0052_ = _0147_;
  assign _0015_ = _0145_;
  assign _0049_ = _0143_;
  assign _0053_ = _0141_;
  assign _0002_ = _0139_;
  assign _0018_ = _0137_;
  assign _0028_ = _0134_;
  assign _0008_ = _0261_;
  assign _0001_ = _0132_;
  assign _0010_ = fifo_we_rom_r;
  assign _0011_ = rom_sel;
  assign _0044_ = rom_sel;
  assign _0046_ = _0083_;
  assign _0047_ = _0084_;
  assign _0282_ = ctrl_out;
  assign _0106_ = _0283_;
  assign _0286_ = ctrl_in;
  assign _0105_ = _0287_;
  assign _0290_ = ctrl_in;
  assign _0104_ = _0291_;
  assign _0294_ = write_done;
  assign _0296_ = _0258_;
  assign _0103_ = _0297_;
  assign _0300_ = _0258_;
  assign _0102_ = _0301_;
  assign _0304_ = _0258_;
  assign _0115_ = _0305_;
  assign _0308_ = _0257_;
  assign _0101_ = _0309_;
  assign _0312_ = _0257_;
  assign _0113_ = _0313_;
  assign _0316_ = _0256_;
  assign _0094_ = _0317_;
  assign _0320_ = _0256_;
  assign _0111_ = _0321_;
  assign _0324_ = rom_done;
  assign _0093_ = _0325_;
  assign _0328_ = _0279_;
  assign _0098_ = _0329_;
  assign _0332_ = _0279_;
  assign _0092_ = _0333_;
  assign _0336_ = write_done;
  assign _0338_ = _0255_;
  assign _0091_ = _0339_;
  assign _0342_ = _0255_;
  assign _0090_ = _0343_;
  assign _0346_ = _0255_;
  assign _0109_ = _0347_;
  assign _0350_ = reg_ack;
  assign _0089_ = _0351_;
  assign _0354_ = write_done;
  assign _0356_ = _0254_;
  assign _0088_ = _0357_;
  assign _0360_ = _0254_;
  assign _0087_ = _0361_;
  assign _0364_ = _0254_;
  assign _0107_ = _0365_;
  assign _0368_ = write_done;
  assign _0370_ = _0253_;
  assign _0086_ = _0371_;
  assign _0374_ = _0253_;
  assign _0085_ = _0375_;
  assign _0378_ = _0253_;
  assign _0096_ = _0379_;
  assign _0382_ = _0210_;
  assign _0095_ = _0383_;
  assign _0386_ = hdr_done;
  assign _0073_ = _0387_;
  assign _0390_ = v_set_reg_raddr;
  assign _0072_ = _0391_;
  assign _0394_ = v_set_reg_waddr;
  assign _0071_ = _0395_;
  assign _0398_ = v_get_status;
  assign _0070_ = _0399_;
  assign _0402_ = v_set_feature;
  assign _0069_ = _0403_;
  assign _0406_ = v_set_int;
  assign _0068_ = _0407_;
  assign _0410_ = synch_frame;
  assign _0067_ = _0411_;
  assign _0414_ = set_interface;
  assign _0066_ = _0415_;
  assign _0418_ = get_interface;
  assign _0065_ = _0419_;
  assign _0422_ = set_config;
  assign _0064_ = _0423_;
  assign _0426_ = get_config;
  assign _0118_ = _0427_;
  assign _0430_ = set_descriptor;
  assign _0117_ = _0431_;
  assign _0434_ = get_descriptor;
  assign _0116_ = _0435_;
  assign _0438_ = set_address;
  assign _0114_ = _0439_;
  assign _0442_ = set_feature;
  assign _0112_ = _0443_;
  assign _0446_ = clear_feature;
  assign _0110_ = _0447_;
  assign _0450_ = get_status;
  assign _0108_ = _0451_;
  assign _0454_ = ctrl_setup;
  assign _0097_ = _0455_;
  assign _0081_ = _0457_;
  assign _0082_ = _0478_;
  assign _0080_ = _0499_;
  assign _0079_ = _0520_;
  assign _0078_ = _0541_;
  assign _0077_ = _0562_;
  assign _0076_ = _0583_;
  assign _0074_ = _0604_;
  assign _0075_ = _0625_;
  assign _0647_ = _0252_;
  assign _0055_ = _0646_;
  assign _0649_ = _0169_;
  assign _0651_ = _0251_;
  assign _0012_ = _0650_;
  assign _0653_ = set_address;
  assign _0655_ = _0250_;
  assign _0013_ = _0654_;
  assign _0657_ = set_address;
  assign _0659_ = _0278_;
  assign _0661_ = _0249_;
  assign _0050_ = _0660_;
  assign _0663_ = v_set_reg_waddr;
  assign _0665_ = v_set_reg_raddr;
  assign _0038_ = _0664_;
  assign _0667_ = v_set_reg_raddr;
  assign _0669_ = _0224_;
  assign _0671_ = _0247_;
  assign _0039_ = _0670_;
  assign _0673_ = _0222_;
  assign _0037_ = _0672_;
  assign _0675_ = _0221_;
  assign _0040_ = _0674_;
  assign _0677_ = _0220_;
  assign _0679_ = _0219_;
  assign _0681_ = v_set_reg_waddr;
  assign _0683_ = _0246_;
  assign _0036_ = _0682_;
  assign _0685_ = _0219_;
  assign _0687_ = v_set_reg_waddr;
  assign _0689_ = _0246_;
  assign _0041_ = _0688_;
  assign _0691_ = _0259_;
  assign _0035_ = _0690_;
  assign _0693_ = _0218_;
  assign _0695_ = _0217_;
  assign _0697_ = _0174_;
  assign _0699_ = _0243_;
  assign _0057_ = _0698_;
  assign _0701_ = _0218_;
  assign _0703_ = _0217_;
  assign _0705_ = _0174_;
  assign _0707_ = _0243_;
  assign _0063_ = _0706_;
  assign _0709_ = rom_sel;
  assign _0711_ = in_size_4;
  assign _0713_ = in_size_2;
  assign _0715_ = in_size_1;
  assign _0717_ = in_size_0;
  assign _0007_ = _0716_;
  assign _0006_ = _0718_;
  assign _0726_ = le[7];
  assign _0027_ = _0725_;
  assign _0728_ = le[6];
  assign _0026_ = _0727_;
  assign _0730_ = le[5];
  assign _0025_ = _0729_;
  assign _0732_ = le[4];
  assign _0024_ = _0731_;
  assign _0734_ = le[3];
  assign _0023_ = _0733_;
  assign _0736_ = le[2];
  assign _0022_ = _0735_;
  assign _0738_ = le[1];
  assign _0021_ = _0737_;
  assign _0740_ = le[0];
  assign _0020_ = _0739_;
  assign _0742_ = _0215_;
  assign _0744_ = _0241_;
  assign _0746_ = _0240_;
  assign _0748_ = _0239_;
  assign _0033_ = _0747_;
  assign _0750_ = _0126_;
  assign _0752_ = _0125_;
  assign _0754_ = _0231_;
  assign _0045_ = _0753_;
  assign _0756_ = _0124_;
  assign _0758_ = _0123_;
  assign _0760_ = _0228_;
  assign _0042_ = _0759_;
  assign _0099_ = _0765_;
  assign _0083_ = _0767_;
  assign _0100_ = _0775_;
  assign _0084_ = _0777_;
  assign _0781_ = set_halt;
  assign _0783_ = clr_halt;
  assign _0785_ = _0227_;
  assign _0019_ = _0784_;
  assign _0787_ = set_config;
  assign _0789_ = _0226_;
  assign _0004_ = _0788_;
  assign _0791_ = set_address;
  assign _0793_ = _0225_;
  assign _0000_ = _0792_;
  assign fifo_we_d = _0625_;
  assign data_sel = _0604_;
  assign next_state = _0457_;
  assign get_hdr = _0583_;
  assign in_size_0 = _0562_;
  assign in_size_1 = _0541_;
  assign in_size_2 = _0520_;
  assign in_size_4 = _0499_;
  assign rom_sel = _0478_;
  assign rom_size_dd = _0767_;
  assign rom_start_d = _0777_;
  assign _0780_ = halt;
endmodule

module usb1_fifo2(clk, rst, clr, din, we, dout, re);
  wire _00_;
  wire [7:0] _01_;
  wire [7:0] _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire [7:0] _06_;
  wire [7:0] _07_;
  wire _08_;
  wire _09_;
  wire [7:0] _10_;
  reg _11_;
  reg [7:0] _12_;
  reg [7:0] _13_;
  wire _14_;
  wire _15_;
  wire [7:0] _16_;
  wire _17_;
  wire [7:0] _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  input clk;
  wire clk;
  input clr;
  wire clr;
  input [7:0] din;
  wire [7:0] din;
  output [7:0] dout;
  wire [7:0] dout;
  input re;
  wire re;
  reg rp;
  input rst;
  wire rst;
  input we;
  wire we;
  reg wp;
  reg [7:0] mem [1:0];
  always @(posedge clk) begin
    if (_07_[0])
      mem[_05_][0:0] <= _06_[0];
    if (_07_[1])
      mem[_05_][1:1] <= _06_[1];
    if (_07_[2])
      mem[_05_][2:2] <= _06_[2];
    if (_07_[3])
      mem[_05_][3:3] <= _06_[3];
    if (_07_[4])
      mem[_05_][4:4] <= _06_[4];
    if (_07_[5])
      mem[_05_][5:5] <= _06_[5];
    if (_07_[6])
      mem[_05_][6:6] <= _06_[6];
    if (_07_[7])
      mem[_05_][7:7] <= _06_[7];
  end
  assign _10_ = mem[rp];
  assign _08_ = ! rst;
  assign _09_ = ! rst;
  assign _14_ = ~ wp;
  assign _15_ = ~ rp;
  always @(posedge clk)
    _11_ <= _20_;
  always @(posedge clk)
    _12_ <= _18_;
  always @(posedge clk)
    _13_ <= _16_;
  always @(posedge clk, negedge rst)
    if (!rst) rp <= 1'h0;
    else rp <= _24_;
  always @(posedge clk, negedge rst)
    if (!rst) wp <= 1'h0;
    else wp <= _28_;
  assign _16_ = _17_ ? 8'hff : 8'h00;
  assign _18_ = _19_ ? din : 8'hxx;
  assign _20_ = _21_ ? wp : 1'hx;
  assign _22_ = _23_ ? _15_ : rp;
  assign _24_ = _25_ ? 1'h0 : _22_;
  assign _26_ = _27_ ? _14_ : wp;
  assign _28_ = _29_ ? 1'h0 : _26_;
  assign dout = _10_;
  assign _02_ = _07_;
  assign _01_ = _06_;
  assign _00_ = _05_;
  assign _17_ = we;
  assign _07_ = _16_;
  assign _19_ = we;
  assign _06_ = _18_;
  assign _21_ = we;
  assign _05_ = _20_;
  assign _23_ = re;
  assign _25_ = clr;
  assign _03_ = _24_;
  assign _27_ = we;
  assign _29_ = clr;
  assign _04_ = _28_;
endmodule

module usb1_idma(clk, rst, rx_data_valid, rx_data_done, send_data, rd_next, tx_valid, tx_data_st_i, tx_data_st_o, tx_dma_en, rx_dma_en, idma_done, ep_sel, size, rx_cnt, rx_done, tx_busy, ep_bf_en, ep_bf_size, dropped_frame, misaligned_frame
, mwe, mre, ep_empty, ep_empty_int, ep_full);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire [7:0] _007_;
  wire [7:0] _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire [8:0] _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire [7:0] _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire [8:0] _070_;
  wire _071_;
  wire [8:0] _072_;
  wire _073_;
  wire [7:0] _074_;
  wire _075_;
  wire [7:0] _076_;
  wire _077_;
  wire [7:0] _078_;
  wire _079_;
  wire [8:0] _080_;
  wire adr_incb;
  wire adr_incw;
  input clk;
  wire clk;
  output dropped_frame;
  reg dropped_frame;
  wire [6:0] ec;
  wire ec_clr;
  input ep_bf_en;
  wire ep_bf_en;
  input [6:0] ep_bf_size;
  wire [6:0] ep_bf_size;
  input ep_empty;
  wire ep_empty;
  output ep_empty_int;
  wire ep_empty_int;
  wire ep_empty_latched;
  reg ep_empty_r;
  input ep_full;
  wire ep_full;
  wire ep_full_int;
  wire ep_full_latched;
  input [3:0] ep_sel;
  wire [3:0] ep_sel;
  wire ff_clr;
  wire ff_empty;
  wire ff_full;
  wire ff_re;
  reg ff_we;
  reg ff_we1;
  output idma_done;
  reg idma_done;
  output misaligned_frame;
  reg misaligned_frame;
  output mre;
  wire mre;
  output mwe;
  wire mwe;
  reg mwe_r;
  wire rc_clr;
  wire [6:0] rc_cnt;
  input rd_next;
  wire rd_next;
  input rst;
  wire rst;
  output [7:0] rx_cnt;
  reg [7:0] rx_cnt;
  reg [7:0] rx_cnt_r;
  input rx_data_done;
  wire rx_data_done;
  reg rx_data_done_r;
  input rx_data_valid;
  wire rx_data_valid;
  reg rx_data_valid_r;
  input rx_dma_en;
  wire rx_dma_en;
  output rx_done;
  wire rx_done;
  output send_data;
  wire send_data;
  reg send_data_r;
  wire siz_dec;
  reg [8:0] sizd_c;
  reg sizd_is_zero;
  wire sizd_is_zero_d;
  input [8:0] size;
  wire [8:0] size;
  output tx_busy;
  wire tx_busy;
  input [7:0] tx_data_st_i;
  wire [7:0] tx_data_st_i;
  output [7:0] tx_data_st_o;
  wire [7:0] tx_data_st_o;
  input tx_dma_en;
  wire tx_dma_en;
  reg tx_dma_en_r;
  reg tx_dma_en_r1;
  reg tx_dma_en_r2;
  reg tx_dma_en_r3;
  input tx_valid;
  wire tx_valid;
  wire tx_valid_e;
  reg tx_valid_r;
  assign _019_ = rx_cnt_r + 8'h01;
  assign _020_ = mwe_r & _034_;
  assign _021_ = _053_ & _038_;
  assign _022_ = tx_valid_r & _039_;
  assign _023_ = tx_dma_en_r & _043_;
  assign _024_ = ep_empty_int & _044_;
  assign _025_ = rd_next & _056_;
  assign _026_ = send_data_r & _045_;
  assign _027_ = _026_ & _046_;
  assign _028_ = sizd_is_zero & _033_;
  assign _029_ = _059_ & _047_;
  assign _030_ = _029_ & _048_;
  assign _031_ = _030_ & _061_;
  assign _032_ = ! sizd_c;
  assign _033_ = size == 9'h001;
  assign _034_ = ! ep_full_int;
  assign _035_ = ! rst;
  assign _036_ = ! rst;
  assign _037_ = ! rst;
  assign _038_ = ! sizd_is_zero_d;
  assign _039_ = ! tx_valid;
  assign _040_ = ! rst;
  assign _041_ = ! tx_valid;
  assign _042_ = ! rst;
  assign _043_ = ! ep_empty_int;
  assign _044_ = ! sizd_is_zero_d;
  assign _045_ = ! ep_empty_r;
  assign _046_ = ! _028_;
  assign _047_ = ! sizd_is_zero_d;
  assign _048_ = ! ep_empty_int;
  assign _049_ = ! tx_valid;
  assign _050_ = rx_data_done_r | sizd_is_zero_d;
  assign _051_ = _050_ | ep_empty_int;
  assign _052_ = tx_dma_en_r | tx_dma_en_r1;
  assign _053_ = _052_ | rd_next;
  assign _054_ = send_data | tx_dma_en_r;
  assign _055_ = _054_ | tx_dma_en;
  assign _056_ = sizd_is_zero_d | _024_;
  assign _057_ = _027_ | tx_dma_en_r1;
  assign _058_ = tx_dma_en_r1 | tx_dma_en_r;
  assign _059_ = _058_ | rd_next;
  assign _060_ = send_data | tx_dma_en_r1;
  assign _061_ = _060_ | tx_dma_en_r;
  always @(posedge clk)
    ff_we <= ff_we1;
  always @(posedge clk)
    ff_we1 <= _031_;
  always @(posedge clk, negedge rst)
    if (!rst) send_data_r <= 1'h0;
    else send_data_r <= _064_;
  always @(posedge clk, negedge rst)
    if (!rst) ep_empty_r <= 1'h0;
    else ep_empty_r <= _068_;
  always @(posedge clk)
    tx_valid_r <= tx_valid;
  always @(posedge clk)
    sizd_is_zero <= _032_;
  always @(posedge clk, negedge rst)
    if (!rst) sizd_c <= 9'h1ff;
    else sizd_c <= _072_;
  always @(posedge clk, negedge rst)
    if (!rst) rx_cnt <= 8'h00;
    else rx_cnt <= _074_;
  always @(posedge clk, negedge rst)
    if (!rst) rx_cnt_r <= 8'h00;
    else rx_cnt_r <= _078_;
  always @(posedge clk)
    idma_done <= _051_;
  always @(posedge clk)
    tx_dma_en_r3 <= tx_dma_en_r2;
  always @(posedge clk)
    tx_dma_en_r2 <= tx_dma_en_r1;
  always @(posedge clk)
    tx_dma_en_r1 <= tx_dma_en_r;
  always @(posedge clk)
    tx_dma_en_r <= tx_dma_en;
  always @(posedge clk)
    rx_data_done_r <= rx_data_done;
  always @(posedge clk)
    rx_data_valid_r <= rx_data_valid;
  always @(posedge clk)
    mwe_r <= rx_data_valid;
  always @(posedge clk)
    misaligned_frame <= 1'h0;
  always @(posedge clk)
    dropped_frame <= 1'h0;
  assign _062_ = _063_ ? 1'h0 : send_data_r;
  assign _064_ = _065_ ? 1'h1 : _062_;
  assign _066_ = _067_ ? ep_empty : ep_empty_r;
  assign _068_ = tx_valid ? _066_ : 1'h0;
  assign _070_ = _071_ ? _080_ : sizd_c;
  assign _072_ = _073_ ? size : _070_;
  assign _074_ = _075_ ? rx_cnt_r : rx_cnt;
  assign _076_ = _077_ ? _019_ : rx_cnt_r;
  assign _078_ = _079_ ? 8'h00 : _076_;
  assign _080_ = sizd_c - 9'h001;
  usb1_fifo2 ff (
    .clk(clk),
    .clr(ff_clr),
    .din(tx_data_st_i),
    .dout(tx_data_st_o),
    .re(ff_re),
    .rst(rst),
    .we(ff_we)
  );
  assign ep_empty_int = ep_empty;
  assign ep_full_int = ep_full;
  assign mwe = _020_;
  assign rx_done = rx_data_done_r;
  assign siz_dec = _021_;
  assign sizd_is_zero_d = _032_;
  assign tx_busy = _055_;
  assign tx_valid_e = _022_;
  assign send_data = _057_;
  assign mre = _031_;
  assign ff_re = rd_next;
  assign ff_clr = _049_;
  assign _003_ = ff_we1;
  assign _002_ = _031_;
  assign _018_ = tx_valid;
  assign _013_ = _032_;
  assign _004_ = _051_;
  assign _016_ = tx_dma_en_r2;
  assign _015_ = tx_dma_en_r1;
  assign _014_ = tx_dma_en_r;
  assign _017_ = tx_dma_en;
  assign _009_ = rx_data_done;
  assign _010_ = rx_data_valid;
  assign _006_ = rx_data_valid;
  assign _005_ = 1'h0;
  assign _000_ = 1'h0;
  assign _063_ = _025_;
  assign _065_ = _023_;
  assign _011_ = _064_;
  assign _067_ = tx_dma_en_r2;
  assign _069_ = _041_;
  assign _001_ = _068_;
  assign _071_ = siz_dec;
  assign _073_ = tx_dma_en;
  assign _012_ = _072_;
  assign _075_ = rx_data_done_r;
  assign _007_ = _074_;
  assign _077_ = rx_data_valid;
  assign _079_ = rx_data_done_r;
  assign _008_ = _078_;
endmodule

module usb1_pa(clk, rst, tx_data, tx_valid, tx_valid_last, tx_ready, tx_first, send_token, token_pid_sel, send_data, data_pid_sel, tx_data_st, rd_next, ep_empty);
  wire [15:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire [7:0] _004_;
  wire _005_;
  wire _006_;
  wire [3:0] _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire [3:0] _012_;
  wire [7:0] _013_;
  wire [7:0] _014_;
  wire [7:0] _015_;
  wire _016_;
  wire [7:0] _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire [7:0] _024_;
  wire _025_;
  wire _026_;
  wire [3:0] _027_;
  wire _028_;
  wire [7:0] _029_;
  wire [7:0] _030_;
  wire [7:0] _031_;
  wire [7:0] _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire [3:0] _038_;
  wire _039_;
  wire [7:0] _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire [3:0] _045_;
  wire _046_;
  wire _047_;
  wire [3:0] _048_;
  wire _049_;
  wire [3:0] _050_;
  wire [3:0] _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire [3:0] _094_;
  wire _095_;
  wire [3:0] _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire [3:0] _102_;
  wire _103_;
  wire [3:0] _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire [3:0] _120_;
  wire _121_;
  wire [3:0] _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire [3:0] _136_;
  wire _137_;
  wire [3:0] _138_;
  wire _139_;
  wire [3:0] _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire [3:0] _154_;
  wire _155_;
  wire [3:0] _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire [3:0] _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire [15:0] _201_;
  wire _202_;
  wire [15:0] _203_;
  wire _204_;
  wire [7:0] _205_;
  wire _206_;
  wire [7:0] _207_;
  wire _208_;
  wire [7:0] _209_;
  wire _210_;
  wire [7:0] _211_;
  wire _212_;
  wire [7:0] _213_;
  wire _214_;
  wire [7:0] _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire [7:0] _220_;
  wire _221_;
  wire _222_;
  wire _223_;
  wire _224_;
  wire _225_;
  wire _226_;
  wire _227_;
  wire _228_;
  wire _229_;
  wire _230_;
  wire _231_;
  wire _232_;
  input clk;
  wire clk;
  reg [15:0] crc16;
  reg crc16_add;
  wire crc16_clr;
  wire [15:0] crc16_next;
  wire [15:0] crc16_rev;
  wire crc_sel1;
  wire crc_sel2;
  wire [7:0] data_pid;
  input [1:0] data_pid_sel;
  wire [1:0] data_pid_sel;
  wire dsel;
  input ep_empty;
  wire ep_empty;
  wire last;
  wire [3:0] next_state;
  output rd_next;
  wire rd_next;
  input rst;
  wire rst;
  input send_data;
  wire send_data;
  reg send_data_r;
  reg send_data_r2;
  input send_token;
  wire send_token;
  reg send_token_r;
  reg [3:0] state;
  wire [7:0] token_pid;
  input [1:0] token_pid_sel;
  wire [1:0] token_pid_sel;
  output [7:0] tx_data;
  wire [7:0] tx_data;
  wire [7:0] tx_data_d;
  wire [7:0] tx_data_data;
  input [7:0] tx_data_st;
  wire [7:0] tx_data_st;
  output tx_first;
  wire tx_first;
  reg tx_first_r;
  input tx_ready;
  wire tx_ready;
  wire [7:0] tx_spec_data;
  output tx_valid;
  wire tx_valid;
  wire tx_valid_d;
  output tx_valid_last;
  wire tx_valid_last;
  reg tx_valid_r;
  reg tx_valid_r1;
  wire zero_length;
  reg zero_length_r;
  assign _052_ = _064_ & _065_;
  assign _053_ = _092_ & _066_;
  assign _054_ = send_data & _067_;
  assign _055_ = _068_ & _093_;
  assign _056_ = send_data_r & _069_;
  assign _057_ = rd_next & _070_;
  assign _058_ = zero_length & send_data;
  assign _059_ = tx_ready & tx_valid_r;
  assign _060_ = _072_ & tx_ready;
  assign _061_ = _060_ & tx_valid_r;
  assign _062_ = ! rst;
  assign _063_ = ! rst;
  assign _064_ = ! crc_sel1;
  assign _065_ = ! crc_sel2;
  assign _066_ = ! tx_first_r;
  assign _067_ = ! send_data_r;
  assign _068_ = ! zero_length_r;
  assign _069_ = ! send_data_r2;
  assign _070_ = ! crc_sel1;
  assign _071_ = ! rst;
  assign _072_ = ! send_data;
  assign _073_ = ~ crc16[8];
  assign _074_ = ~ crc16[9];
  assign _075_ = ~ crc16[10];
  assign _076_ = ~ crc16[11];
  assign _077_ = ~ crc16[12];
  assign _078_ = ~ crc16[13];
  assign _079_ = ~ crc16[14];
  assign _080_ = ~ crc16[15];
  assign _081_ = ~ crc16[0];
  assign _082_ = ~ crc16[1];
  assign _083_ = ~ crc16[2];
  assign _084_ = ~ crc16[3];
  assign _085_ = ~ crc16[4];
  assign _086_ = ~ crc16[5];
  assign _087_ = ~ crc16[6];
  assign _088_ = ~ crc16[7];
  assign _089_ = send_token | send_token_r;
  assign _090_ = send_token | last;
  assign _091_ = send_token | send_data;
  assign _092_ = send_token | send_data;
  assign _093_ = _056_ | _057_;
  always @(posedge clk, negedge rst)
    if (!rst) state <= 4'h1;
    else state <= _176_;
  always @(posedge clk)
    crc16 <= _203_;
  always @(posedge clk)
    crc16_add <= _055_;
  always @(posedge clk)
    send_data_r2 <= send_data_r;
  always @(posedge clk)
    send_data_r <= send_data;
  always @(posedge clk)
    tx_first_r <= _091_;
  always @(posedge clk, negedge rst)
    if (!rst) send_token_r <= 1'h0;
    else send_token_r <= _227_;
  always @(posedge clk)
    tx_valid_r <= tx_valid_r1;
  always @(posedge clk)
    tx_valid_r1 <= _166_;
  always @(posedge clk, negedge rst)
    if (!rst) zero_length_r <= 1'h0;
    else zero_length_r <= _231_;
  assign _094_ = _095_ ? 4'h1 : state;
  assign _096_ = _097_ ? _094_ : 4'hx;
  assign _097_ = state == 4'h8;
  assign _098_ = _099_ ? 1'h0 : 1'h1;
  assign _100_ = _101_ ? _098_ : 1'hx;
  assign _101_ = state == 4'h8;
  assign _102_ = _103_ ? 4'h8 : state;
  assign _104_ = _105_ ? _102_ : 4'hx;
  assign _105_ = state == 4'h4;
  assign _106_ = _107_ ? 1'h1 : 1'h0;
  assign _108_ = _109_ ? _106_ : 1'hx;
  assign _109_ = state == 4'h4;
  assign _110_ = _111_ ? 1'h1 : 1'h0;
  assign _112_ = _113_ ? _110_ : 1'hx;
  assign _113_ = state == 4'h4;
  assign _114_ = _115_ ? 1'h0 : 1'h1;
  assign _116_ = _117_ ? _114_ : 1'hx;
  assign _117_ = state == 4'h4;
  assign _118_ = _119_ ? 1'h1 : 1'hx;
  assign _119_ = state == 4'h4;
  assign _120_ = _121_ ? 4'h4 : state;
  assign _122_ = _123_ ? _120_ : 4'hx;
  assign _123_ = state == 4'h2;
  assign _124_ = _125_ ? 1'h1 : 1'h0;
  assign _126_ = _127_ ? _124_ : 1'hx;
  assign _127_ = state == 4'h2;
  assign _128_ = _129_ ? 1'h1 : 1'h0;
  assign _130_ = _131_ ? _128_ : 1'hx;
  assign _131_ = state == 4'h2;
  assign _132_ = _133_ ? 1'h1 : 1'h0;
  assign _134_ = _135_ ? _132_ : 1'hx;
  assign _135_ = state == 4'h2;
  assign _136_ = _137_ ? 4'h2 : state;
  assign _138_ = _139_ ? 4'hx : _136_;
  assign _140_ = _141_ ? _138_ : 4'hx;
  assign _141_ = state == 4'h1;
  assign _142_ = _143_ ? 1'h1 : 1'h0;
  assign _144_ = _145_ ? 1'hx : _142_;
  assign _146_ = _147_ ? _144_ : 1'hx;
  assign _147_ = state == 4'h1;
  assign _148_ = _149_ ? 1'h1 : 1'h0;
  assign _150_ = _151_ ? 1'hx : _148_;
  assign _152_ = _153_ ? _150_ : 1'hx;
  assign _153_ = state == 4'h1;
  assign _154_ = _155_ ? 4'h4 : _045_;
  assign _156_ = _157_ ? _154_ : 4'hx;
  assign _157_ = state == 4'h1;
  assign _158_ = _159_ ? 1'h1 : _043_;
  assign _160_ = _161_ ? _158_ : 1'hx;
  assign _161_ = state == 4'h1;
  assign _162_ = _163_ ? 1'h1 : _046_;
  assign _164_ = _165_ ? _162_ : 1'hx;
  assign _165_ = state == 4'h1;
  function [0:0] _338_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _338_ = b[0:0];
      4'b??1?:
        _338_ = b[1:1];
      4'b?1??:
        _338_ = b[2:2];
      4'b1???:
        _338_ = b[3:3];
      default:
        _338_ = a;
    endcase
  endfunction
  assign _166_ = _338_(1'hx, { _041_, 1'h1, _049_, 1'h0 }, { _170_, _169_, _168_, _167_ });
  assign _167_ = state == 4'h8;
  assign _168_ = state == 4'h4;
  assign _169_ = state == 4'h2;
  assign _170_ = state == 4'h1;
  function [0:0] _343_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _343_ = b[0:0];
      4'b??1?:
        _343_ = b[1:1];
      4'b?1??:
        _343_ = b[2:2];
      4'b1???:
        _343_ = b[3:3];
      default:
        _343_ = a;
    endcase
  endfunction
  assign _171_ = _343_(1'hx, { _036_, _047_, 2'h3 }, { _175_, _174_, _173_, _172_ });
  assign _172_ = state == 4'h8;
  assign _173_ = state == 4'h4;
  assign _174_ = state == 4'h2;
  assign _175_ = state == 4'h1;
  function [3:0] _348_;
    input [3:0] a;
    input [15:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _348_ = b[3:0];
      4'b??1?:
        _348_ = b[7:4];
      4'b?1??:
        _348_ = b[11:8];
      4'b1???:
        _348_ = b[15:12];
      default:
        _348_ = a;
    endcase
  endfunction
  assign _176_ = _348_(4'hx, { _038_, _048_, _050_, _051_ }, { _180_, _179_, _178_, _177_ });
  assign _177_ = state == 4'h8;
  assign _178_ = state == 4'h4;
  assign _179_ = state == 4'h2;
  assign _180_ = state == 4'h1;
  function [0:0] _353_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _353_ = b[0:0];
      4'b??1?:
        _353_ = b[1:1];
      4'b?1??:
        _353_ = b[2:2];
      4'b1???:
        _353_ = b[3:3];
      default:
        _353_ = a;
    endcase
  endfunction
  assign _181_ = _353_(1'hx, { 2'h0, _035_, 1'h1 }, { _185_, _184_, _183_, _182_ });
  assign _182_ = state == 4'h8;
  assign _183_ = state == 4'h4;
  assign _184_ = state == 4'h2;
  assign _185_ = state == 4'h1;
  function [0:0] _358_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _358_ = b[0:0];
      4'b??1?:
        _358_ = b[1:1];
      4'b?1??:
        _358_ = b[2:2];
      4'b1???:
        _358_ = b[3:3];
      default:
        _358_ = a;
    endcase
  endfunction
  assign _186_ = _358_(1'hx, { 1'h0, _034_, _042_, 1'h0 }, { _190_, _189_, _188_, _187_ });
  assign _187_ = state == 4'h8;
  assign _188_ = state == 4'h4;
  assign _189_ = state == 4'h2;
  assign _190_ = state == 4'h1;
  function [0:0] _363_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _363_ = b[0:0];
      4'b??1?:
        _363_ = b[1:1];
      4'b?1??:
        _363_ = b[2:2];
      4'b1???:
        _363_ = b[3:3];
      default:
        _363_ = a;
    endcase
  endfunction
  assign _191_ = _363_(1'hx, { 2'h0, _037_, _044_ }, { _195_, _194_, _193_, _192_ });
  assign _192_ = state == 4'h8;
  assign _193_ = state == 4'h4;
  assign _194_ = state == 4'h2;
  assign _195_ = state == 4'h1;
  function [0:0] _368_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _368_ = b[0:0];
      4'b??1?:
        _368_ = b[1:1];
      4'b?1??:
        _368_ = b[2:2];
      4'b1???:
        _368_ = b[3:3];
      default:
        _368_ = a;
    endcase
  endfunction
  assign _196_ = _368_(1'hx, { 1'h0, _039_, 2'h0 }, { _200_, _199_, _198_, _197_ });
  assign _197_ = state == 4'h8;
  assign _198_ = state == 4'h4;
  assign _199_ = state == 4'h2;
  assign _200_ = state == 4'h1;
  assign _201_ = _202_ ? crc16_next : crc16;
  assign _203_ = _204_ ? 16'hffff : _201_;
  assign _205_ = _206_ ? { _073_, _074_, _075_, _076_, _077_, _078_, _079_, _080_ } : { _081_, _082_, _083_, _084_, _085_, _086_, _087_, _088_ };
  assign _207_ = _208_ ? 8'hxx : _205_;
  assign _209_ = _210_ ? data_pid : _040_;
  assign _211_ = _212_ ? tx_spec_data : tx_data_st;
  assign _213_ = _214_ ? token_pid : tx_data_data;
  function [7:0] _380_;
    input [7:0] a;
    input [31:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _380_ = b[7:0];
      4'b??1?:
        _380_ = b[15:8];
      4'b?1??:
        _380_ = b[23:16];
      4'b1???:
        _380_ = b[31:24];
      default:
        _380_ = a;
    endcase
  endfunction
  assign _215_ = _380_(8'hxx, 32'd3276506895, { _219_, _218_, _217_, _216_ });
  assign _216_ = data_pid_sel == 2'h3;
  assign _217_ = data_pid_sel == 2'h2;
  assign _218_ = data_pid_sel == 2'h1;
  assign _219_ = ! data_pid_sel;
  function [7:0] _385_;
    input [7:0] a;
    input [31:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _385_ = b[7:0];
      4'b??1?:
        _385_ = b[15:8];
      4'b?1??:
        _385_ = b[23:16];
      4'b1???:
        _385_ = b[31:24];
      default:
        _385_ = a;
    endcase
  endfunction
  assign _220_ = _385_(8'hxx, 32'd3529121430, { _224_, _223_, _222_, _221_ });
  assign _221_ = token_pid_sel == 2'h3;
  assign _222_ = token_pid_sel == 2'h2;
  assign _223_ = token_pid_sel == 2'h1;
  assign _224_ = ! token_pid_sel;
  assign _225_ = _226_ ? 1'h0 : send_token_r;
  assign _227_ = _228_ ? 1'h1 : _225_;
  assign _229_ = _230_ ? ep_empty : zero_length_r;
  assign _231_ = _232_ ? 1'h0 : _229_;
  usb1_crc16 u1 (
    .crc_in(crc16),
    .crc_out(crc16_next),
    .din({ tx_data_st[0], tx_data_st[1], tx_data_st[2], tx_data_st[3], tx_data_st[4], tx_data_st[5], tx_data_st[6], tx_data_st[7] })
  );
  assign zero_length = ep_empty;
  assign tx_data = tx_data_d;
  assign tx_valid_last = _090_;
  assign tx_valid = tx_valid_d;
  assign tx_first = _053_;
  assign crc16_clr = _054_;
  assign crc16_rev[15] = _073_;
  assign crc16_rev[14] = _074_;
  assign crc16_rev[13] = _075_;
  assign crc16_rev[12] = _076_;
  assign crc16_rev[11] = _077_;
  assign crc16_rev[10] = _078_;
  assign crc16_rev[9] = _079_;
  assign crc16_rev[8] = _080_;
  assign crc16_rev[7] = _081_;
  assign crc16_rev[6] = _082_;
  assign crc16_rev[5] = _083_;
  assign crc16_rev[4] = _084_;
  assign crc16_rev[3] = _085_;
  assign crc16_rev[2] = _086_;
  assign crc16_rev[1] = _087_;
  assign crc16_rev[0] = _088_;
  assign _003_ = _023_;
  assign _002_ = _022_;
  assign _018_ = _033_;
  assign _005_ = _025_;
  assign _006_ = _026_;
  assign _008_ = _028_;
  assign _007_ = _027_;
  assign _001_ = _055_;
  assign _009_ = send_data_r;
  assign _010_ = send_data;
  assign _016_ = _091_;
  assign _017_ = _032_;
  assign _015_ = _031_;
  assign _014_ = _030_;
  assign _004_ = _024_;
  assign _013_ = _029_;
  assign _020_ = tx_valid_r1;
  assign _019_ = tx_valid_d;
  assign _095_ = tx_ready;
  assign _051_ = _096_;
  assign _099_ = tx_ready;
  assign _044_ = _100_;
  assign _103_ = tx_ready;
  assign _050_ = _104_;
  assign _107_ = tx_ready;
  assign _035_ = _108_;
  assign _111_ = tx_ready;
  assign _037_ = _112_;
  assign _115_ = tx_ready;
  assign _042_ = _116_;
  assign _049_ = _118_;
  assign _121_ = _061_;
  assign _048_ = _122_;
  assign _125_ = _061_;
  assign _034_ = _126_;
  assign _129_ = _061_;
  assign _047_ = _130_;
  assign _133_ = _059_;
  assign _039_ = _134_;
  assign _137_ = send_data;
  assign _139_ = _058_;
  assign _045_ = _140_;
  assign _143_ = send_data;
  assign _145_ = _058_;
  assign _043_ = _146_;
  assign _149_ = send_data;
  assign _151_ = _058_;
  assign _046_ = _152_;
  assign _155_ = _058_;
  assign _038_ = _156_;
  assign _159_ = _058_;
  assign _036_ = _160_;
  assign _163_ = _058_;
  assign _041_ = _164_;
  assign _033_ = _166_;
  assign _025_ = _171_;
  assign _027_ = _176_;
  assign _023_ = _181_;
  assign _022_ = _186_;
  assign _026_ = _191_;
  assign _028_ = _196_;
  assign _012_ = next_state;
  assign _202_ = crc16_add;
  assign _204_ = crc16_clr;
  assign _000_ = _203_;
  assign _206_ = crc_sel1;
  assign _208_ = _052_;
  assign _040_ = _207_;
  assign _210_ = _052_;
  assign _032_ = _209_;
  assign _212_ = dsel;
  assign _031_ = _211_;
  assign _214_ = _089_;
  assign _030_ = _213_;
  assign _024_ = _215_;
  assign _029_ = _220_;
  assign _226_ = tx_ready;
  assign _228_ = send_token;
  assign _011_ = _227_;
  assign _230_ = crc16_clr;
  assign _232_ = last;
  assign _021_ = _231_;
  assign next_state = _176_;
  assign rd_next = _196_;
  assign last = _191_;
  assign dsel = _171_;
  assign tx_valid_d = _166_;
  assign crc_sel1 = _186_;
  assign crc_sel2 = _181_;
  assign tx_spec_data = _209_;
  assign tx_data_data = _211_;
  assign tx_data_d = _213_;
  assign data_pid = _215_;
  assign token_pid = _220_;
endmodule

module usb1_pd(clk, rst, rx_data, rx_valid, rx_active, rx_err, pid_OUT, pid_IN, pid_SOF, pid_SETUP, pid_DATA0, pid_DATA1, pid_DATA2, pid_MDATA, pid_ACK, pid_NACK, pid_STALL, pid_NYET, pid_PRE, pid_ERR, pid_SPLIT
, pid_PING, pid_cks_err, token_fadr, token_endp, token_valid, crc5_err, frame_no, rx_data_st, rx_data_valid, rx_data_done, crc16_err, seq_err, rx_busy);
  wire [15:0] _000_;
  wire [7:0] _001_;
  wire [7:0] _002_;
  wire [7:0] _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire [3:0] _007_;
  wire [7:0] _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire [3:0] _017_;
  wire [7:0] _018_;
  wire [7:0] _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire [3:0] _025_;
  wire [3:0] _026_;
  wire [3:0] _027_;
  wire [3:0] _028_;
  wire _029_;
  wire _030_;
  wire [3:0] _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire [3:0] _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire [3:0] _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire [3:0] _049_;
  wire _050_;
  wire _051_;
  wire [3:0] _052_;
  wire _053_;
  wire [3:0] _054_;
  wire _055_;
  wire [3:0] _056_;
  wire _057_;
  wire [3:0] _058_;
  wire [3:0] _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire [3:0] _124_;
  wire [4:0] _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire [3:0] _139_;
  wire _140_;
  wire [3:0] _141_;
  wire _142_;
  wire [3:0] _143_;
  wire _144_;
  wire [3:0] _145_;
  wire _146_;
  wire [3:0] _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire [3:0] _157_;
  wire _158_;
  wire [3:0] _159_;
  wire _160_;
  wire [3:0] _161_;
  wire _162_;
  wire [3:0] _163_;
  wire _164_;
  wire [3:0] _165_;
  wire _166_;
  wire [3:0] _167_;
  wire _168_;
  wire [3:0] _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire [3:0] _177_;
  wire _178_;
  wire [3:0] _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire [3:0] _189_;
  wire _190_;
  wire [3:0] _191_;
  wire _192_;
  wire [3:0] _193_;
  wire _194_;
  wire [3:0] _195_;
  wire _196_;
  wire [3:0] _197_;
  wire _198_;
  wire [3:0] _199_;
  wire _200_;
  wire [3:0] _201_;
  wire _202_;
  wire [3:0] _203_;
  wire _204_;
  wire [3:0] _205_;
  wire _206_;
  wire [3:0] _207_;
  wire _208_;
  wire [3:0] _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire [3:0] _221_;
  wire _222_;
  wire [3:0] _223_;
  wire _224_;
  wire [3:0] _225_;
  wire _226_;
  wire [3:0] _227_;
  wire _228_;
  wire _229_;
  wire _230_;
  wire _231_;
  wire _232_;
  wire _233_;
  wire _234_;
  wire _235_;
  wire _236_;
  wire _237_;
  wire _238_;
  wire _239_;
  wire _240_;
  wire _241_;
  wire _242_;
  wire _243_;
  wire _244_;
  wire [3:0] _245_;
  wire _246_;
  wire [3:0] _247_;
  wire _248_;
  wire [3:0] _249_;
  wire _250_;
  wire _251_;
  wire _252_;
  wire _253_;
  wire _254_;
  wire _255_;
  wire _256_;
  wire _257_;
  wire _258_;
  wire _259_;
  wire _260_;
  wire _261_;
  wire _262_;
  wire _263_;
  wire _264_;
  wire _265_;
  wire _266_;
  wire _267_;
  wire _268_;
  wire [3:0] _269_;
  wire _270_;
  wire [3:0] _271_;
  wire _272_;
  wire [3:0] _273_;
  wire _274_;
  wire [3:0] _275_;
  wire _276_;
  wire [3:0] _277_;
  wire _278_;
  wire _279_;
  wire _280_;
  wire _281_;
  wire _282_;
  wire _283_;
  wire _284_;
  wire _285_;
  wire _286_;
  wire _287_;
  wire _288_;
  wire _289_;
  wire _290_;
  wire _291_;
  wire _292_;
  wire _293_;
  wire _294_;
  wire [3:0] _295_;
  wire _296_;
  wire [3:0] _297_;
  wire _298_;
  wire [3:0] _299_;
  wire _300_;
  wire _301_;
  wire _302_;
  wire _303_;
  wire _304_;
  wire _305_;
  wire _306_;
  wire _307_;
  wire _308_;
  wire _309_;
  wire _310_;
  wire _311_;
  wire _312_;
  wire _313_;
  wire _314_;
  wire _315_;
  wire _316_;
  wire _317_;
  wire _318_;
  wire _319_;
  wire _320_;
  wire _321_;
  wire _322_;
  wire _323_;
  wire _324_;
  wire _325_;
  wire _326_;
  wire _327_;
  wire _328_;
  wire _329_;
  wire _330_;
  wire _331_;
  wire _332_;
  wire _333_;
  wire _334_;
  wire _335_;
  wire _336_;
  wire _337_;
  wire _338_;
  wire [15:0] _339_;
  wire _340_;
  wire [15:0] _341_;
  wire _342_;
  wire [7:0] _343_;
  wire _344_;
  wire [7:0] _345_;
  wire _346_;
  wire [7:0] _347_;
  wire _348_;
  wire _349_;
  wire _350_;
  wire _351_;
  wire _352_;
  wire _353_;
  wire _354_;
  wire _355_;
  wire _356_;
  wire [7:0] _357_;
  wire _358_;
  wire [7:0] _359_;
  wire _360_;
  wire [7:0] _361_;
  wire _362_;
  wire _363_;
  wire _364_;
  wire _365_;
  wire _366_;
  input clk;
  wire clk;
  wire crc16_clr;
  output crc16_err;
  wire crc16_err;
  wire [15:0] crc16_out;
  reg [15:0] crc16_sum;
  output crc5_err;
  wire crc5_err;
  wire [4:0] crc5_out;
  wire [4:0] crc5_out2;
  reg [7:0] d0;
  reg [7:0] d1;
  reg [7:0] d2;
  wire data_done;
  reg data_valid0;
  wire data_valid_d;
  output [10:0] frame_no;
  wire [10:0] frame_no;
  wire [3:0] next_state;
  reg [7:0] pid;
  output pid_ACK;
  wire pid_ACK;
  wire pid_DATA;
  output pid_DATA0;
  wire pid_DATA0;
  output pid_DATA1;
  wire pid_DATA1;
  output pid_DATA2;
  wire pid_DATA2;
  output pid_ERR;
  wire pid_ERR;
  output pid_IN;
  wire pid_IN;
  output pid_MDATA;
  wire pid_MDATA;
  output pid_NACK;
  wire pid_NACK;
  output pid_NYET;
  wire pid_NYET;
  output pid_OUT;
  wire pid_OUT;
  output pid_PING;
  wire pid_PING;
  output pid_PRE;
  wire pid_PRE;
  wire pid_RES;
  output pid_SETUP;
  wire pid_SETUP;
  output pid_SOF;
  wire pid_SOF;
  output pid_SPLIT;
  wire pid_SPLIT;
  output pid_STALL;
  wire pid_STALL;
  wire pid_TOKEN;
  wire pid_ack;
  output pid_cks_err;
  wire pid_cks_err;
  wire pid_ld_en;
  wire pid_le_sm;
  input rst;
  wire rst;
  input rx_active;
  wire rx_active;
  reg rx_active_r;
  output rx_busy;
  reg rx_busy;
  reg rx_busy_d;
  input [7:0] rx_data;
  wire [7:0] rx_data;
  output rx_data_done;
  wire rx_data_done;
  output [7:0] rx_data_st;
  wire [7:0] rx_data_st;
  output rx_data_valid;
  wire rx_data_valid;
  input rx_err;
  wire rx_err;
  input rx_valid;
  wire rx_valid;
  reg rxv1;
  reg rxv2;
  output seq_err;
  wire seq_err;
  reg [3:0] state;
  reg [7:0] token0;
  reg [7:0] token1;
  wire [4:0] token_crc5;
  output [3:0] token_endp;
  wire [3:0] token_endp;
  output [6:0] token_fadr;
  wire [6:0] token_fadr;
  wire token_le_1;
  wire token_le_2;
  output token_valid;
  wire token_valid;
  reg token_valid_r1;
  reg token_valid_str1;
  reg token_valid_str2;
  assign _060_ = rx_valid & _081_;
  assign _061_ = pid_le_sm & rx_active;
  assign _062_ = _061_ & rx_valid;
  assign _063_ = token_valid & _122_;
  assign _064_ = rxv1 & data_valid_d;
  assign _065_ = rxv2 & data_valid_d;
  assign _066_ = rx_active & _103_;
  assign _067_ = data_done & _123_;
  assign _068_ = rx_valid & rx_active;
  assign _069_ = pid_ACK & _105_;
  assign _070_ = pid_TOKEN & rx_valid;
  assign _071_ = _070_ & rx_active;
  assign _072_ = _071_ & _107_;
  assign _073_ = pid_DATA & rx_valid;
  assign _074_ = _073_ & rx_active;
  assign _075_ = _074_ & _108_;
  assign _076_ = rx_valid & _110_;
  assign _077_ = rx_valid & rx_active;
  assign _078_ = _077_ & _113_;
  assign _079_ = rx_valid & rx_active;
  assign _080_ = _079_ & _117_;
  assign _081_ = state == 4'h8;
  assign _082_ = pid[3:0] == 4'h1;
  assign _083_ = pid[3:0] == 4'h9;
  assign _084_ = pid[3:0] == 4'h5;
  assign _085_ = pid[3:0] == 4'hd;
  assign _086_ = pid[3:0] == 4'h3;
  assign _087_ = pid[3:0] == 4'hb;
  assign _088_ = pid[3:0] == 4'h7;
  assign _089_ = pid[3:0] == 4'hf;
  assign _090_ = pid[3:0] == 4'h2;
  assign _091_ = pid[3:0] == 4'ha;
  assign _092_ = pid[3:0] == 4'he;
  assign _093_ = pid[3:0] == 4'h6;
  assign _094_ = pid[3:0] == 4'hc;
  assign _095_ = pid[3:0] == 4'hc;
  assign _096_ = pid[3:0] == 4'h8;
  assign _097_ = pid[3:0] == 4'h4;
  assign _098_ = ! pid[3:0];
  assign _099_ = ! rst;
  assign _100_ = ! rst;
  assign _101_ = ! rst;
  assign _102_ = ! rst;
  assign _103_ = ! rx_active_r;
  assign _104_ = ! rst;
  assign _105_ = ! rx_err;
  assign _106_ = ! rx_active;
  assign _107_ = ! rx_err;
  assign _108_ = ! rx_err;
  assign _109_ = ! rx_active;
  assign _110_ = ! _136_;
  assign _111_ = ! rx_err;
  assign _112_ = ! rx_active;
  assign _113_ = ! rx_err;
  assign _114_ = ! rx_active;
  assign _115_ = ! rx_err;
  assign _116_ = ! rx_active;
  assign _117_ = ! rx_err;
  assign _118_ = ! rx_active;
  assign _119_ = ! rx_active;
  assign _120_ = state != 4'h8;
  assign _121_ = pid[3:0] != _124_;
  assign _122_ = crc5_out2 != token_crc5;
  assign _123_ = crc16_sum != 16'h800d;
  assign _124_ = ~ pid[7:4];
  assign _125_ = ~ { crc5_out[0], crc5_out[1], crc5_out[2], crc5_out[3], crc5_out[4] };
  assign _126_ = pid_OUT | pid_IN;
  assign _127_ = _126_ | pid_SOF;
  assign _128_ = _127_ | pid_SETUP;
  assign _129_ = _128_ | pid_PING;
  assign _130_ = pid_DATA0 | pid_DATA1;
  assign _131_ = _130_ | pid_DATA2;
  assign _132_ = _131_ | pid_MDATA;
  assign _133_ = token_valid_r1 | pid_ack;
  assign _134_ = _109_ | rx_err;
  assign _135_ = _134_ | _076_;
  assign _136_ = pid_TOKEN | pid_DATA;
  assign _137_ = _114_ | rx_err;
  assign _138_ = _118_ | rx_err;
  always @(posedge clk, negedge rst)
    if (!rst) state <= 4'h1;
    else state <= _299_;
  always @(posedge clk)
    crc16_sum <= _341_;
  always @(posedge clk)
    rx_active_r <= rx_active;
  always @(posedge clk)
    d0 <= _347_;
  always @(posedge clk)
    d1 <= _345_;
  always @(posedge clk)
    d2 <= _343_;
  always @(posedge clk)
    data_valid0 <= _065_;
  always @(posedge clk, negedge rst)
    if (!rst) rxv2 <= 1'h0;
    else rxv2 <= _351_;
  always @(posedge clk, negedge rst)
    if (!rst) rxv1 <= 1'h0;
    else rxv1 <= _355_;
  always @(posedge clk)
    token_valid_str2 <= token_valid_str1;
  always @(posedge clk)
    token_valid_str1 <= _133_;
  always @(posedge clk)
    token_valid_r1 <= _324_;
  always @(posedge clk)
    token1 <= _357_;
  always @(posedge clk)
    token0 <= _359_;
  always @(posedge clk, negedge rst)
    if (!rst) pid <= 8'hf0;
    else pid <= _361_;
  always @(posedge clk)
    rx_busy <= rx_busy_d;
  always @(posedge clk, negedge rst)
    if (!rst) rx_busy_d <= 1'h0;
    else rx_busy_d <= _365_;
  assign _139_ = rx_active ? state : 4'h1;
  assign _141_ = _142_ ? _139_ : 4'hx;
  assign _143_ = _144_ ? _141_ : 4'hx;
  assign _144_ = state == 4'h8;
  assign _145_ = _146_ ? _028_ : state;
  assign _147_ = _148_ ? _145_ : 4'hx;
  assign _148_ = state == 4'h8;
  assign _149_ = _150_ ? 1'h1 : 1'h0;
  assign _151_ = _152_ ? _149_ : 1'hx;
  assign _152_ = state == 4'h8;
  assign _153_ = _154_ ? 1'h1 : 1'h0;
  assign _155_ = _156_ ? _153_ : 1'hx;
  assign _156_ = state == 4'h8;
  assign _157_ = rx_active ? state : 4'h1;
  assign _159_ = _160_ ? _157_ : 4'hx;
  assign _161_ = _162_ ? 4'hx : _159_;
  assign _163_ = _164_ ? _161_ : 4'hx;
  assign _164_ = state == 4'h4;
  assign _165_ = _166_ ? _026_ : state;
  assign _167_ = _168_ ? 4'hx : _165_;
  assign _169_ = _170_ ? _167_ : 4'hx;
  assign _170_ = state == 4'h4;
  assign _171_ = _172_ ? _115_ : 1'h0;
  assign _173_ = _174_ ? 1'hx : _171_;
  assign _175_ = _176_ ? _173_ : 1'hx;
  assign _176_ = state == 4'h4;
  assign _177_ = _178_ ? 4'h1 : _025_;
  assign _179_ = _180_ ? _177_ : 4'hx;
  assign _180_ = state == 4'h4;
  assign _181_ = _182_ ? 1'h1 : 1'h0;
  assign _183_ = _184_ ? _181_ : 1'hx;
  assign _184_ = state == 4'h4;
  assign _185_ = _186_ ? 1'h0 : _057_;
  assign _187_ = _188_ ? _185_ : 1'hx;
  assign _188_ = state == 4'h4;
  assign _189_ = rx_active ? state : 4'h1;
  assign _191_ = _192_ ? _189_ : 4'hx;
  assign _193_ = _194_ ? 4'hx : _191_;
  assign _195_ = _196_ ? 4'hx : _193_;
  assign _197_ = _198_ ? 4'hx : _195_;
  assign _199_ = _200_ ? _197_ : 4'hx;
  assign _200_ = state == 4'h2;
  assign _201_ = _202_ ? _058_ : state;
  assign _203_ = _204_ ? 4'hx : _201_;
  assign _205_ = _206_ ? 4'hx : _203_;
  assign _207_ = _208_ ? 4'hx : _205_;
  assign _209_ = _210_ ? _207_ : 4'hx;
  assign _210_ = state == 4'h2;
  assign _211_ = _212_ ? _111_ : 1'h0;
  assign _213_ = _214_ ? 1'hx : _211_;
  assign _215_ = _216_ ? 1'hx : _213_;
  assign _217_ = _218_ ? 1'hx : _215_;
  assign _219_ = _220_ ? _217_ : 1'hx;
  assign _220_ = state == 4'h2;
  assign _221_ = _222_ ? 4'h8 : _056_;
  assign _223_ = _224_ ? 4'hx : _221_;
  assign _225_ = _226_ ? 4'hx : _223_;
  assign _227_ = _228_ ? _225_ : 4'hx;
  assign _228_ = state == 4'h2;
  assign _229_ = _230_ ? 1'h1 : 1'h0;
  assign _231_ = _232_ ? 1'hx : _229_;
  assign _233_ = _234_ ? 1'hx : _231_;
  assign _235_ = _236_ ? _233_ : 1'hx;
  assign _236_ = state == 4'h2;
  assign _237_ = _238_ ? 1'h0 : _053_;
  assign _239_ = _240_ ? 1'hx : _237_;
  assign _241_ = _242_ ? 1'hx : _239_;
  assign _243_ = _244_ ? _241_ : 1'hx;
  assign _244_ = state == 4'h2;
  assign _245_ = _246_ ? 4'h4 : _054_;
  assign _247_ = _248_ ? 4'hx : _245_;
  assign _249_ = _250_ ? _247_ : 4'hx;
  assign _250_ = state == 4'h2;
  assign _251_ = _252_ ? 1'h1 : 1'h0;
  assign _253_ = _254_ ? 1'hx : _251_;
  assign _255_ = _256_ ? _253_ : 1'hx;
  assign _256_ = state == 4'h2;
  assign _257_ = _258_ ? 1'h0 : _048_;
  assign _259_ = _260_ ? 1'hx : _257_;
  assign _261_ = _262_ ? _259_ : 1'hx;
  assign _262_ = state == 4'h2;
  assign _263_ = _264_ ? 1'h0 : _050_;
  assign _265_ = _266_ ? 1'hx : _263_;
  assign _267_ = _268_ ? _265_ : 1'hx;
  assign _268_ = state == 4'h2;
  assign _269_ = rx_active ? state : 4'h1;
  assign _271_ = _272_ ? _269_ : 4'hx;
  assign _273_ = _274_ ? _271_ : 4'hx;
  assign _274_ = state == 4'h2;
  assign _275_ = _276_ ? _049_ : _052_;
  assign _277_ = _278_ ? _275_ : 4'hx;
  assign _278_ = state == 4'h2;
  assign _279_ = _280_ ? 1'h1 : 1'h0;
  assign _281_ = _282_ ? _279_ : 1'hx;
  assign _282_ = state == 4'h2;
  assign _283_ = _284_ ? 1'h0 : _044_;
  assign _285_ = _286_ ? _283_ : 1'hx;
  assign _286_ = state == 4'h2;
  assign _287_ = _288_ ? 1'h0 : _047_;
  assign _289_ = _290_ ? _287_ : 1'hx;
  assign _290_ = state == 4'h2;
  assign _291_ = _292_ ? 1'h0 : _046_;
  assign _293_ = _294_ ? _291_ : 1'hx;
  assign _294_ = state == 4'h2;
  assign _295_ = _296_ ? 4'h2 : state;
  assign _297_ = _298_ ? _295_ : 4'hx;
  assign _298_ = state == 4'h1;
  function [3:0] _570_;
    input [3:0] a;
    input [15:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _570_ = b[3:0];
      4'b??1?:
        _570_ = b[7:4];
      4'b?1??:
        _570_ = b[11:8];
      4'b1???:
        _570_ = b[15:12];
      default:
        _570_ = a;
    endcase
  endfunction
  assign _299_ = _570_(4'hx, { _039_, _045_, _059_, _027_ }, { _303_, _302_, _301_, _300_ });
  assign _300_ = state == 4'h8;
  assign _301_ = state == 4'h4;
  assign _302_ = state == 4'h2;
  assign _303_ = state == 4'h1;
  function [0:0] _575_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _575_ = b[0:0];
      4'b??1?:
        _575_ = b[1:1];
      4'b?1??:
        _575_ = b[2:2];
      4'b1???:
        _575_ = b[3:3];
      default:
        _575_ = a;
    endcase
  endfunction
  assign _304_ = _575_(1'hx, 4'h8, { _308_, _307_, _306_, _305_ });
  assign _305_ = state == 4'h8;
  assign _306_ = state == 4'h4;
  assign _307_ = state == 4'h2;
  assign _308_ = state == 4'h1;
  function [0:0] _580_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _580_ = b[0:0];
      4'b??1?:
        _580_ = b[1:1];
      4'b?1??:
        _580_ = b[2:2];
      4'b1???:
        _580_ = b[3:3];
      default:
        _580_ = a;
    endcase
  endfunction
  assign _309_ = _580_(1'hx, { 1'h0, _040_, 2'h0 }, { _313_, _312_, _311_, _310_ });
  assign _310_ = state == 4'h8;
  assign _311_ = state == 4'h4;
  assign _312_ = state == 4'h2;
  assign _313_ = state == 4'h1;
  function [0:0] _585_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _585_ = b[0:0];
      4'b??1?:
        _585_ = b[1:1];
      4'b?1??:
        _585_ = b[2:2];
      4'b1???:
        _585_ = b[3:3];
      default:
        _585_ = a;
    endcase
  endfunction
  assign _314_ = _585_(1'hx, { 3'h0, _037_ }, { _318_, _317_, _316_, _315_ });
  assign _315_ = state == 4'h8;
  assign _316_ = state == 4'h4;
  assign _317_ = state == 4'h2;
  assign _318_ = state == 4'h1;
  function [0:0] _590_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _590_ = b[0:0];
      4'b??1?:
        _590_ = b[1:1];
      4'b?1??:
        _590_ = b[2:2];
      4'b1???:
        _590_ = b[3:3];
      default:
        _590_ = a;
    endcase
  endfunction
  assign _319_ = _590_(1'hx, { 1'h0, _038_, 1'h0, _051_ }, { _323_, _322_, _321_, _320_ });
  assign _320_ = state == 4'h8;
  assign _321_ = state == 4'h4;
  assign _322_ = state == 4'h2;
  assign _323_ = state == 4'h1;
  function [0:0] _595_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _595_ = b[0:0];
      4'b??1?:
        _595_ = b[1:1];
      4'b?1??:
        _595_ = b[2:2];
      4'b1???:
        _595_ = b[3:3];
      default:
        _595_ = a;
    endcase
  endfunction
  assign _324_ = _595_(1'hx, { 2'h0, _043_, 1'h0 }, { _328_, _327_, _326_, _325_ });
  assign _325_ = state == 4'h8;
  assign _326_ = state == 4'h4;
  assign _327_ = state == 4'h2;
  assign _328_ = state == 4'h1;
  function [0:0] _600_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _600_ = b[0:0];
      4'b??1?:
        _600_ = b[1:1];
      4'b?1??:
        _600_ = b[2:2];
      4'b1???:
        _600_ = b[3:3];
      default:
        _600_ = a;
    endcase
  endfunction
  assign _329_ = _600_(1'hx, { 1'h0, _042_, 2'h0 }, { _333_, _332_, _331_, _330_ });
  assign _330_ = state == 4'h8;
  assign _331_ = state == 4'h4;
  assign _332_ = state == 4'h2;
  assign _333_ = state == 4'h1;
  function [0:0] _605_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _605_ = b[0:0];
      4'b??1?:
        _605_ = b[1:1];
      4'b?1??:
        _605_ = b[2:2];
      4'b1???:
        _605_ = b[3:3];
      default:
        _605_ = a;
    endcase
  endfunction
  assign _334_ = _605_(1'hx, { 1'h0, _041_, _055_, 1'h0 }, { _338_, _337_, _336_, _335_ });
  assign _335_ = state == 4'h8;
  assign _336_ = state == 4'h4;
  assign _337_ = state == 4'h2;
  assign _338_ = state == 4'h1;
  assign _339_ = _340_ ? crc16_out : crc16_sum;
  assign _341_ = _342_ ? 16'hffff : _339_;
  assign _343_ = _344_ ? d1 : d2;
  assign _345_ = _346_ ? d0 : d1;
  assign _347_ = _348_ ? rx_data : d0;
  assign _349_ = _350_ ? 1'h0 : rxv2;
  assign _351_ = _352_ ? 1'h1 : _349_;
  assign _353_ = _354_ ? 1'h0 : rxv1;
  assign _355_ = _356_ ? 1'h1 : _353_;
  assign _357_ = _358_ ? rx_data : token1;
  assign _359_ = _360_ ? rx_data : token0;
  assign _361_ = _362_ ? rx_data : pid;
  assign _363_ = _364_ ? 1'h0 : rx_busy_d;
  assign _365_ = _366_ ? 1'h1 : _363_;
  usb1_crc5 u0 (
    .crc_in(5'h1f),
    .crc_out(crc5_out),
    .din({ token_fadr[0], token_fadr[1], token_fadr[2], token_fadr[3], token_fadr[4], token_fadr[5], token_fadr[6], token_endp[0], token_endp[1], token_endp[2], token_endp[3] })
  );
  usb1_crc16 u1 (
    .crc_in(crc16_sum),
    .crc_out(crc16_out),
    .din({ rx_data[0], rx_data[1], rx_data[2], rx_data[3], rx_data[4], rx_data[5], rx_data[6], rx_data[7] })
  );
  assign pid_ld_en = _062_;
  assign pid_cks_err = _121_;
  assign pid_OUT = _082_;
  assign pid_IN = _083_;
  assign pid_SOF = _084_;
  assign pid_SETUP = _085_;
  assign pid_DATA0 = _086_;
  assign pid_DATA1 = _087_;
  assign pid_DATA2 = _088_;
  assign pid_MDATA = _089_;
  assign pid_ACK = _090_;
  assign pid_NACK = _091_;
  assign pid_STALL = _092_;
  assign pid_NYET = _093_;
  assign pid_PRE = _094_;
  assign pid_ERR = _095_;
  assign pid_SPLIT = _096_;
  assign pid_PING = _097_;
  assign pid_RES = _098_;
  assign pid_TOKEN = _129_;
  assign pid_DATA = _132_;
  assign token_valid = token_valid_str1;
  assign crc5_err = _063_;
  assign crc5_out2 = _125_;
  assign frame_no = { token1[2:0], token0 };
  assign token_fadr = token0[6:0];
  assign token_endp = { token1[2:0], token0[7] };
  assign token_crc5 = token1[7:3];
  assign rx_data_st = d2;
  assign rx_data_valid = data_valid0;
  assign rx_data_done = data_done;
  assign crc16_clr = _066_;
  assign crc16_err = _067_;
  assign _009_ = _032_;
  assign _004_ = _029_;
  assign _006_ = _030_;
  assign _021_ = _036_;
  assign _020_ = _035_;
  assign _010_ = _033_;
  assign _016_ = _034_;
  assign _007_ = _031_;
  assign _011_ = rx_active;
  assign _005_ = _065_;
  assign _024_ = token_valid_str1;
  assign _023_ = _133_;
  assign _022_ = token_le_2;
  assign _012_ = rx_busy_d;
  assign _140_ = _119_;
  assign _142_ = _138_;
  assign _028_ = _143_;
  assign _146_ = _138_;
  assign _027_ = _147_;
  assign _150_ = _138_;
  assign _037_ = _151_;
  assign _154_ = _080_;
  assign _051_ = _155_;
  assign _158_ = _116_;
  assign _160_ = _137_;
  assign _162_ = _078_;
  assign _026_ = _163_;
  assign _166_ = _137_;
  assign _168_ = _078_;
  assign _025_ = _169_;
  assign _172_ = _137_;
  assign _174_ = _078_;
  assign _057_ = _175_;
  assign _178_ = _078_;
  assign _059_ = _179_;
  assign _182_ = _078_;
  assign _043_ = _183_;
  assign _186_ = _078_;
  assign _055_ = _187_;
  assign _190_ = _112_;
  assign _192_ = _135_;
  assign _194_ = _075_;
  assign _196_ = _072_;
  assign _198_ = _069_;
  assign _058_ = _199_;
  assign _202_ = _135_;
  assign _204_ = _075_;
  assign _206_ = _072_;
  assign _208_ = _069_;
  assign _056_ = _209_;
  assign _212_ = _135_;
  assign _214_ = _075_;
  assign _216_ = _072_;
  assign _218_ = _069_;
  assign _053_ = _219_;
  assign _222_ = _075_;
  assign _224_ = _072_;
  assign _226_ = _069_;
  assign _054_ = _227_;
  assign _230_ = _075_;
  assign _232_ = _072_;
  assign _234_ = _069_;
  assign _048_ = _235_;
  assign _238_ = _075_;
  assign _240_ = _072_;
  assign _242_ = _069_;
  assign _050_ = _243_;
  assign _246_ = _072_;
  assign _248_ = _069_;
  assign _052_ = _249_;
  assign _252_ = _072_;
  assign _254_ = _069_;
  assign _047_ = _255_;
  assign _258_ = _072_;
  assign _260_ = _069_;
  assign _044_ = _261_;
  assign _264_ = _072_;
  assign _266_ = _069_;
  assign _046_ = _267_;
  assign _270_ = _106_;
  assign _272_ = _069_;
  assign _049_ = _273_;
  assign _276_ = _069_;
  assign _045_ = _277_;
  assign _280_ = _069_;
  assign _040_ = _281_;
  assign _284_ = _069_;
  assign _038_ = _285_;
  assign _288_ = _069_;
  assign _042_ = _289_;
  assign _292_ = _069_;
  assign _041_ = _293_;
  assign _296_ = _068_;
  assign _039_ = _297_;
  assign _031_ = _299_;
  assign _033_ = _304_;
  assign _032_ = _309_;
  assign _029_ = _314_;
  assign _030_ = _319_;
  assign _036_ = _324_;
  assign _035_ = _329_;
  assign _034_ = _334_;
  assign _017_ = next_state;
  assign _340_ = data_valid_d;
  assign _342_ = crc16_clr;
  assign _000_ = _341_;
  assign _344_ = data_valid_d;
  assign _003_ = _343_;
  assign _346_ = data_valid_d;
  assign _002_ = _345_;
  assign _348_ = data_valid_d;
  assign _001_ = _347_;
  assign _350_ = data_done;
  assign _352_ = _064_;
  assign _015_ = _351_;
  assign _354_ = data_done;
  assign _356_ = data_valid_d;
  assign _014_ = _355_;
  assign _358_ = token_le_2;
  assign _019_ = _357_;
  assign _360_ = token_le_1;
  assign _018_ = _359_;
  assign _362_ = pid_ld_en;
  assign _008_ = _361_;
  assign _364_ = _120_;
  assign _366_ = _060_;
  assign _013_ = _365_;
  assign next_state = _299_;
  assign seq_err = _334_;
  assign pid_le_sm = _304_;
  assign token_le_1 = _329_;
  assign token_le_2 = _324_;
  assign data_valid_d = _319_;
  assign data_done = _314_;
  assign pid_ack = _309_;
endmodule

module usb1_pe(clk, rst, tx_valid, rx_active, pid_OUT, pid_IN, pid_SOF, pid_SETUP, pid_DATA0, pid_DATA1, pid_DATA2, pid_MDATA, pid_ACK, pid_PING, token_valid, rx_data_done, crc16_err, send_token, token_pid_sel, data_pid_sel, rx_dma_en
, tx_dma_en, abort, idma_done, fsel, ep_sel, match, nse_err, ep_full, ep_empty, int_upid_set, int_crc16_set, int_to_set, int_seqerr_set, csr, send_stall);
  wire _0000_;
  wire [1:0] _0001_;
  wire [1:0] _0002_;
  wire [1:0] _0003_;
  wire [1:0] _0004_;
  wire [1:0] _0005_;
  wire [1:0] _0006_;
  wire [1:0] _0007_;
  wire [1:0] _0008_;
  wire [1:0] _0009_;
  wire _0010_;
  wire _0011_;
  wire _0012_;
  wire _0013_;
  wire _0014_;
  wire [1:0] _0015_;
  wire [9:0] _0016_;
  wire _0017_;
  wire _0018_;
  wire _0019_;
  wire _0020_;
  wire _0021_;
  wire _0022_;
  wire _0023_;
  wire _0024_;
  wire _0025_;
  wire _0026_;
  wire [7:0] _0027_;
  wire _0028_;
  wire _0029_;
  wire _0030_;
  wire _0031_;
  wire _0032_;
  wire [9:0] _0033_;
  wire [1:0] _0034_;
  wire [1:0] _0035_;
  wire [1:0] _0036_;
  wire _0037_;
  wire [7:0] _0038_;
  wire _0039_;
  wire [1:0] _0040_;
  wire _0041_;
  wire _0042_;
  wire [9:0] _0043_;
  wire [9:0] _0044_;
  wire [9:0] _0045_;
  wire [9:0] _0046_;
  wire [9:0] _0047_;
  wire [9:0] _0048_;
  wire [9:0] _0049_;
  wire [9:0] _0050_;
  wire [1:0] _0051_;
  wire _0052_;
  wire [9:0] _0053_;
  wire _0054_;
  wire _0055_;
  wire _0056_;
  wire [1:0] _0057_;
  wire _0058_;
  wire _0059_;
  wire _0060_;
  wire [9:0] _0061_;
  wire _0062_;
  wire _0063_;
  wire [1:0] _0064_;
  wire _0065_;
  wire _0066_;
  wire [9:0] _0067_;
  wire _0068_;
  wire _0069_;
  wire [1:0] _0070_;
  wire _0071_;
  wire _0072_;
  wire [9:0] _0073_;
  wire _0074_;
  wire _0075_;
  wire [1:0] _0076_;
  wire _0077_;
  wire _0078_;
  wire [9:0] _0079_;
  wire _0080_;
  wire [1:0] _0081_;
  wire [9:0] _0082_;
  wire _0083_;
  wire [1:0] _0084_;
  wire [9:0] _0085_;
  wire _0086_;
  wire [1:0] _0087_;
  wire [9:0] _0088_;
  wire [9:0] _0089_;
  wire [7:0] _0090_;
  wire [7:0] _0091_;
  wire _0092_;
  wire _0093_;
  wire _0094_;
  wire _0095_;
  wire _0096_;
  wire _0097_;
  wire _0098_;
  wire _0099_;
  wire _0100_;
  wire _0101_;
  wire _0102_;
  wire _0103_;
  wire _0104_;
  wire _0105_;
  wire _0106_;
  wire _0107_;
  wire _0108_;
  wire _0109_;
  wire _0110_;
  wire _0111_;
  wire _0112_;
  wire _0113_;
  wire _0114_;
  wire _0115_;
  wire _0116_;
  wire _0117_;
  wire _0118_;
  wire _0119_;
  wire _0120_;
  wire _0121_;
  wire _0122_;
  wire _0123_;
  wire _0124_;
  wire _0125_;
  wire _0126_;
  wire _0127_;
  wire _0128_;
  wire _0129_;
  wire _0130_;
  wire _0131_;
  wire _0132_;
  wire _0133_;
  wire _0134_;
  wire _0135_;
  wire _0136_;
  wire _0137_;
  wire _0138_;
  wire _0139_;
  wire _0140_;
  wire _0141_;
  wire _0142_;
  wire _0143_;
  wire _0144_;
  wire _0145_;
  wire _0146_;
  wire _0147_;
  wire _0148_;
  wire _0149_;
  wire _0150_;
  wire _0151_;
  wire _0152_;
  wire _0153_;
  wire _0154_;
  wire _0155_;
  wire _0156_;
  wire _0157_;
  wire _0158_;
  wire _0159_;
  wire _0160_;
  wire _0161_;
  wire _0162_;
  wire _0163_;
  wire _0164_;
  wire _0165_;
  wire _0166_;
  wire _0167_;
  wire _0168_;
  wire _0169_;
  wire _0170_;
  wire _0171_;
  wire _0172_;
  wire _0173_;
  wire _0174_;
  wire _0175_;
  wire _0176_;
  wire _0177_;
  wire _0178_;
  wire _0179_;
  wire _0180_;
  wire _0181_;
  wire _0182_;
  wire _0183_;
  wire _0184_;
  wire _0185_;
  wire _0186_;
  wire [9:0] _0187_;
  wire _0188_;
  wire [9:0] _0189_;
  wire _0190_;
  wire [9:0] _0191_;
  wire _0192_;
  wire [9:0] _0193_;
  wire _0194_;
  wire [9:0] _0195_;
  wire _0196_;
  wire [9:0] _0197_;
  wire _0198_;
  wire [9:0] _0199_;
  wire _0200_;
  wire [9:0] _0201_;
  wire _0202_;
  wire [9:0] _0203_;
  wire _0204_;
  wire _0205_;
  wire _0206_;
  wire _0207_;
  wire _0208_;
  wire _0209_;
  wire _0210_;
  wire [1:0] _0211_;
  wire _0212_;
  wire [1:0] _0213_;
  wire _0214_;
  wire [1:0] _0215_;
  wire _0216_;
  wire [1:0] _0217_;
  wire _0218_;
  wire [9:0] _0219_;
  wire _0220_;
  wire [9:0] _0221_;
  wire _0222_;
  wire [9:0] _0223_;
  wire _0224_;
  wire _0225_;
  wire _0226_;
  wire _0227_;
  wire _0228_;
  wire _0229_;
  wire _0230_;
  wire [1:0] _0231_;
  wire _0232_;
  wire [1:0] _0233_;
  wire _0234_;
  wire [1:0] _0235_;
  wire _0236_;
  wire [9:0] _0237_;
  wire _0238_;
  wire [9:0] _0239_;
  wire _0240_;
  wire _0241_;
  wire _0242_;
  wire _0243_;
  wire _0244_;
  wire [1:0] _0245_;
  wire _0246_;
  wire [1:0] _0247_;
  wire _0248_;
  wire [9:0] _0249_;
  wire _0250_;
  wire [9:0] _0251_;
  wire _0252_;
  wire _0253_;
  wire _0254_;
  wire _0255_;
  wire _0256_;
  wire _0257_;
  wire _0258_;
  wire _0259_;
  wire _0260_;
  wire _0261_;
  wire _0262_;
  wire [9:0] _0263_;
  wire _0264_;
  wire [9:0] _0265_;
  wire _0266_;
  wire [9:0] _0267_;
  wire _0268_;
  wire [9:0] _0269_;
  wire _0270_;
  wire _0271_;
  wire _0272_;
  wire _0273_;
  wire _0274_;
  wire _0275_;
  wire _0276_;
  wire _0277_;
  wire _0278_;
  wire _0279_;
  wire _0280_;
  wire _0281_;
  wire _0282_;
  wire _0283_;
  wire _0284_;
  wire [9:0] _0285_;
  wire _0286_;
  wire [9:0] _0287_;
  wire _0288_;
  wire [9:0] _0289_;
  wire _0290_;
  wire [9:0] _0291_;
  wire _0292_;
  wire [9:0] _0293_;
  wire _0294_;
  wire _0295_;
  wire _0296_;
  wire _0297_;
  wire _0298_;
  wire [9:0] _0299_;
  wire _0300_;
  wire [9:0] _0301_;
  wire _0302_;
  wire [9:0] _0303_;
  wire _0304_;
  wire [9:0] _0305_;
  wire _0306_;
  wire [9:0] _0307_;
  wire _0308_;
  wire [9:0] _0309_;
  wire _0310_;
  wire [9:0] _0311_;
  wire _0312_;
  wire [9:0] _0313_;
  wire _0314_;
  wire [9:0] _0315_;
  wire _0316_;
  wire [9:0] _0317_;
  wire _0318_;
  wire [9:0] _0319_;
  wire _0320_;
  wire [9:0] _0321_;
  wire _0322_;
  wire [9:0] _0323_;
  wire _0324_;
  wire [9:0] _0325_;
  wire _0326_;
  wire _0327_;
  wire _0328_;
  wire _0329_;
  wire _0330_;
  wire _0331_;
  wire _0332_;
  wire _0333_;
  wire _0334_;
  wire [9:0] _0335_;
  wire _0336_;
  wire [9:0] _0337_;
  wire _0338_;
  wire [9:0] _0339_;
  wire _0340_;
  wire [9:0] _0341_;
  wire _0342_;
  wire _0343_;
  wire _0344_;
  wire _0345_;
  wire _0346_;
  wire _0347_;
  wire _0348_;
  wire _0349_;
  wire _0350_;
  wire [1:0] _0351_;
  wire _0352_;
  wire [1:0] _0353_;
  wire _0354_;
  wire [1:0] _0355_;
  wire _0356_;
  wire [1:0] _0357_;
  wire _0358_;
  wire _0359_;
  wire _0360_;
  wire _0361_;
  wire _0362_;
  wire _0363_;
  wire _0364_;
  wire _0365_;
  wire _0366_;
  wire _0367_;
  wire _0368_;
  wire _0369_;
  wire _0370_;
  wire _0371_;
  wire _0372_;
  wire [1:0] _0373_;
  wire _0374_;
  wire [1:0] _0375_;
  wire _0376_;
  wire [1:0] _0377_;
  wire _0378_;
  wire _0379_;
  wire _0380_;
  wire _0381_;
  wire _0382_;
  wire _0383_;
  wire _0384_;
  wire [9:0] _0385_;
  wire _0386_;
  wire [9:0] _0387_;
  wire _0388_;
  wire [9:0] _0389_;
  wire _0390_;
  wire _0391_;
  wire _0392_;
  wire _0393_;
  wire _0394_;
  wire _0395_;
  wire _0396_;
  wire _0397_;
  wire _0398_;
  wire _0399_;
  wire _0400_;
  wire [1:0] _0401_;
  wire _0402_;
  wire [1:0] _0403_;
  wire _0404_;
  wire _0405_;
  wire _0406_;
  wire _0407_;
  wire _0408_;
  wire _0409_;
  wire _0410_;
  wire _0411_;
  wire _0412_;
  wire [9:0] _0413_;
  wire _0414_;
  wire [9:0] _0415_;
  wire _0416_;
  wire _0417_;
  wire _0418_;
  wire _0419_;
  wire _0420_;
  wire _0421_;
  wire _0422_;
  wire _0423_;
  wire _0424_;
  wire _0425_;
  wire _0426_;
  wire [1:0] _0427_;
  wire _0428_;
  wire _0429_;
  wire _0430_;
  wire _0431_;
  wire _0432_;
  wire _0433_;
  wire _0434_;
  wire _0435_;
  wire _0436_;
  wire _0437_;
  wire _0438_;
  wire _0439_;
  wire _0440_;
  wire _0441_;
  wire _0442_;
  wire _0443_;
  wire _0444_;
  wire _0445_;
  wire _0446_;
  wire _0447_;
  wire _0448_;
  wire _0449_;
  wire _0450_;
  wire _0451_;
  wire _0452_;
  wire _0453_;
  wire _0454_;
  wire _0455_;
  wire _0456_;
  wire [9:0] _0457_;
  wire _0458_;
  wire _0459_;
  wire _0460_;
  wire _0461_;
  wire _0462_;
  wire _0463_;
  wire _0464_;
  wire _0465_;
  wire _0466_;
  wire _0467_;
  wire _0468_;
  wire _0469_;
  wire _0470_;
  wire _0471_;
  wire _0472_;
  wire _0473_;
  wire _0474_;
  wire _0475_;
  wire _0476_;
  wire _0477_;
  wire _0478_;
  wire _0479_;
  wire _0480_;
  wire _0481_;
  wire _0482_;
  wire _0483_;
  wire _0484_;
  wire _0485_;
  wire _0486_;
  wire _0487_;
  wire _0488_;
  wire _0489_;
  wire _0490_;
  wire _0491_;
  wire _0492_;
  wire _0493_;
  wire _0494_;
  wire _0495_;
  wire _0496_;
  wire [9:0] _0497_;
  wire _0498_;
  wire _0499_;
  wire _0500_;
  wire _0501_;
  wire _0502_;
  wire [7:0] _0503_;
  wire _0504_;
  wire [7:0] _0505_;
  wire _0506_;
  wire _0507_;
  wire _0508_;
  wire _0509_;
  wire _0510_;
  wire _0511_;
  wire _0512_;
  wire _0513_;
  wire _0514_;
  wire _0515_;
  wire _0516_;
  wire _0517_;
  wire _0518_;
  wire [1:0] _0519_;
  wire _0520_;
  wire _0521_;
  wire _0522_;
  wire _0523_;
  wire _0524_;
  wire [1:0] _0525_;
  wire _0526_;
  wire [1:0] _0527_;
  wire _0528_;
  wire [1:0] _0529_;
  wire _0530_;
  wire [1:0] _0531_;
  wire _0532_;
  wire [1:0] _0533_;
  wire _0534_;
  wire _0535_;
  wire _0536_;
  wire _0537_;
  wire _0538_;
  wire _0539_;
  wire _0540_;
  wire _0541_;
  wire _0542_;
  wire _0543_;
  wire _0544_;
  wire _0545_;
  wire _0546_;
  wire _0547_;
  wire [1:0] _0548_;
  wire _0549_;
  wire _0550_;
  wire _0551_;
  wire _0552_;
  wire [1:0] _0553_;
  wire _0554_;
  wire _0555_;
  wire _0556_;
  wire _0557_;
  wire _0558_;
  wire [1:0] _0559_;
  wire _0560_;
  wire [1:0] _0561_;
  wire _0562_;
  wire [1:0] _0563_;
  wire _0564_;
  wire [1:0] _0565_;
  wire _0566_;
  wire [1:0] _0567_;
  wire _0568_;
  wire [1:0] _0569_;
  wire _0570_;
  wire _0571_;
  wire _0572_;
  wire [1:0] _0573_;
  wire _0574_;
  wire _0575_;
  wire _0576_;
  wire [1:0] _0577_;
  wire _0578_;
  wire _0579_;
  wire _0580_;
  wire [1:0] _0581_;
  wire _0582_;
  wire _0583_;
  wire _0584_;
  wire _0585_;
  wire _0586_;
  wire _0587_;
  wire _0588_;
  wire _0589_;
  wire _0590_;
  wire _0591_;
  wire [1:0] _0592_;
  wire _0593_;
  wire _0594_;
  wire _0595_;
  wire _0596_;
  wire _0597_;
  wire _0598_;
  wire _0599_;
  wire _0600_;
  wire [1:0] _0601_;
  wire _0602_;
  wire [1:0] _0603_;
  wire _0604_;
  wire [1:0] _0605_;
  wire _0606_;
  wire [1:0] _0607_;
  wire _0608_;
  wire [1:0] _0609_;
  wire _0610_;
  wire [1:0] _0611_;
  wire _0612_;
  wire [1:0] _0613_;
  wire _0614_;
  wire [1:0] _0615_;
  wire _0616_;
  wire CTRL_ep;
  wire IN_ep;
  wire OUT_ep;
  output abort;
  reg abort;
  wire [1:0] allow_pid;
  wire buf_smaller;
  input clk;
  wire clk;
  input crc16_err;
  wire crc16_err;
  input [13:0] csr;
  wire [13:0] csr;
  output [1:0] data_pid_sel;
  wire [1:0] data_pid_sel;
  reg [1:0] ep0_dpid;
  reg [1:0] ep1_dpid;
  reg [1:0] ep2_dpid;
  reg [1:0] ep3_dpid;
  reg [1:0] ep4_dpid;
  reg [1:0] ep5_dpid;
  reg [1:0] ep6_dpid;
  reg [1:0] ep7_dpid;
  input ep_empty;
  wire ep_empty;
  input ep_full;
  wire ep_full;
  input [3:0] ep_sel;
  wire [3:0] ep_sel;
  wire [1:0] ep_type;
  input fsel;
  wire fsel;
  input idma_done;
  wire idma_done;
  wire in_op;
  reg in_token;
  output int_crc16_set;
  wire int_crc16_set;
  output int_seqerr_set;
  reg int_seqerr_set;
  wire int_seqerr_set_d;
  output int_to_set;
  wire int_to_set;
  output int_upid_set;
  reg int_upid_set;
  input match;
  wire match;
  reg match_r;
  wire [1:0] next_bsel;
  reg [1:0] next_dpid;
  wire [9:0] next_state;
  output nse_err;
  reg nse_err;
  wire out_op;
  reg out_token;
  input pid_ACK;
  wire pid_ACK;
  input pid_DATA0;
  wire pid_DATA0;
  input pid_DATA1;
  wire pid_DATA1;
  input pid_DATA2;
  wire pid_DATA2;
  input pid_IN;
  wire pid_IN;
  reg pid_IN_r;
  input pid_MDATA;
  wire pid_MDATA;
  input pid_OUT;
  wire pid_OUT;
  reg pid_OUT_r;
  input pid_PING;
  wire pid_PING;
  reg pid_PING_r;
  input pid_SETUP;
  wire pid_SETUP;
  reg pid_SETUP_r;
  input pid_SOF;
  wire pid_SOF;
  reg pid_seq_err;
  input rst;
  wire rst;
  reg rx_ack_to;
  reg rx_ack_to_clr;
  wire rx_ack_to_clr_d;
  reg [7:0] rx_ack_to_cnt;
  wire [7:0] rx_ack_to_val;
  input rx_active;
  wire rx_active;
  input rx_data_done;
  wire rx_data_done;
  output rx_dma_en;
  wire rx_dma_en;
  input send_stall;
  wire send_stall;
  reg send_stall_r;
  output send_token;
  reg send_token;
  wire send_token_d;
  reg setup_token;
  wire [13:0] size_next;
  reg [9:0] state;
  reg [1:0] this_dpid;
  output [1:0] token_pid_sel;
  reg [1:0] token_pid_sel;
  wire [1:0] token_pid_sel_d;
  input token_valid;
  wire token_valid;
  wire [1:0] tr_fr_d;
  reg tx_data_to;
  wire tx_data_to_clr;
  reg [7:0] tx_data_to_cnt;
  wire [7:0] tx_data_to_val;
  output tx_dma_en;
  wire tx_dma_en;
  input tx_valid;
  wire tx_valid;
  wire txfr_bulk;
  wire txfr_int;
  wire txfr_iso;
  wire [1:0] txfr_type;
  reg [1:0] uc_dpd;
  reg uc_dpd_set;
  wire uc_stat_set_d;
  assign _0090_ = rx_ack_to_cnt + 8'h01;
  assign _0091_ = tx_data_to_cnt + 8'h01;
  assign _0092_ = _0141_ & _0142_;
  assign _0093_ = match & fsel;
  assign _0094_ = token_valid & _0165_;
  assign _0095_ = _0094_ & _0143_;
  assign _0096_ = uc_dpd_set & _0125_;
  assign _0097_ = uc_dpd_set & _0126_;
  assign _0098_ = uc_dpd_set & _0127_;
  assign _0099_ = uc_dpd_set & _0128_;
  assign _0100_ = uc_dpd_set & _0129_;
  assign _0101_ = uc_dpd_set & _0130_;
  assign _0102_ = uc_dpd_set & _0131_;
  assign _0103_ = uc_dpd_set & _0132_;
  assign _0104_ = _0133_ & pid_DATA0;
  assign _0105_ = _0134_ & pid_DATA1;
  assign _0106_ = _0135_ & pid_DATA2;
  assign _0107_ = _0136_ & pid_MDATA;
  assign _0108_ = CTRL_ep & in_token;
  assign _0109_ = CTRL_ep & out_token;
  assign _0110_ = match & fsel;
  assign _0111_ = _0110_ & _0163_;
  assign _0112_ = match_r & _0156_;
  assign _0113_ = _0112_ & _0177_;
  assign _0114_ = OUT_ep & _0157_;
  assign _0115_ = IN_ep & _0158_;
  assign _0116_ = CTRL_ep & _0159_;
  assign _0117_ = _0139_ & rx_ack_to;
  assign _0118_ = _0140_ & tx_data_to;
  assign _0119_ = rx_data_done & crc16_err;
  assign _0120_ = match_r & _0162_;
  assign _0121_ = CTRL_ep & pid_IN;
  assign _0122_ = txfr_int & ep_empty;
  assign _0123_ = CTRL_ep & _0183_;
  assign _0124_ = token_valid & pid_ACK;
  assign _0125_ = ! ep_sel;
  assign _0126_ = ep_sel == 4'h1;
  assign _0127_ = ep_sel == 4'h2;
  assign _0128_ = ep_sel == 4'h3;
  assign _0129_ = ep_sel == 4'h4;
  assign _0130_ = ep_sel == 4'h5;
  assign _0131_ = ep_sel == 4'h6;
  assign _0132_ = ep_sel == 4'h7;
  assign _0133_ = ! this_dpid;
  assign _0134_ = this_dpid == 2'h1;
  assign _0135_ = this_dpid == 2'h2;
  assign _0136_ = this_dpid == 2'h3;
  assign _0137_ = rx_ack_to_cnt == 8'hc8;
  assign _0138_ = tx_data_to_cnt == 8'hc8;
  assign _0139_ = state == 10'h008;
  assign _0140_ = state == 10'h010;
  assign _0141_ = ! csr[12];
  assign _0142_ = ! csr[13];
  assign _0143_ = ! match;
  assign _0144_ = ! rst;
  assign _0145_ = ! rst;
  assign _0146_ = ! rst;
  assign _0147_ = ! rst;
  assign _0148_ = ! rst;
  assign _0149_ = ! rst;
  assign _0150_ = ! rst;
  assign _0151_ = ! rst;
  assign _0152_ = ! _0168_;
  assign _0153_ = ! rst;
  assign _0154_ = ! rst;
  assign _0155_ = ! rst;
  assign _0156_ = ! pid_SOF;
  assign _0157_ = ! _0175_;
  assign _0158_ = ! pid_IN_r;
  assign _0159_ = ! _0180_;
  assign _0160_ = ! rst;
  assign _0161_ = ! rst;
  assign _0162_ = ! pid_SOF;
  assign _0163_ = state != 10'h001;
  assign _0164_ = pid_OUT | pid_IN;
  assign _0165_ = _0164_ | pid_SETUP;
  assign _0166_ = _0104_ | _0105_;
  assign _0167_ = _0166_ | _0106_;
  assign _0168_ = _0167_ | _0107_;
  assign _0169_ = pid_OUT | pid_SETUP;
  assign _0170_ = pid_OUT | pid_SETUP;
  assign _0171_ = pid_OUT | pid_IN;
  assign _0172_ = IN_ep | _0108_;
  assign _0173_ = OUT_ep | _0109_;
  assign _0174_ = tx_valid | rx_ack_to_clr_d;
  assign _0175_ = pid_OUT_r | pid_PING_r;
  assign _0176_ = _0114_ | _0115_;
  assign _0177_ = _0176_ | _0116_;
  assign _0178_ = pid_IN_r | pid_OUT_r;
  assign _0179_ = _0178_ | pid_PING_r;
  assign _0180_ = _0179_ | pid_SETUP_r;
  assign _0181_ = _0117_ | _0118_;
  assign _0182_ = IN_ep | _0121_;
  assign _0183_ = pid_OUT | pid_SETUP;
  assign _0184_ = OUT_ep | _0123_;
  assign _0185_ = tx_data_to | crc16_err;
  assign _0186_ = _0185_ | abort;
  always @(posedge clk, negedge rst)
    if (!rst) state <= 10'h001;
    else state <= _0497_;
  always @(posedge clk, negedge rst)
    if (!rst) send_stall_r <= 1'h0;
    else send_stall_r <= _0501_;
  always @(posedge clk)
    int_seqerr_set <= _0487_;
  always @(posedge clk)
    int_upid_set <= _0113_;
  always @(posedge clk)
    pid_SETUP_r <= pid_SETUP;
  always @(posedge clk)
    pid_PING_r <= pid_PING;
  always @(posedge clk)
    pid_IN_r <= pid_IN;
  always @(posedge clk)
    pid_OUT_r <= pid_OUT;
  always @(posedge clk)
    tx_data_to <= _0138_;
  always @(posedge clk)
    tx_data_to_cnt <= _0503_;
  always @(posedge clk)
    rx_ack_to <= _0137_;
  always @(posedge clk)
    rx_ack_to_cnt <= _0505_;
  always @(posedge clk)
    rx_ack_to_clr <= _0174_;
  always @(posedge clk)
    abort <= _0111_;
  always @(posedge clk)
    uc_dpd_set <= _0467_;
  always @(posedge clk, negedge rst)
    if (!rst) setup_token <= 1'h0;
    else setup_token <= _0509_;
  always @(posedge clk, negedge rst)
    if (!rst) out_token <= 1'h0;
    else out_token <= _0513_;
  always @(posedge clk, negedge rst)
    if (!rst) in_token <= 1'h0;
    else in_token <= _0517_;
  always @(posedge clk)
    pid_seq_err <= _0152_;
  always @(posedge clk)
    this_dpid <= _0525_;
  always @(posedge clk)
    next_dpid <= _0559_;
  always @(posedge clk)
    uc_dpd <= _0592_;
  always @(posedge clk, negedge rst)
    if (!rst) ep7_dpid <= 2'h0;
    else ep7_dpid <= _0601_;
  always @(posedge clk, negedge rst)
    if (!rst) ep6_dpid <= 2'h0;
    else ep6_dpid <= _0603_;
  always @(posedge clk, negedge rst)
    if (!rst) ep5_dpid <= 2'h0;
    else ep5_dpid <= _0605_;
  always @(posedge clk, negedge rst)
    if (!rst) ep4_dpid <= 2'h0;
    else ep4_dpid <= _0607_;
  always @(posedge clk, negedge rst)
    if (!rst) ep3_dpid <= 2'h0;
    else ep3_dpid <= _0609_;
  always @(posedge clk, negedge rst)
    if (!rst) ep2_dpid <= 2'h0;
    else ep2_dpid <= _0611_;
  always @(posedge clk, negedge rst)
    if (!rst) ep1_dpid <= 2'h0;
    else ep1_dpid <= _0613_;
  always @(posedge clk, negedge rst)
    if (!rst) ep0_dpid <= 2'h0;
    else ep0_dpid <= _0615_;
  always @(posedge clk)
    token_pid_sel <= _0427_;
  always @(posedge clk)
    send_token <= _0417_;
  always @(posedge clk)
    nse_err <= _0095_;
  always @(posedge clk)
    match_r <= _0093_;
  assign _0187_ = _0188_ ? 10'h001 : 10'h100;
  assign _0189_ = _0190_ ? 10'hxxx : _0187_;
  assign _0191_ = _0192_ ? 10'hxxx : _0189_;
  assign _0193_ = _0194_ ? 10'hxxx : _0191_;
  assign _0195_ = _0196_ ? _0193_ : 10'hxxx;
  assign _0196_ = state == 10'h020;
  assign _0197_ = _0198_ ? 10'h001 : _0050_;
  assign _0199_ = _0200_ ? 10'hxxx : _0197_;
  assign _0201_ = _0202_ ? 10'hxxx : _0199_;
  assign _0203_ = _0204_ ? _0201_ : 10'hxxx;
  assign _0204_ = state == 10'h020;
  assign _0205_ = _0206_ ? 1'hx : 1'h1;
  assign _0207_ = _0208_ ? 1'hx : _0205_;
  assign _0209_ = _0210_ ? _0207_ : 1'hx;
  assign _0210_ = state == 10'h020;
  assign _0211_ = _0212_ ? 2'h1 : 2'h0;
  assign _0213_ = _0214_ ? 2'hx : _0211_;
  assign _0215_ = _0216_ ? 2'hx : _0213_;
  assign _0217_ = _0218_ ? _0215_ : 2'hx;
  assign _0218_ = state == 10'h020;
  assign _0219_ = _0220_ ? 10'h001 : _0049_;
  assign _0221_ = _0222_ ? 10'hxxx : _0219_;
  assign _0223_ = _0224_ ? _0221_ : 10'hxxx;
  assign _0224_ = state == 10'h020;
  assign _0225_ = _0226_ ? 1'h1 : _0086_;
  assign _0227_ = _0228_ ? 1'hx : _0225_;
  assign _0229_ = _0230_ ? _0227_ : 1'hx;
  assign _0230_ = state == 10'h020;
  assign _0231_ = _0232_ ? 2'h2 : _0087_;
  assign _0233_ = _0234_ ? 2'hx : _0231_;
  assign _0235_ = _0236_ ? _0233_ : 2'hx;
  assign _0236_ = state == 10'h020;
  assign _0237_ = _0238_ ? 10'h001 : _0048_;
  assign _0239_ = _0240_ ? _0237_ : 10'hxxx;
  assign _0240_ = state == 10'h020;
  assign _0241_ = _0242_ ? 1'h0 : _0083_;
  assign _0243_ = _0244_ ? _0241_ : 1'hx;
  assign _0244_ = state == 10'h020;
  assign _0245_ = _0246_ ? 2'h0 : _0084_;
  assign _0247_ = _0248_ ? _0245_ : 2'hx;
  assign _0248_ = state == 10'h020;
  assign _0249_ = _0250_ ? 10'h001 : 10'h040;
  assign _0251_ = _0252_ ? _0249_ : 10'hxxx;
  assign _0252_ = state == 10'h040;
  assign _0253_ = _0254_ ? 1'h1 : 1'h0;
  assign _0255_ = _0256_ ? _0253_ : 1'hx;
  assign _0257_ = _0258_ ? _0255_ : 1'hx;
  assign _0259_ = _0260_ ? 1'hx : _0257_;
  assign _0261_ = _0262_ ? _0259_ : 1'hx;
  assign _0262_ = state == 10'h010;
  assign _0263_ = _0264_ ? 10'h080 : 10'h020;
  assign _0265_ = _0266_ ? _0263_ : 10'hxxx;
  assign _0267_ = _0268_ ? 10'hxxx : _0265_;
  assign _0269_ = _0270_ ? _0267_ : 10'hxxx;
  assign _0270_ = state == 10'h010;
  assign _0271_ = _0272_ ? _0078_ : 1'h0;
  assign _0273_ = _0274_ ? _0271_ : 1'hx;
  assign _0275_ = _0276_ ? 1'hx : _0273_;
  assign _0277_ = _0278_ ? _0275_ : 1'hx;
  assign _0278_ = state == 10'h010;
  assign _0279_ = _0280_ ? _0072_ : 1'h0;
  assign _0281_ = _0282_ ? 1'hx : _0279_;
  assign _0283_ = _0284_ ? _0281_ : 1'hx;
  assign _0284_ = state == 10'h010;
  assign _0285_ = _0286_ ? _0045_ : state;
  assign _0287_ = _0288_ ? 10'hxxx : _0285_;
  assign _0289_ = _0290_ ? _0287_ : 10'hxxx;
  assign _0290_ = state == 10'h010;
  assign _0291_ = _0292_ ? 10'h001 : _0044_;
  assign _0293_ = _0294_ ? _0291_ : 10'hxxx;
  assign _0294_ = state == 10'h010;
  assign _0295_ = _0296_ ? 1'h0 : _0066_;
  assign _0297_ = _0298_ ? _0295_ : 1'hx;
  assign _0298_ = state == 10'h010;
  assign _0299_ = _0300_ ? 10'h100 : state;
  assign _0301_ = _0302_ ? 10'hxxx : _0299_;
  assign _0303_ = _0304_ ? _0301_ : 10'hxxx;
  assign _0304_ = state == 10'h008;
  assign _0305_ = _0306_ ? 10'h001 : _0089_;
  assign _0307_ = _0308_ ? _0305_ : 10'hxxx;
  assign _0308_ = state == 10'h008;
  assign _0309_ = _0310_ ? 10'h100 : 10'h008;
  assign _0311_ = _0312_ ? _0309_ : 10'hxxx;
  assign _0313_ = _0314_ ? _0311_ : 10'hxxx;
  assign _0314_ = state == 10'h004;
  assign _0315_ = _0316_ ? _0085_ : state;
  assign _0317_ = _0318_ ? _0315_ : 10'hxxx;
  assign _0318_ = state == 10'h004;
  assign _0319_ = _0320_ ? 10'h010 : state;
  assign _0321_ = _0322_ ? 10'hxxx : _0319_;
  assign _0323_ = _0324_ ? _0321_ : 10'hxxx;
  assign _0325_ = _0326_ ? _0323_ : 10'hxxx;
  assign _0326_ = state == 10'h001;
  assign _0327_ = _0328_ ? 1'h1 : 1'h0;
  assign _0329_ = _0330_ ? 1'hx : _0327_;
  assign _0331_ = _0332_ ? _0329_ : 1'hx;
  assign _0333_ = _0334_ ? _0331_ : 1'hx;
  assign _0334_ = state == 10'h001;
  assign _0335_ = _0336_ ? 10'h002 : 10'h004;
  assign _0337_ = _0338_ ? _0335_ : 10'hxxx;
  assign _0339_ = _0340_ ? _0337_ : 10'hxxx;
  assign _0341_ = _0342_ ? _0339_ : 10'hxxx;
  assign _0342_ = state == 10'h001;
  assign _0343_ = _0344_ ? 1'h1 : 1'h0;
  assign _0345_ = _0346_ ? _0343_ : 1'hx;
  assign _0347_ = _0348_ ? _0345_ : 1'hx;
  assign _0349_ = _0350_ ? _0347_ : 1'hx;
  assign _0350_ = state == 10'h001;
  assign _0351_ = _0352_ ? 2'h1 : 2'h0;
  assign _0353_ = _0354_ ? _0351_ : 2'hx;
  assign _0355_ = _0356_ ? _0353_ : 2'hx;
  assign _0357_ = _0358_ ? _0355_ : 2'hx;
  assign _0358_ = state == 10'h001;
  assign _0359_ = _0360_ ? 1'h0 : 1'h1;
  assign _0361_ = _0362_ ? _0359_ : 1'hx;
  assign _0363_ = _0364_ ? _0361_ : 1'hx;
  assign _0365_ = _0366_ ? _0363_ : 1'hx;
  assign _0366_ = state == 10'h001;
  assign _0367_ = _0368_ ? _0075_ : 1'h0;
  assign _0369_ = _0370_ ? _0367_ : 1'hx;
  assign _0371_ = _0372_ ? _0369_ : 1'hx;
  assign _0372_ = state == 10'h001;
  assign _0373_ = _0374_ ? _0076_ : 2'h0;
  assign _0375_ = _0376_ ? _0373_ : 2'hx;
  assign _0377_ = _0378_ ? _0375_ : 2'hx;
  assign _0378_ = state == 10'h001;
  assign _0379_ = _0380_ ? _0077_ : 1'h0;
  assign _0381_ = _0382_ ? _0379_ : 1'hx;
  assign _0383_ = _0384_ ? _0381_ : 1'hx;
  assign _0384_ = state == 10'h001;
  assign _0385_ = _0386_ ? _0073_ : _0079_;
  assign _0387_ = _0388_ ? _0385_ : 10'hxxx;
  assign _0389_ = _0390_ ? _0387_ : 10'hxxx;
  assign _0390_ = state == 10'h001;
  assign _0391_ = _0392_ ? 1'h0 : _0074_;
  assign _0393_ = _0394_ ? _0391_ : 1'hx;
  assign _0395_ = _0396_ ? _0393_ : 1'hx;
  assign _0396_ = state == 10'h001;
  assign _0397_ = _0398_ ? _0069_ : 1'h0;
  assign _0399_ = _0400_ ? _0397_ : 1'hx;
  assign _0400_ = state == 10'h001;
  assign _0401_ = _0402_ ? _0070_ : 2'h0;
  assign _0403_ = _0404_ ? _0401_ : 2'hx;
  assign _0404_ = state == 10'h001;
  assign _0405_ = _0406_ ? _0068_ : 1'h0;
  assign _0407_ = _0408_ ? _0405_ : 1'hx;
  assign _0408_ = state == 10'h001;
  assign _0409_ = _0410_ ? _0071_ : 1'h0;
  assign _0411_ = _0412_ ? _0409_ : 1'hx;
  assign _0412_ = state == 10'h001;
  assign _0413_ = _0414_ ? _0067_ : state;
  assign _0415_ = _0416_ ? _0413_ : 10'hxxx;
  assign _0416_ = state == 10'h001;
  function [0:0] _0901_;
    input [0:0] a;
    input [8:0] b;
    input [8:0] s;
    casez (s) // synopsys parallel_case
      9'b????????1:
        _0901_ = b[0:0];
      9'b???????1?:
        _0901_ = b[1:1];
      9'b??????1??:
        _0901_ = b[2:2];
      9'b?????1???:
        _0901_ = b[3:3];
      9'b????1????:
        _0901_ = b[4:4];
      9'b???1?????:
        _0901_ = b[5:5];
      9'b??1??????:
        _0901_ = b[6:6];
      9'b?1???????:
        _0901_ = b[7:7];
      9'b1????????:
        _0901_ = b[8:8];
      default:
        _0901_ = a;
    endcase
  endfunction
  assign _0417_ = _0901_(1'hx, { _0063_, 5'h00, _0080_, 2'h0 }, { _0426_, _0425_, _0424_, _0423_, _0422_, _0421_, _0420_, _0419_, _0418_ });
  assign _0418_ = state == 10'h100;
  assign _0419_ = state == 10'h080;
  assign _0420_ = state == 10'h020;
  assign _0421_ = state == 10'h040;
  assign _0422_ = state == 10'h010;
  assign _0423_ = state == 10'h008;
  assign _0424_ = state == 10'h004;
  assign _0425_ = state == 10'h002;
  assign _0426_ = state == 10'h001;
  function [1:0] _0911_;
    input [1:0] a;
    input [17:0] b;
    input [8:0] s;
    casez (s) // synopsys parallel_case
      9'b????????1:
        _0911_ = b[1:0];
      9'b???????1?:
        _0911_ = b[3:2];
      9'b??????1??:
        _0911_ = b[5:4];
      9'b?????1???:
        _0911_ = b[7:6];
      9'b????1????:
        _0911_ = b[9:8];
      9'b???1?????:
        _0911_ = b[11:10];
      9'b??1??????:
        _0911_ = b[13:12];
      9'b?1???????:
        _0911_ = b[15:14];
      9'b1????????:
        _0911_ = b[17:16];
      default:
        _0911_ = a;
    endcase
  endfunction
  assign _0427_ = _0911_(2'hx, { _0064_, 10'h000, _0081_, 4'h0 }, { _0436_, _0435_, _0434_, _0433_, _0432_, _0431_, _0430_, _0429_, _0428_ });
  assign _0428_ = state == 10'h100;
  assign _0429_ = state == 10'h080;
  assign _0430_ = state == 10'h020;
  assign _0431_ = state == 10'h040;
  assign _0432_ = state == 10'h010;
  assign _0433_ = state == 10'h008;
  assign _0434_ = state == 10'h004;
  assign _0435_ = state == 10'h002;
  assign _0436_ = state == 10'h001;
  function [0:0] _0921_;
    input [0:0] a;
    input [8:0] b;
    input [8:0] s;
    casez (s) // synopsys parallel_case
      9'b????????1:
        _0921_ = b[0:0];
      9'b???????1?:
        _0921_ = b[1:1];
      9'b??????1??:
        _0921_ = b[2:2];
      9'b?????1???:
        _0921_ = b[3:3];
      9'b????1????:
        _0921_ = b[4:4];
      9'b???1?????:
        _0921_ = b[5:5];
      9'b??1??????:
        _0921_ = b[6:6];
      9'b?1???????:
        _0921_ = b[7:7];
      9'b1????????:
        _0921_ = b[8:8];
      default:
        _0921_ = a;
    endcase
  endfunction
  assign _0437_ = _0921_(1'hx, { _0062_, 8'h00 }, { _0446_, _0445_, _0444_, _0443_, _0442_, _0441_, _0440_, _0439_, _0438_ });
  assign _0438_ = state == 10'h100;
  assign _0439_ = state == 10'h080;
  assign _0440_ = state == 10'h020;
  assign _0441_ = state == 10'h040;
  assign _0442_ = state == 10'h010;
  assign _0443_ = state == 10'h008;
  assign _0444_ = state == 10'h004;
  assign _0445_ = state == 10'h002;
  assign _0446_ = state == 10'h001;
  function [0:0] _0931_;
    input [0:0] a;
    input [8:0] b;
    input [8:0] s;
    casez (s) // synopsys parallel_case
      9'b????????1:
        _0931_ = b[0:0];
      9'b???????1?:
        _0931_ = b[1:1];
      9'b??????1??:
        _0931_ = b[2:2];
      9'b?????1???:
        _0931_ = b[3:3];
      9'b????1????:
        _0931_ = b[4:4];
      9'b???1?????:
        _0931_ = b[5:5];
      9'b??1??????:
        _0931_ = b[6:6];
      9'b?1???????:
        _0931_ = b[7:7];
      9'b1????????:
        _0931_ = b[8:8];
      default:
        _0931_ = a;
    endcase
  endfunction
  assign _0447_ = _0931_(1'hx, { _0065_, 8'h00 }, { _0456_, _0455_, _0454_, _0453_, _0452_, _0451_, _0450_, _0449_, _0448_ });
  assign _0448_ = state == 10'h100;
  assign _0449_ = state == 10'h080;
  assign _0450_ = state == 10'h020;
  assign _0451_ = state == 10'h040;
  assign _0452_ = state == 10'h010;
  assign _0453_ = state == 10'h008;
  assign _0454_ = state == 10'h004;
  assign _0455_ = state == 10'h002;
  assign _0456_ = state == 10'h001;
  function [9:0] _0941_;
    input [9:0] a;
    input [89:0] b;
    input [8:0] s;
    casez (s) // synopsys parallel_case
      9'b????????1:
        _0941_ = b[9:0];
      9'b???????1?:
        _0941_ = b[19:10];
      9'b??????1??:
        _0941_ = b[29:20];
      9'b?????1???:
        _0941_ = b[39:30];
      9'b????1????:
        _0941_ = b[49:40];
      9'b???1?????:
        _0941_ = b[59:50];
      9'b??1??????:
        _0941_ = b[69:60];
      9'b?1???????:
        _0941_ = b[79:70];
      9'b1????????:
        _0941_ = b[89:80];
      default:
        _0941_ = a;
    endcase
  endfunction
  assign _0457_ = _0941_(10'hxxx, { _0061_, 10'h001, _0082_, _0088_, _0043_, _0046_, _0047_, 20'h40001 }, { _0466_, _0465_, _0464_, _0463_, _0462_, _0461_, _0460_, _0459_, _0458_ });
  assign _0458_ = state == 10'h100;
  assign _0459_ = state == 10'h080;
  assign _0460_ = state == 10'h020;
  assign _0461_ = state == 10'h040;
  assign _0462_ = state == 10'h010;
  assign _0463_ = state == 10'h008;
  assign _0464_ = state == 10'h004;
  assign _0465_ = state == 10'h002;
  assign _0466_ = state == 10'h001;
  function [0:0] _0951_;
    input [0:0] a;
    input [8:0] b;
    input [8:0] s;
    casez (s) // synopsys parallel_case
      9'b????????1:
        _0951_ = b[0:0];
      9'b???????1?:
        _0951_ = b[1:1];
      9'b??????1??:
        _0951_ = b[2:2];
      9'b?????1???:
        _0951_ = b[3:3];
      9'b????1????:
        _0951_ = b[4:4];
      9'b???1?????:
        _0951_ = b[5:5];
      9'b??1??????:
        _0951_ = b[6:6];
      9'b?1???????:
        _0951_ = b[7:7];
      9'b1????????:
        _0951_ = b[8:8];
      default:
        _0951_ = a;
    endcase
  endfunction
  assign _0467_ = _0951_(1'hx, 9'h001, { _0476_, _0475_, _0474_, _0473_, _0472_, _0471_, _0470_, _0469_, _0468_ });
  assign _0468_ = state == 10'h100;
  assign _0469_ = state == 10'h080;
  assign _0470_ = state == 10'h020;
  assign _0471_ = state == 10'h040;
  assign _0472_ = state == 10'h010;
  assign _0473_ = state == 10'h008;
  assign _0474_ = state == 10'h004;
  assign _0475_ = state == 10'h002;
  assign _0476_ = state == 10'h001;
  function [0:0] _0961_;
    input [0:0] a;
    input [8:0] b;
    input [8:0] s;
    casez (s) // synopsys parallel_case
      9'b????????1:
        _0961_ = b[0:0];
      9'b???????1?:
        _0961_ = b[1:1];
      9'b??????1??:
        _0961_ = b[2:2];
      9'b?????1???:
        _0961_ = b[3:3];
      9'b????1????:
        _0961_ = b[4:4];
      9'b???1?????:
        _0961_ = b[5:5];
      9'b??1??????:
        _0961_ = b[6:6];
      9'b?1???????:
        _0961_ = b[7:7];
      9'b1????????:
        _0961_ = b[8:8];
      default:
        _0961_ = a;
    endcase
  endfunction
  assign _0477_ = _0961_(1'hx, 9'h19f, { _0486_, _0485_, _0484_, _0483_, _0482_, _0481_, _0480_, _0479_, _0478_ });
  assign _0478_ = state == 10'h100;
  assign _0479_ = state == 10'h080;
  assign _0480_ = state == 10'h020;
  assign _0481_ = state == 10'h040;
  assign _0482_ = state == 10'h010;
  assign _0483_ = state == 10'h008;
  assign _0484_ = state == 10'h004;
  assign _0485_ = state == 10'h002;
  assign _0486_ = state == 10'h001;
  function [0:0] _0971_;
    input [0:0] a;
    input [8:0] b;
    input [8:0] s;
    casez (s) // synopsys parallel_case
      9'b????????1:
        _0971_ = b[0:0];
      9'b???????1?:
        _0971_ = b[1:1];
      9'b??????1??:
        _0971_ = b[2:2];
      9'b?????1???:
        _0971_ = b[3:3];
      9'b????1????:
        _0971_ = b[4:4];
      9'b???1?????:
        _0971_ = b[5:5];
      9'b??1??????:
        _0971_ = b[6:6];
      9'b?1???????:
        _0971_ = b[7:7];
      9'b1????????:
        _0971_ = b[8:8];
      default:
        _0971_ = a;
    endcase
  endfunction
  assign _0487_ = _0971_(1'hx, { 4'h0, _0060_, 4'h0 }, { _0496_, _0495_, _0494_, _0493_, _0492_, _0491_, _0490_, _0489_, _0488_ });
  assign _0488_ = state == 10'h100;
  assign _0489_ = state == 10'h080;
  assign _0490_ = state == 10'h020;
  assign _0491_ = state == 10'h040;
  assign _0492_ = state == 10'h010;
  assign _0493_ = state == 10'h008;
  assign _0494_ = state == 10'h004;
  assign _0495_ = state == 10'h002;
  assign _0496_ = state == 10'h001;
  assign _0497_ = _0498_ ? 10'h001 : next_state;
  assign _0499_ = _0500_ ? 1'h0 : send_stall_r;
  assign _0501_ = _0502_ ? 1'h1 : _0499_;
  assign _0503_ = _0504_ ? 8'h00 : _0091_;
  assign _0505_ = _0506_ ? 8'h00 : _0090_;
  assign _0507_ = _0508_ ? 1'h0 : setup_token;
  assign _0509_ = _0510_ ? 1'h1 : _0507_;
  assign _0511_ = _0512_ ? 1'h0 : out_token;
  assign _0513_ = _0514_ ? 1'h1 : _0511_;
  assign _0515_ = _0516_ ? 1'h0 : in_token;
  assign _0517_ = _0518_ ? 1'h1 : _0515_;
  function [1:0] _0992_;
    input [1:0] a;
    input [9:0] b;
    input [4:0] s;
    casez (s) // synopsys parallel_case
      5'b????1:
        _0992_ = b[1:0];
      5'b???1?:
        _0992_ = b[3:2];
      5'b??1??:
        _0992_ = b[5:4];
      5'b?1???:
        _0992_ = b[7:6];
      5'b1????:
        _0992_ = b[9:8];
      default:
        _0992_ = a;
    endcase
  endfunction
  assign _0519_ = _0992_(this_dpid, 10'h011, { _0524_, _0523_, _0522_, _0521_, _0520_ });
  assign _0520_ = { setup_token, in_op, out_op, uc_dpd[0] } == 4'h3;
  assign _0521_ = { setup_token, in_op, out_op, uc_dpd[0] } == 4'h2;
  assign _0522_ = { setup_token, in_op, out_op, uc_dpd[1] } == 4'h5;
  assign _0523_ = { setup_token, in_op, out_op, uc_dpd[1] } == 4'h4;
  function [1:0] _0997_;
    input [1:0] a;
    input [35:0] b;
    input [17:0] s;
    casez (s) // synopsys parallel_case
      18'b?????????????????1:
        _0997_ = b[1:0];
      18'b????????????????1?:
        _0997_ = b[3:2];
      18'b???????????????1??:
        _0997_ = b[5:4];
      18'b??????????????1???:
        _0997_ = b[7:6];
      18'b?????????????1????:
        _0997_ = b[9:8];
      18'b????????????1?????:
        _0997_ = b[11:10];
      18'b???????????1??????:
        _0997_ = b[13:12];
      18'b??????????1???????:
        _0997_ = b[15:14];
      18'b?????????1????????:
        _0997_ = b[17:16];
      18'b????????1?????????:
        _0997_ = b[19:18];
      18'b???????1??????????:
        _0997_ = b[21:20];
      18'b??????1???????????:
        _0997_ = b[23:22];
      18'b?????1????????????:
        _0997_ = b[25:24];
      18'b????1?????????????:
        _0997_ = b[27:26];
      18'b???1??????????????:
        _0997_ = b[29:28];
      18'b??1???????????????:
        _0997_ = b[31:30];
      18'b?1????????????????:
        _0997_ = b[33:32];
      18'b1?????????????????:
        _0997_ = b[35:34];
      default:
        _0997_ = a;
    endcase
  endfunction
  assign _0525_ = _0997_(this_dpid, { 12'h124, allow_pid, 20'h37e11, _0519_ }, { _0547_, _0546_, _0545_, _0544_, _0543_, _0542_, _0541_, _0540_, _0539_, _0538_, _0537_, _0536_, _0535_, _0534_, _0532_, _0530_, _0528_, _0526_ });
  assign _0526_ = ! ep_type;
  assign _0528_ = | _0527_;
  assign _0527_[0] = { ep_type, txfr_type, uc_dpd[0] } == 5'h0d;
  assign _0527_[1] = { ep_type, txfr_type, uc_dpd[0] } == 5'h15;
  assign _0530_ = | _0529_;
  assign _0529_[0] = { ep_type, txfr_type, uc_dpd[0] } == 5'h0c;
  assign _0529_[1] = { ep_type, txfr_type, uc_dpd[0] } == 5'h14;
  assign _0532_ = | _0531_;
  assign _0531_[0] = { ep_type, txfr_type, uc_dpd[0] } == 5'h09;
  assign _0531_[1] = { ep_type, txfr_type, uc_dpd[0] } == 5'h11;
  assign _0534_ = | _0533_;
  assign _0533_[0] = { ep_type, txfr_type, uc_dpd[0] } == 5'h08;
  assign _0533_[1] = { ep_type, txfr_type, uc_dpd[0] } == 5'h10;
  assign _0535_ = { tr_fr_d, ep_type, txfr_type, uc_dpd } == 8'he6;
  assign _0536_ = { tr_fr_d, ep_type, txfr_type, uc_dpd } == 8'he5;
  assign _0537_ = { tr_fr_d, ep_type, txfr_type, uc_dpd } == 8'he4;
  assign _0538_ = { tr_fr_d, ep_type, txfr_type, uc_dpd[0] } == 7'h53;
  assign _0539_ = { tr_fr_d, ep_type, txfr_type, uc_dpd[0] } == 7'h52;
  assign _0540_ = { tr_fr_d, ep_type, txfr_type } == 6'h19;
  assign _0541_ = { tr_fr_d, ep_type, txfr_type } == 6'h09;
  assign _0542_ = { tr_fr_d, ep_type, txfr_type, uc_dpd } == 8'hd6;
  assign _0543_ = { tr_fr_d, ep_type, txfr_type, uc_dpd } == 8'hd5;
  assign _0544_ = { tr_fr_d, ep_type, txfr_type, uc_dpd } == 8'hd4;
  assign _0545_ = { tr_fr_d, ep_type, txfr_type, uc_dpd[0] } == 7'h4b;
  assign _0546_ = { tr_fr_d, ep_type, txfr_type, uc_dpd[0] } == 7'h4a;
  assign _0547_ = { tr_fr_d[1], ep_type, txfr_type } == 5'h05;
  function [1:0] _1024_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _1024_ = b[1:0];
      4'b??1?:
        _1024_ = b[3:2];
      4'b?1??:
        _1024_ = b[5:4];
      4'b1???:
        _1024_ = b[7:6];
      default:
        _1024_ = a;
    endcase
  endfunction
  assign _0548_ = _1024_(2'hx, 8'h1b, { _0552_, _0551_, _0550_, _0549_ });
  assign _0549_ = { pid_DATA0, pid_DATA1, pid_DATA2, pid_MDATA } == 4'h1;
  assign _0550_ = { pid_DATA0, pid_DATA1, pid_DATA2, pid_MDATA } == 4'h2;
  assign _0551_ = { pid_DATA0, pid_DATA1, pid_DATA2, pid_MDATA } == 4'h4;
  assign _0552_ = { pid_DATA0, pid_DATA1, pid_DATA2, pid_MDATA } == 4'h8;
  function [1:0] _1029_;
    input [1:0] a;
    input [9:0] b;
    input [4:0] s;
    casez (s) // synopsys parallel_case
      5'b????1:
        _1029_ = b[1:0];
      5'b???1?:
        _1029_ = b[3:2];
      5'b??1??:
        _1029_ = b[5:4];
      5'b?1???:
        _1029_ = b[7:6];
      5'b1????:
        _1029_ = b[9:8];
      default:
        _1029_ = a;
    endcase
  endfunction
  assign _0553_ = _1029_(next_dpid, 10'h3de, { _0558_, _0557_, _0556_, _0555_, _0554_ });
  assign _0554_ = { setup_token, in_op, out_op, uc_dpd[0] } == 4'h3;
  assign _0555_ = { setup_token, in_op, out_op, uc_dpd[0] } == 4'h2;
  assign _0556_ = { setup_token, in_op, out_op, uc_dpd[1] } == 4'h5;
  assign _0557_ = { setup_token, in_op, out_op, uc_dpd[1] } == 4'h4;
  function [1:0] _1034_;
    input [1:0] a;
    input [31:0] b;
    input [15:0] s;
    casez (s) // synopsys parallel_case
      16'b???????????????1:
        _1034_ = b[1:0];
      16'b??????????????1?:
        _1034_ = b[3:2];
      16'b?????????????1??:
        _1034_ = b[5:4];
      16'b????????????1???:
        _1034_ = b[7:6];
      16'b???????????1????:
        _1034_ = b[9:8];
      16'b??????????1?????:
        _1034_ = b[11:10];
      16'b?????????1??????:
        _1034_ = b[13:12];
      16'b????????1???????:
        _1034_ = b[15:14];
      16'b???????1????????:
        _1034_ = b[17:16];
      16'b??????1?????????:
        _1034_ = b[19:18];
      16'b?????1??????????:
        _1034_ = b[21:20];
      16'b????1???????????:
        _1034_ = b[23:22];
      16'b???1????????????:
        _1034_ = b[25:24];
      16'b??1?????????????:
        _1034_ = b[27:26];
      16'b?1??????????????:
        _1034_ = b[29:28];
      16'b1???????????????:
        _1034_ = b[31:30];
      default:
        _1034_ = a;
    endcase
  endfunction
  assign _0559_ = _1034_(next_dpid, { 14'h0460, _0581_, _0577_, _0573_, _0569_, 8'h44, _0553_ }, { _0591_, _0590_, _0589_, _0588_, _0587_, _0586_, _0585_, _0584_, _0580_, _0576_, _0572_, _0568_, _0566_, _0564_, _0562_, _0560_ });
  assign _0560_ = ! ep_type;
  assign _0562_ = | _0561_;
  assign _0561_[0] = { ep_type, txfr_type, uc_dpd[0] } == 5'h0d;
  assign _0561_[1] = { ep_type, txfr_type, uc_dpd[0] } == 5'h15;
  assign _0564_ = | _0563_;
  assign _0563_[0] = { ep_type, txfr_type, uc_dpd[0] } == 5'h0c;
  assign _0563_[1] = { ep_type, txfr_type, uc_dpd[0] } == 5'h14;
  assign _0566_ = | _0565_;
  assign _0565_[0] = { ep_type, txfr_type, uc_dpd[0] } == 5'h09;
  assign _0565_[1] = { ep_type, txfr_type, uc_dpd[0] } == 5'h11;
  assign _0568_ = | _0567_;
  assign _0567_[0] = { ep_type, txfr_type, uc_dpd[0] } == 5'h08;
  assign _0567_[1] = { ep_type, txfr_type, uc_dpd[0] } == 5'h10;
  function [1:0] _1048_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _1048_ = b[1:0];
      2'b1?:
        _1048_ = b[3:2];
      default:
        _1048_ = a;
    endcase
  endfunction
  assign _0569_ = _1048_(next_dpid, 4'h4, { _0571_, _0570_ });
  assign _0570_ = { pid_MDATA, pid_DATA2 } == 2'h1;
  assign _0571_ = { pid_MDATA, pid_DATA2 } == 2'h2;
  assign _0572_ = { tr_fr_d, ep_type, txfr_type, uc_dpd } == 8'he6;
  function [1:0] _1052_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _1052_ = b[1:0];
      2'b1?:
        _1052_ = b[3:2];
      default:
        _1052_ = a;
    endcase
  endfunction
  assign _0573_ = _1052_(next_dpid, 4'h8, { _0575_, _0574_ });
  assign _0574_ = { pid_MDATA, pid_DATA2 } == 2'h1;
  assign _0575_ = { pid_MDATA, pid_DATA2 } == 2'h2;
  assign _0576_ = { tr_fr_d, ep_type, txfr_type, uc_dpd } == 8'he5;
  function [1:0] _1056_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _1056_ = b[1:0];
      2'b1?:
        _1056_ = b[3:2];
      default:
        _1056_ = a;
    endcase
  endfunction
  assign _0577_ = _1056_(next_dpid, 4'h4, { _0579_, _0578_ });
  assign _0578_ = { pid_MDATA, pid_DATA2 } == 2'h1;
  assign _0579_ = { pid_MDATA, pid_DATA2 } == 2'h2;
  assign _0580_ = { tr_fr_d, ep_type, txfr_type, uc_dpd } == 8'he4;
  function [1:0] _1060_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _1060_ = b[1:0];
      2'b1?:
        _1060_ = b[3:2];
      default:
        _1060_ = a;
    endcase
  endfunction
  assign _0581_ = _1060_(next_dpid, 4'h4, { _0583_, _0582_ });
  assign _0582_ = { pid_MDATA, pid_DATA1 } == 2'h1;
  assign _0583_ = { pid_MDATA, pid_DATA1 } == 2'h2;
  assign _0584_ = { tr_fr_d, ep_type, txfr_type } == 6'h29;
  assign _0585_ = { tr_fr_d[1], ep_type, txfr_type } == 5'h09;
  assign _0586_ = { tr_fr_d, ep_type, txfr_type, uc_dpd } == 8'hd6;
  assign _0587_ = { tr_fr_d, ep_type, txfr_type, uc_dpd } == 8'hd5;
  assign _0588_ = { tr_fr_d, ep_type, txfr_type, uc_dpd } == 8'hd4;
  assign _0589_ = { tr_fr_d, ep_type, txfr_type, uc_dpd[0] } == 7'h4b;
  assign _0590_ = { tr_fr_d, ep_type, txfr_type, uc_dpd[0] } == 7'h4a;
  assign _0591_ = { tr_fr_d[1], ep_type, txfr_type } == 5'h05;
  function [1:0] _1071_;
    input [1:0] a;
    input [15:0] b;
    input [7:0] s;
    casez (s) // synopsys parallel_case
      8'b???????1:
        _1071_ = b[1:0];
      8'b??????1?:
        _1071_ = b[3:2];
      8'b?????1??:
        _1071_ = b[5:4];
      8'b????1???:
        _1071_ = b[7:6];
      8'b???1????:
        _1071_ = b[9:8];
      8'b??1?????:
        _1071_ = b[11:10];
      8'b?1??????:
        _1071_ = b[13:12];
      8'b1???????:
        _1071_ = b[15:14];
      default:
        _1071_ = a;
    endcase
  endfunction
  assign _0592_ = _1071_(uc_dpd, { ep0_dpid, ep1_dpid, ep2_dpid, ep3_dpid, ep4_dpid, ep5_dpid, ep6_dpid, ep7_dpid }, { _0600_, _0599_, _0598_, _0597_, _0596_, _0595_, _0594_, _0593_ });
  assign _0593_ = ep_sel == 4'h7;
  assign _0594_ = ep_sel == 4'h6;
  assign _0595_ = ep_sel == 4'h5;
  assign _0596_ = ep_sel == 4'h4;
  assign _0597_ = ep_sel == 4'h3;
  assign _0598_ = ep_sel == 4'h2;
  assign _0599_ = ep_sel == 4'h1;
  assign _0600_ = ! ep_sel;
  assign _0601_ = _0602_ ? next_dpid : ep7_dpid;
  assign _0603_ = _0604_ ? next_dpid : ep6_dpid;
  assign _0605_ = _0606_ ? next_dpid : ep5_dpid;
  assign _0607_ = _0608_ ? next_dpid : ep4_dpid;
  assign _0609_ = _0610_ ? next_dpid : ep3_dpid;
  assign _0611_ = _0612_ ? next_dpid : ep2_dpid;
  assign _0613_ = _0614_ ? next_dpid : ep1_dpid;
  assign _0615_ = _0616_ ? next_dpid : ep0_dpid;
  assign IN_ep = csr[9];
  assign OUT_ep = csr[10];
  assign CTRL_ep = csr[11];
  assign txfr_iso = csr[12];
  assign txfr_bulk = csr[13];
  assign txfr_int = _0092_;
  assign ep_type = csr[10:9];
  assign txfr_type = csr[13:12];
  assign tr_fr_d = 2'h0;
  assign data_pid_sel = this_dpid;
  assign in_op = _0172_;
  assign out_op = _0173_;
  assign rx_ack_to_val = 8'hc8;
  assign tx_data_to_clr = rx_active;
  assign tx_data_to_val = 8'hc8;
  assign int_to_set = _0181_;
  assign int_crc16_set = _0119_;
  assign _0042_ = _0059_;
  assign _0026_ = _0054_;
  assign _0012_ = _0052_;
  assign _0031_ = _0056_;
  assign _0036_ = _0057_;
  assign _0028_ = _0055_;
  assign _0039_ = _0058_;
  assign _0016_ = _0053_;
  assign _0011_ = int_seqerr_set_d;
  assign _0013_ = _0113_;
  assign _0022_ = pid_SETUP;
  assign _0021_ = pid_PING;
  assign _0019_ = pid_IN;
  assign _0020_ = pid_OUT;
  assign _0037_ = _0138_;
  assign _0024_ = _0137_;
  assign _0025_ = _0174_;
  assign _0000_ = _0111_;
  assign _0041_ = uc_stat_set_d;
  assign _0023_ = _0152_;
  assign _0001_ = _0051_;
  assign _0035_ = token_pid_sel_d;
  assign _0030_ = send_token_d;
  assign _0017_ = _0095_;
  assign _0014_ = _0093_;
  assign _0188_ = pid_seq_err;
  assign _0190_ = ep_full;
  assign _0192_ = send_stall_r;
  assign _0194_ = abort;
  assign _0050_ = _0195_;
  assign _0198_ = ep_full;
  assign _0200_ = send_stall_r;
  assign _0202_ = abort;
  assign _0049_ = _0203_;
  assign _0206_ = send_stall_r;
  assign _0208_ = abort;
  assign _0086_ = _0209_;
  assign _0212_ = ep_full;
  assign _0214_ = send_stall_r;
  assign _0216_ = abort;
  assign _0087_ = _0217_;
  assign _0220_ = send_stall_r;
  assign _0222_ = abort;
  assign _0048_ = _0223_;
  assign _0226_ = send_stall_r;
  assign _0228_ = abort;
  assign _0083_ = _0229_;
  assign _0232_ = send_stall_r;
  assign _0234_ = abort;
  assign _0084_ = _0235_;
  assign _0238_ = abort;
  assign _0047_ = _0239_;
  assign _0242_ = abort;
  assign _0080_ = _0243_;
  assign _0246_ = abort;
  assign _0081_ = _0247_;
  assign _0250_ = abort;
  assign _0046_ = _0251_;
  assign _0254_ = pid_seq_err;
  assign _0256_ = txfr_iso;
  assign _0258_ = rx_data_done;
  assign _0260_ = _0186_;
  assign _0078_ = _0261_;
  assign _0264_ = txfr_iso;
  assign _0266_ = rx_data_done;
  assign _0268_ = _0186_;
  assign _0045_ = _0269_;
  assign _0272_ = txfr_iso;
  assign _0274_ = rx_data_done;
  assign _0276_ = _0186_;
  assign _0072_ = _0277_;
  assign _0280_ = rx_data_done;
  assign _0282_ = _0186_;
  assign _0066_ = _0283_;
  assign _0286_ = rx_data_done;
  assign _0288_ = _0186_;
  assign _0044_ = _0289_;
  assign _0292_ = _0186_;
  assign _0043_ = _0293_;
  assign _0296_ = _0186_;
  assign _0060_ = _0297_;
  assign _0300_ = _0124_;
  assign _0302_ = rx_ack_to;
  assign _0089_ = _0303_;
  assign _0306_ = rx_ack_to;
  assign _0088_ = _0307_;
  assign _0310_ = txfr_iso;
  assign _0312_ = idma_done;
  assign _0085_ = _0313_;
  assign _0316_ = idma_done;
  assign _0082_ = _0317_;
  assign _0320_ = _0184_;
  assign _0322_ = _0182_;
  assign _0324_ = _0120_;
  assign _0079_ = _0325_;
  assign _0328_ = _0184_;
  assign _0330_ = _0182_;
  assign _0332_ = _0120_;
  assign _0074_ = _0333_;
  assign _0336_ = _0122_;
  assign _0338_ = _0182_;
  assign _0340_ = _0120_;
  assign _0073_ = _0341_;
  assign _0344_ = _0122_;
  assign _0346_ = _0182_;
  assign _0348_ = _0120_;
  assign _0075_ = _0349_;
  assign _0352_ = _0122_;
  assign _0354_ = _0182_;
  assign _0356_ = _0120_;
  assign _0076_ = _0357_;
  assign _0360_ = _0122_;
  assign _0362_ = _0182_;
  assign _0364_ = _0120_;
  assign _0077_ = _0365_;
  assign _0368_ = _0182_;
  assign _0370_ = _0120_;
  assign _0069_ = _0371_;
  assign _0374_ = _0182_;
  assign _0376_ = _0120_;
  assign _0070_ = _0377_;
  assign _0380_ = _0182_;
  assign _0382_ = _0120_;
  assign _0071_ = _0383_;
  assign _0386_ = _0182_;
  assign _0388_ = _0120_;
  assign _0067_ = _0389_;
  assign _0392_ = _0182_;
  assign _0394_ = _0120_;
  assign _0068_ = _0395_;
  assign _0398_ = _0120_;
  assign _0063_ = _0399_;
  assign _0402_ = _0120_;
  assign _0064_ = _0403_;
  assign _0406_ = _0120_;
  assign _0062_ = _0407_;
  assign _0410_ = _0120_;
  assign _0065_ = _0411_;
  assign _0414_ = _0120_;
  assign _0061_ = _0415_;
  assign _0056_ = _0417_;
  assign _0057_ = _0427_;
  assign _0055_ = _0437_;
  assign _0058_ = _0447_;
  assign _0053_ = _0457_;
  assign _0059_ = _0467_;
  assign _0054_ = _0477_;
  assign _0052_ = _0487_;
  assign _0498_ = match;
  assign _0033_ = _0497_;
  assign _0500_ = send_token;
  assign _0502_ = send_stall;
  assign _0029_ = _0501_;
  assign _0504_ = tx_data_to_clr;
  assign _0038_ = _0503_;
  assign _0506_ = rx_ack_to_clr;
  assign _0027_ = _0505_;
  assign _0508_ = _0171_;
  assign _0510_ = pid_SETUP;
  assign _0032_ = _0509_;
  assign _0512_ = pid_IN;
  assign _0514_ = _0170_;
  assign _0018_ = _0513_;
  assign _0516_ = _0169_;
  assign _0518_ = pid_IN;
  assign _0010_ = _0517_;
  assign _0524_ = setup_token;
  assign _0034_ = _0525_;
  assign _0051_ = _0548_;
  assign _0558_ = setup_token;
  assign _0015_ = _0559_;
  assign _0040_ = _0592_;
  assign _0602_ = _0103_;
  assign _0009_ = _0601_;
  assign _0604_ = _0102_;
  assign _0008_ = _0603_;
  assign _0606_ = _0101_;
  assign _0007_ = _0605_;
  assign _0608_ = _0100_;
  assign _0006_ = _0607_;
  assign _0610_ = _0099_;
  assign _0005_ = _0609_;
  assign _0612_ = _0098_;
  assign _0004_ = _0611_;
  assign _0614_ = _0097_;
  assign _0003_ = _0613_;
  assign _0616_ = _0096_;
  assign _0002_ = _0615_;
  assign next_state = _0457_;
  assign tx_dma_en = _0447_;
  assign rx_dma_en = _0437_;
  assign token_pid_sel_d = _0427_;
  assign send_token_d = _0417_;
  assign int_seqerr_set_d = _0487_;
  assign rx_ack_to_clr_d = _0477_;
  assign uc_stat_set_d = _0467_;
  assign allow_pid = _0548_;
endmodule

module usb1_pl(clk, rst, rx_data, rx_valid, rx_active, rx_err, tx_data, tx_valid, tx_valid_last, tx_ready, tx_first, tx_valid_out, token_valid, fa, ep_sel, x_busy, int_crc16_set, int_to_set, int_seqerr_set, frm_nat, pid_cs_err
, nse_err, crc5_err, rx_size, rx_done, ctrl_setup, ctrl_in, ctrl_out, ep_bf_en, ep_bf_size, dropped_frame, misaligned_frame, csr, tx_data_st, rx_ctrl_data, rx_ctrl_data_d, rx_ctrl_dvalid, rx_ctrl_ddone, idma_re, idma_we, ep_empty, ep_full
, send_stall);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire [10:0] _04_;
  wire _05_;
  wire _06_;
  wire [4:0] _07_;
  wire [7:0] _08_;
  wire [11:0] _09_;
  wire [11:0] _10_;
  wire [4:0] _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire [4:0] _42_;
  wire _43_;
  wire [11:0] _44_;
  wire _45_;
  wire [11:0] _46_;
  wire _47_;
  wire [10:0] _48_;
  wire _49_;
  wire abort;
  input clk;
  wire clk;
  reg clr_sof_time;
  wire crc16_err;
  output crc5_err;
  wire crc5_err;
  input [13:0] csr;
  wire [13:0] csr;
  output ctrl_in;
  reg ctrl_in;
  output ctrl_out;
  reg ctrl_out;
  output ctrl_setup;
  reg ctrl_setup;
  wire [1:0] data_pid_sel;
  output dropped_frame;
  wire dropped_frame;
  input ep_bf_en;
  wire ep_bf_en;
  input [6:0] ep_bf_size;
  wire [6:0] ep_bf_size;
  input ep_empty;
  wire ep_empty;
  wire ep_empty_int;
  input ep_full;
  wire ep_full;
  output [3:0] ep_sel;
  wire [3:0] ep_sel;
  input [6:0] fa;
  wire [6:0] fa;
  wire [10:0] frame_no;
  reg [10:0] frame_no_r;
  wire frame_no_we;
  reg frame_no_we_r;
  output [31:0] frm_nat;
  wire [31:0] frm_nat;
  wire fsel;
  reg hms_clk;
  reg [4:0] hms_cnt;
  wire idma_done;
  output idma_re;
  wire idma_re;
  output idma_we;
  wire idma_we;
  wire idma_we_d;
  output int_crc16_set;
  wire int_crc16_set;
  output int_seqerr_set;
  wire int_seqerr_set;
  output int_to_set;
  wire int_to_set;
  wire int_upid_set;
  wire match_o;
  output misaligned_frame;
  wire misaligned_frame;
  output nse_err;
  wire nse_err;
  wire pid_ACK;
  wire pid_DATA0;
  wire pid_DATA1;
  wire pid_DATA2;
  wire pid_ERR;
  wire pid_IN;
  wire pid_MDATA;
  wire pid_NACK;
  wire pid_NYET;
  wire pid_OUT;
  wire pid_PING;
  wire pid_PRE;
  wire pid_SETUP;
  wire pid_SOF;
  wire pid_SPLIT;
  wire pid_STALL;
  wire pid_bad;
  output pid_cs_err;
  wire pid_cs_err;
  wire rd_next;
  input rst;
  wire rst;
  input rx_active;
  wire rx_active;
  wire rx_busy;
  output [7:0] rx_ctrl_data;
  wire [7:0] rx_ctrl_data;
  output [7:0] rx_ctrl_data_d;
  reg [7:0] rx_ctrl_data_d;
  output rx_ctrl_ddone;
  wire rx_ctrl_ddone;
  output rx_ctrl_dvalid;
  wire rx_ctrl_dvalid;
  input [7:0] rx_data;
  wire [7:0] rx_data;
  wire rx_dma_en;
  output rx_done;
  wire rx_done;
  input rx_err;
  wire rx_err;
  wire rx_seq_err;
  output [7:0] rx_size;
  wire [7:0] rx_size;
  input rx_valid;
  wire rx_valid;
  wire send_data;
  input send_stall;
  wire send_stall;
  wire send_token;
  reg [11:0] sof_time;
  wire [6:0] token_fadr;
  wire [1:0] token_pid_sel;
  output token_valid;
  wire token_valid;
  wire tx_busy;
  output [7:0] tx_data;
  wire [7:0] tx_data;
  input [7:0] tx_data_st;
  wire [7:0] tx_data_st;
  wire [7:0] tx_data_st_o;
  wire tx_dma_en;
  output tx_first;
  wire tx_first;
  input tx_ready;
  wire tx_ready;
  output tx_valid;
  wire tx_valid;
  output tx_valid_last;
  wire tx_valid_last;
  input tx_valid_out;
  wire tx_valid_out;
  output x_busy;
  wire x_busy;
  assign _10_ = sof_time + 12'h001;
  assign _11_ = hms_cnt + 5'h01;
  assign _12_ = _28_ & token_valid;
  assign _13_ = _12_ & _29_;
  assign _14_ = token_valid & pid_SETUP;
  assign _15_ = _14_ & _23_;
  assign _16_ = token_valid & pid_IN;
  assign _17_ = _16_ & _24_;
  assign _18_ = token_valid & pid_OUT;
  assign _19_ = _18_ & _25_;
  assign _20_ = token_valid & _30_;
  assign _21_ = _20_ & pid_SOF;
  assign _22_ = idma_we_d & fsel;
  assign _23_ = ! ep_sel;
  assign _24_ = ! ep_sel;
  assign _25_ = ! ep_sel;
  assign _26_ = hms_cnt == 5'h16;
  assign _27_ = token_fadr == fa;
  assign _28_ = ! pid_bad;
  assign _29_ = ! crc5_err;
  assign _30_ = ! crc5_err;
  assign _31_ = ! rst;
  assign _32_ = ! rst;
  assign _33_ = tx_busy | rx_busy;
  assign _34_ = pid_ACK | pid_NACK;
  assign _35_ = _34_ | pid_STALL;
  assign _36_ = _35_ | pid_NYET;
  assign _37_ = _36_ | pid_PRE;
  assign _38_ = _37_ | pid_ERR;
  assign _39_ = _38_ | pid_SPLIT;
  assign _40_ = _39_ | pid_PING;
  assign _41_ = hms_clk | frame_no_we_r;
  always @(posedge clk)
    rx_ctrl_data_d <= rx_ctrl_data;
  always @(posedge clk)
    hms_clk <= _26_;
  always @(posedge clk, negedge rst)
    if (!rst) hms_cnt <= 5'h00;
    else hms_cnt <= _42_;
  always @(posedge clk)
    sof_time <= _46_;
  always @(posedge clk)
    clr_sof_time <= _21_;
  always @(posedge clk, negedge rst)
    if (!rst) frame_no_r <= 11'h000;
    else frame_no_r <= _48_;
  always @(posedge clk)
    frame_no_we_r <= _21_;
  always @(posedge clk)
    ctrl_out <= _19_;
  always @(posedge clk)
    ctrl_in <= _17_;
  always @(posedge clk)
    ctrl_setup <= _15_;
  assign _42_ = _43_ ? 5'h00 : _11_;
  assign _44_ = _45_ ? _10_ : sof_time;
  assign _46_ = _47_ ? 12'h000 : _44_;
  assign _48_ = _49_ ? frame_no : frame_no_r;
  usb1_pd u0 (
    .clk(clk),
    .crc16_err(crc16_err),
    .crc5_err(crc5_err),
    .frame_no(frame_no),
    .pid_ACK(pid_ACK),
    .pid_DATA0(pid_DATA0),
    .pid_DATA1(pid_DATA1),
    .pid_DATA2(pid_DATA2),
    .pid_ERR(pid_ERR),
    .pid_IN(pid_IN),
    .pid_MDATA(pid_MDATA),
    .pid_NACK(pid_NACK),
    .pid_NYET(pid_NYET),
    .pid_OUT(pid_OUT),
    .pid_PING(pid_PING),
    .pid_PRE(pid_PRE),
    .pid_SETUP(pid_SETUP),
    .pid_SOF(pid_SOF),
    .pid_SPLIT(pid_SPLIT),
    .pid_STALL(pid_STALL),
    .pid_cks_err(pid_cs_err),
    .rst(rst),
    .rx_active(rx_active),
    .rx_busy(rx_busy),
    .rx_data(rx_data),
    .rx_data_done(rx_ctrl_ddone),
    .rx_data_st(rx_ctrl_data),
    .rx_data_valid(rx_ctrl_dvalid),
    .rx_err(rx_err),
    .rx_valid(rx_valid),
    .seq_err(rx_seq_err),
    .token_endp(ep_sel),
    .token_fadr(token_fadr),
    .token_valid(token_valid)
  );
  usb1_pa u1 (
    .clk(clk),
    .data_pid_sel(data_pid_sel),
    .ep_empty(ep_empty_int),
    .rd_next(rd_next),
    .rst(rst),
    .send_data(send_data),
    .send_token(send_token),
    .token_pid_sel(token_pid_sel),
    .tx_data(tx_data),
    .tx_data_st(tx_data_st_o),
    .tx_first(tx_first),
    .tx_ready(tx_ready),
    .tx_valid(tx_valid),
    .tx_valid_last(tx_valid_last)
  );
  usb1_idma u2 (
    .clk(clk),
    .dropped_frame(dropped_frame),
    .ep_bf_en(ep_bf_en),
    .ep_bf_size(ep_bf_size),
    .ep_empty(ep_empty),
    .ep_empty_int(ep_empty_int),
    .ep_full(ep_full),
    .ep_sel(ep_sel),
    .idma_done(idma_done),
    .misaligned_frame(misaligned_frame),
    .mre(idma_re),
    .mwe(idma_we_d),
    .rd_next(rd_next),
    .rst(rst),
    .rx_cnt(rx_size),
    .rx_data_done(rx_ctrl_ddone),
    .rx_data_valid(rx_ctrl_dvalid),
    .rx_dma_en(rx_dma_en),
    .rx_done(rx_done),
    .send_data(send_data),
    .size(csr[8:0]),
    .tx_busy(tx_busy),
    .tx_data_st_i(tx_data_st),
    .tx_data_st_o(tx_data_st_o),
    .tx_dma_en(tx_dma_en),
    .tx_valid(tx_valid)
  );
  usb1_pe u3 (
    .abort(abort),
    .clk(clk),
    .crc16_err(crc16_err),
    .csr(csr),
    .data_pid_sel(data_pid_sel),
    .ep_empty(ep_empty),
    .ep_full(ep_full),
    .ep_sel(ep_sel),
    .fsel(fsel),
    .idma_done(idma_done),
    .int_crc16_set(int_crc16_set),
    .int_seqerr_set(int_seqerr_set),
    .int_to_set(int_to_set),
    .int_upid_set(int_upid_set),
    .match(match_o),
    .nse_err(nse_err),
    .pid_ACK(pid_ACK),
    .pid_DATA0(pid_DATA0),
    .pid_DATA1(pid_DATA1),
    .pid_DATA2(pid_DATA2),
    .pid_IN(pid_IN),
    .pid_MDATA(pid_MDATA),
    .pid_OUT(pid_OUT),
    .pid_PING(pid_PING),
    .pid_SETUP(pid_SETUP),
    .pid_SOF(pid_SOF),
    .rst(rst),
    .rx_active(rx_active),
    .rx_data_done(rx_ctrl_ddone),
    .rx_dma_en(rx_dma_en),
    .send_stall(send_stall),
    .send_token(send_token),
    .token_pid_sel(token_pid_sel),
    .token_valid(token_valid),
    .tx_dma_en(tx_dma_en),
    .tx_valid(tx_valid_out)
  );
  assign x_busy = _33_;
  assign pid_bad = _40_;
  assign match_o = _13_;
  assign frame_no_we = _21_;
  assign frm_nat = { 5'h00, frame_no_r, 4'h0, sof_time };
  assign fsel = _27_;
  assign idma_we = _22_;
  assign _08_ = rx_ctrl_data;
  assign _06_ = _26_;
  assign _00_ = _21_;
  assign _05_ = _21_;
  assign _02_ = _19_;
  assign _01_ = _17_;
  assign _03_ = _15_;
  assign _43_ = _41_;
  assign _07_ = _42_;
  assign _45_ = hms_clk;
  assign _47_ = clr_sof_time;
  assign _09_ = _46_;
  assign _49_ = frame_no_we_r;
  assign _04_ = _48_;
endmodule

module usb1_rom1(clk, adr, dout);
  wire [7:0] _000_;
  wire [7:0] _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  input [6:0] adr;
  wire [6:0] adr;
  input clk;
  wire clk;
  output [7:0] dout;
  reg [7:0] dout;
  always @(posedge clk)
    dout <= _001_;
  function [7:0] _074_;
    input [7:0] a;
    input [567:0] b;
    input [70:0] s;
    casez (s) // synopsys parallel_case
      71'b??????????????????????????????????????????????????????????????????????1:
        _074_ = b[7:0];
      71'b?????????????????????????????????????????????????????????????????????1?:
        _074_ = b[15:8];
      71'b????????????????????????????????????????????????????????????????????1??:
        _074_ = b[23:16];
      71'b???????????????????????????????????????????????????????????????????1???:
        _074_ = b[31:24];
      71'b??????????????????????????????????????????????????????????????????1????:
        _074_ = b[39:32];
      71'b?????????????????????????????????????????????????????????????????1?????:
        _074_ = b[47:40];
      71'b????????????????????????????????????????????????????????????????1??????:
        _074_ = b[55:48];
      71'b???????????????????????????????????????????????????????????????1???????:
        _074_ = b[63:56];
      71'b??????????????????????????????????????????????????????????????1????????:
        _074_ = b[71:64];
      71'b?????????????????????????????????????????????????????????????1?????????:
        _074_ = b[79:72];
      71'b????????????????????????????????????????????????????????????1??????????:
        _074_ = b[87:80];
      71'b???????????????????????????????????????????????????????????1???????????:
        _074_ = b[95:88];
      71'b??????????????????????????????????????????????????????????1????????????:
        _074_ = b[103:96];
      71'b?????????????????????????????????????????????????????????1?????????????:
        _074_ = b[111:104];
      71'b????????????????????????????????????????????????????????1??????????????:
        _074_ = b[119:112];
      71'b???????????????????????????????????????????????????????1???????????????:
        _074_ = b[127:120];
      71'b??????????????????????????????????????????????????????1????????????????:
        _074_ = b[135:128];
      71'b?????????????????????????????????????????????????????1?????????????????:
        _074_ = b[143:136];
      71'b????????????????????????????????????????????????????1??????????????????:
        _074_ = b[151:144];
      71'b???????????????????????????????????????????????????1???????????????????:
        _074_ = b[159:152];
      71'b??????????????????????????????????????????????????1????????????????????:
        _074_ = b[167:160];
      71'b?????????????????????????????????????????????????1?????????????????????:
        _074_ = b[175:168];
      71'b????????????????????????????????????????????????1??????????????????????:
        _074_ = b[183:176];
      71'b???????????????????????????????????????????????1???????????????????????:
        _074_ = b[191:184];
      71'b??????????????????????????????????????????????1????????????????????????:
        _074_ = b[199:192];
      71'b?????????????????????????????????????????????1?????????????????????????:
        _074_ = b[207:200];
      71'b????????????????????????????????????????????1??????????????????????????:
        _074_ = b[215:208];
      71'b???????????????????????????????????????????1???????????????????????????:
        _074_ = b[223:216];
      71'b??????????????????????????????????????????1????????????????????????????:
        _074_ = b[231:224];
      71'b?????????????????????????????????????????1?????????????????????????????:
        _074_ = b[239:232];
      71'b????????????????????????????????????????1??????????????????????????????:
        _074_ = b[247:240];
      71'b???????????????????????????????????????1???????????????????????????????:
        _074_ = b[255:248];
      71'b??????????????????????????????????????1????????????????????????????????:
        _074_ = b[263:256];
      71'b?????????????????????????????????????1?????????????????????????????????:
        _074_ = b[271:264];
      71'b????????????????????????????????????1??????????????????????????????????:
        _074_ = b[279:272];
      71'b???????????????????????????????????1???????????????????????????????????:
        _074_ = b[287:280];
      71'b??????????????????????????????????1????????????????????????????????????:
        _074_ = b[295:288];
      71'b?????????????????????????????????1?????????????????????????????????????:
        _074_ = b[303:296];
      71'b????????????????????????????????1??????????????????????????????????????:
        _074_ = b[311:304];
      71'b???????????????????????????????1???????????????????????????????????????:
        _074_ = b[319:312];
      71'b??????????????????????????????1????????????????????????????????????????:
        _074_ = b[327:320];
      71'b?????????????????????????????1?????????????????????????????????????????:
        _074_ = b[335:328];
      71'b????????????????????????????1??????????????????????????????????????????:
        _074_ = b[343:336];
      71'b???????????????????????????1???????????????????????????????????????????:
        _074_ = b[351:344];
      71'b??????????????????????????1????????????????????????????????????????????:
        _074_ = b[359:352];
      71'b?????????????????????????1?????????????????????????????????????????????:
        _074_ = b[367:360];
      71'b????????????????????????1??????????????????????????????????????????????:
        _074_ = b[375:368];
      71'b???????????????????????1???????????????????????????????????????????????:
        _074_ = b[383:376];
      71'b??????????????????????1????????????????????????????????????????????????:
        _074_ = b[391:384];
      71'b?????????????????????1?????????????????????????????????????????????????:
        _074_ = b[399:392];
      71'b????????????????????1??????????????????????????????????????????????????:
        _074_ = b[407:400];
      71'b???????????????????1???????????????????????????????????????????????????:
        _074_ = b[415:408];
      71'b??????????????????1????????????????????????????????????????????????????:
        _074_ = b[423:416];
      71'b?????????????????1?????????????????????????????????????????????????????:
        _074_ = b[431:424];
      71'b????????????????1??????????????????????????????????????????????????????:
        _074_ = b[439:432];
      71'b???????????????1???????????????????????????????????????????????????????:
        _074_ = b[447:440];
      71'b??????????????1????????????????????????????????????????????????????????:
        _074_ = b[455:448];
      71'b?????????????1?????????????????????????????????????????????????????????:
        _074_ = b[463:456];
      71'b????????????1??????????????????????????????????????????????????????????:
        _074_ = b[471:464];
      71'b???????????1???????????????????????????????????????????????????????????:
        _074_ = b[479:472];
      71'b??????????1????????????????????????????????????????????????????????????:
        _074_ = b[487:480];
      71'b?????????1?????????????????????????????????????????????????????????????:
        _074_ = b[495:488];
      71'b????????1??????????????????????????????????????????????????????????????:
        _074_ = b[503:496];
      71'b???????1???????????????????????????????????????????????????????????????:
        _074_ = b[511:504];
      71'b??????1????????????????????????????????????????????????????????????????:
        _074_ = b[519:512];
      71'b?????1?????????????????????????????????????????????????????????????????:
        _074_ = b[527:520];
      71'b????1??????????????????????????????????????????????????????????????????:
        _074_ = b[535:528];
      71'b???1???????????????????????????????????????????????????????????????????:
        _074_ = b[543:536];
      71'b??1????????????????????????????????????????????????????????????????????:
        _074_ = b[551:544];
      71'b?1?????????????????????????????????????????????????????????????????????:
        _074_ = b[559:552];
      71'b1??????????????????????????????????????????????????????????????????????:
        _074_ = b[567:560];
      default:
        _074_ = a;
    endcase
  endfunction
  assign _001_ = _074_(dout, 568'h12010001ff00ff40341278561000000000010902350001010040000904000005ff01ff000705810100010107050201000101070583024000010705040240000107058503400001, { _072_, _071_, _070_, _069_, _068_, _067_, _066_, _065_, _064_, _063_, _062_, _061_, _060_, _059_, _058_, _057_, _056_, _055_, _054_, _053_, _052_, _051_, _050_, _049_, _048_, _047_, _046_, _045_, _044_, _043_, _042_, _041_, _040_, _039_, _038_, _037_, _036_, _035_, _034_, _033_, _032_, _031_, _030_, _029_, _028_, _027_, _026_, _025_, _024_, _023_, _022_, _021_, _020_, _019_, _018_, _017_, _016_, _015_, _014_, _013_, _012_, _011_, _010_, _009_, _008_, _007_, _006_, _005_, _004_, _003_, _002_ });
  assign _002_ = adr == 7'h46;
  assign _003_ = adr == 7'h45;
  assign _004_ = adr == 7'h44;
  assign _005_ = adr == 7'h43;
  assign _006_ = adr == 7'h42;
  assign _007_ = adr == 7'h41;
  assign _008_ = adr == 7'h40;
  assign _009_ = adr == 7'h3f;
  assign _010_ = adr == 7'h3e;
  assign _011_ = adr == 7'h3d;
  assign _012_ = adr == 7'h3c;
  assign _013_ = adr == 7'h3b;
  assign _014_ = adr == 7'h3a;
  assign _015_ = adr == 7'h39;
  assign _016_ = adr == 7'h38;
  assign _017_ = adr == 7'h37;
  assign _018_ = adr == 7'h36;
  assign _019_ = adr == 7'h35;
  assign _020_ = adr == 7'h34;
  assign _021_ = adr == 7'h33;
  assign _022_ = adr == 7'h32;
  assign _023_ = adr == 7'h31;
  assign _024_ = adr == 7'h30;
  assign _025_ = adr == 7'h2f;
  assign _026_ = adr == 7'h2e;
  assign _027_ = adr == 7'h2d;
  assign _028_ = adr == 7'h2c;
  assign _029_ = adr == 7'h2b;
  assign _030_ = adr == 7'h2a;
  assign _031_ = adr == 7'h29;
  assign _032_ = adr == 7'h28;
  assign _033_ = adr == 7'h27;
  assign _034_ = adr == 7'h26;
  assign _035_ = adr == 7'h25;
  assign _036_ = adr == 7'h24;
  assign _037_ = adr == 7'h23;
  assign _038_ = adr == 7'h22;
  assign _039_ = adr == 7'h21;
  assign _040_ = adr == 7'h20;
  assign _041_ = adr == 7'h1f;
  assign _042_ = adr == 7'h1e;
  assign _043_ = adr == 7'h1d;
  assign _044_ = adr == 7'h1c;
  assign _045_ = adr == 7'h1b;
  assign _046_ = adr == 7'h1a;
  assign _047_ = adr == 7'h19;
  assign _048_ = adr == 7'h18;
  assign _049_ = adr == 7'h17;
  assign _050_ = adr == 7'h16;
  assign _051_ = adr == 7'h15;
  assign _052_ = adr == 7'h14;
  assign _053_ = adr == 7'h13;
  assign _054_ = adr == 7'h12;
  assign _055_ = adr == 7'h11;
  assign _056_ = adr == 7'h10;
  assign _057_ = adr == 7'h0f;
  assign _058_ = adr == 7'h0e;
  assign _059_ = adr == 7'h0d;
  assign _060_ = adr == 7'h0c;
  assign _061_ = adr == 7'h0b;
  assign _062_ = adr == 7'h0a;
  assign _063_ = adr == 7'h09;
  assign _064_ = adr == 7'h08;
  assign _065_ = adr == 7'h07;
  assign _066_ = adr == 7'h06;
  assign _067_ = adr == 7'h05;
  assign _068_ = adr == 7'h04;
  assign _069_ = adr == 7'h03;
  assign _070_ = adr == 7'h02;
  assign _071_ = adr == 7'h01;
  assign _072_ = ! adr;
  assign _000_ = _001_;
endmodule

module usb1_utmi_if(phy_clk, rst, DataOut, TxValid, TxReady, RxValid, RxActive, RxError, DataIn, rx_data, rx_valid, rx_active, rx_err, tx_data, tx_valid, tx_valid_last, tx_ready, tx_first);
  wire [7:0] _00_;
  wire _01_;
  wire _02_;
  wire [7:0] _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire [7:0] _16_;
  wire _17_;
  input [7:0] DataIn;
  wire [7:0] DataIn;
  output [7:0] DataOut;
  reg [7:0] DataOut;
  input RxActive;
  wire RxActive;
  input RxError;
  wire RxError;
  input RxValid;
  wire RxValid;
  input TxReady;
  wire TxReady;
  output TxValid;
  reg TxValid;
  input phy_clk;
  wire phy_clk;
  input rst;
  wire rst;
  output rx_active;
  reg rx_active;
  output [7:0] rx_data;
  reg [7:0] rx_data;
  output rx_err;
  reg rx_err;
  output rx_valid;
  reg rx_valid;
  input [7:0] tx_data;
  wire [7:0] tx_data;
  input tx_first;
  wire tx_first;
  output tx_ready;
  reg tx_ready;
  input tx_valid;
  wire tx_valid;
  input tx_valid_last;
  wire tx_valid_last;
  assign _07_ = TxValid & _12_;
  assign _08_ = ! rst;
  assign _09_ = ! rst;
  assign _10_ = ! rst;
  assign _11_ = ! rst;
  assign _12_ = ! TxReady;
  assign _13_ = TxReady | tx_first;
  assign _14_ = tx_valid | tx_valid_last;
  assign _15_ = _14_ | _07_;
  always @(posedge phy_clk, negedge rst)
    if (!rst) TxValid <= 1'h0;
    else TxValid <= _15_;
  always @(posedge phy_clk)
    tx_ready <= TxReady;
  always @(posedge phy_clk)
    DataOut <= _16_;
  always @(posedge phy_clk)
    rx_data <= DataIn;
  always @(posedge phy_clk, negedge rst)
    if (!rst) rx_err <= 1'h0;
    else rx_err <= RxError;
  always @(posedge phy_clk, negedge rst)
    if (!rst) rx_active <= 1'h0;
    else rx_active <= RxActive;
  always @(posedge phy_clk, negedge rst)
    if (!rst) rx_valid <= 1'h0;
    else rx_valid <= RxValid;
  assign _16_ = _17_ ? tx_data : DataOut;
  assign _06_ = TxReady;
  assign _03_ = DataIn;
  assign _01_ = _15_;
  assign _17_ = _13_;
  assign _00_ = _16_;
  assign _04_ = RxError;
  assign _02_ = RxActive;
  assign _05_ = RxValid;
endmodule

module usb_phy(clk, rst, phy_tx_mode, usb_rst, txdp, txdn, txoe, rxd, rxdp, rxdn, DataOut_i, TxValid_i, TxReady_o, RxValid_o, RxActive_o, RxError_o, DataIn_o, LineState_o);
  wire [4:0] _00_;
  wire _01_;
  wire [4:0] _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire [4:0] _08_;
  wire _09_;
  wire [4:0] _10_;
  wire _11_;
  wire [4:0] _12_;
  wire _13_;
  output [7:0] DataIn_o;
  wire [7:0] DataIn_o;
  input [7:0] DataOut_i;
  wire [7:0] DataOut_i;
  output [1:0] LineState_o;
  wire [1:0] LineState_o;
  output RxActive_o;
  wire RxActive_o;
  output RxError_o;
  wire RxError_o;
  output RxValid_o;
  wire RxValid_o;
  output TxReady_o;
  wire TxReady_o;
  input TxValid_i;
  wire TxValid_i;
  input clk;
  wire clk;
  wire fs_ce;
  input phy_tx_mode;
  wire phy_tx_mode;
  input rst;
  wire rst;
  reg [4:0] rst_cnt;
  input rxd;
  wire rxd;
  input rxdn;
  wire rxdn;
  input rxdp;
  wire rxdp;
  output txdn;
  wire txdn;
  output txdp;
  wire txdp;
  output txoe;
  wire txoe;
  output usb_rst;
  reg usb_rst;
  assign _02_ = rst_cnt + 5'h01;
  assign _03_ = rst_cnt == 5'h1f;
  assign _04_ = _06_ && fs_ce;
  assign _05_ = ! rst;
  assign _06_ = ! usb_rst;
  assign _07_ = | LineState_o;
  always @(posedge clk)
    usb_rst <= _03_;
  always @(posedge clk)
    rst_cnt <= _12_;
  assign _08_ = _09_ ? _02_ : rst_cnt;
  assign _10_ = _11_ ? 5'h00 : _08_;
  assign _12_ = rst ? _10_ : 5'h00;
  usb_rx_phy i_rx_phy (
    .DataIn_o(DataIn_o),
    .LineState(LineState_o),
    .RxActive_o(RxActive_o),
    .RxEn_i(txoe),
    .RxError_o(RxError_o),
    .RxValid_o(RxValid_o),
    .clk(clk),
    .fs_ce(fs_ce),
    .rst(rst),
    .rxd(rxd),
    .rxdn(rxdn),
    .rxdp(rxdp)
  );
  usb_tx_phy i_tx_phy (
    .DataOut_i(DataOut_i),
    .TxReady_o(TxReady_o),
    .TxValid_i(TxValid_i),
    .clk(clk),
    .fs_ce(fs_ce),
    .phy_mode(phy_tx_mode),
    .rst(rst),
    .txdn(txdn),
    .txdp(txdp),
    .txoe(txoe)
  );
  assign _01_ = _03_;
  assign _09_ = _04_;
  assign _11_ = _07_;
  assign _13_ = _05_;
  assign _00_ = _12_;
endmodule

module usb_rx_phy(clk, rst, fs_ce, rxd, rxdp, rxdn, RxValid_o, RxActive_o, RxError_o, DataIn_o, RxEn_i, LineState);
  wire [2:0] _000_;
  wire _001_;
  wire _002_;
  wire [1:0] _003_;
  wire [1:0] _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire [2:0] _009_;
  wire [2:0] _010_;
  wire [7:0] _011_;
  wire [2:0] _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire [2:0] _038_;
  wire [1:0] _039_;
  wire _040_;
  wire [2:0] _041_;
  wire _042_;
  wire _043_;
  wire [1:0] _044_;
  wire [2:0] _045_;
  wire _046_;
  wire _047_;
  wire [1:0] _048_;
  wire [2:0] _049_;
  wire _050_;
  wire _051_;
  wire [1:0] _052_;
  wire [2:0] _053_;
  wire _054_;
  wire _055_;
  wire [1:0] _056_;
  wire [2:0] _057_;
  wire _058_;
  wire _059_;
  wire [2:0] _060_;
  wire _061_;
  wire [2:0] _062_;
  wire _063_;
  wire [2:0] _064_;
  wire _065_;
  wire [2:0] _066_;
  wire _067_;
  wire [2:0] _068_;
  wire [2:0] _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire [2:0] _158_;
  wire _159_;
  wire [2:0] _160_;
  wire _161_;
  wire [2:0] _162_;
  wire _163_;
  wire [7:0] _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire [2:0] _168_;
  wire _169_;
  wire [2:0] _170_;
  wire _171_;
  wire [2:0] _172_;
  wire _173_;
  wire [2:0] _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire [2:0] _200_;
  wire _201_;
  wire [2:0] _202_;
  wire _203_;
  wire [2:0] _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire [2:0] _220_;
  wire _221_;
  wire [2:0] _222_;
  wire _223_;
  wire [2:0] _224_;
  wire _225_;
  wire _226_;
  wire _227_;
  wire _228_;
  wire _229_;
  wire _230_;
  wire _231_;
  wire _232_;
  wire _233_;
  wire [2:0] _234_;
  wire _235_;
  wire [2:0] _236_;
  wire _237_;
  wire [2:0] _238_;
  wire _239_;
  wire _240_;
  wire _241_;
  wire _242_;
  wire _243_;
  wire _244_;
  wire _245_;
  wire _246_;
  wire _247_;
  wire _248_;
  wire _249_;
  wire _250_;
  wire _251_;
  wire [2:0] _252_;
  wire _253_;
  wire [2:0] _254_;
  wire _255_;
  wire [2:0] _256_;
  wire _257_;
  wire _258_;
  wire _259_;
  wire _260_;
  wire _261_;
  wire _262_;
  wire _263_;
  wire [2:0] _264_;
  wire _265_;
  wire [2:0] _266_;
  wire _267_;
  wire [2:0] _268_;
  wire _269_;
  wire _270_;
  wire _271_;
  wire _272_;
  wire _273_;
  wire _274_;
  wire _275_;
  wire [2:0] _276_;
  wire _277_;
  wire [2:0] _278_;
  wire _279_;
  wire [2:0] _280_;
  wire _281_;
  wire _282_;
  wire _283_;
  wire _284_;
  wire _285_;
  wire _286_;
  wire _287_;
  wire [2:0] _288_;
  wire _289_;
  wire [2:0] _290_;
  wire _291_;
  wire [2:0] _292_;
  wire _293_;
  wire _294_;
  wire _295_;
  wire _296_;
  wire _297_;
  wire _298_;
  wire _299_;
  wire [2:0] _300_;
  wire _301_;
  wire [2:0] _302_;
  wire _303_;
  wire [2:0] _304_;
  wire _305_;
  wire [2:0] _306_;
  wire _307_;
  wire _308_;
  wire _309_;
  wire _310_;
  wire _311_;
  wire _312_;
  wire _313_;
  wire _314_;
  wire [2:0] _315_;
  wire _316_;
  wire _317_;
  wire _318_;
  wire _319_;
  wire _320_;
  wire _321_;
  wire _322_;
  wire _323_;
  wire _324_;
  wire _325_;
  wire _326_;
  wire _327_;
  wire _328_;
  wire _329_;
  wire _330_;
  wire _331_;
  wire _332_;
  wire _333_;
  wire _334_;
  wire _335_;
  wire _336_;
  wire _337_;
  wire _338_;
  wire _339_;
  wire _340_;
  wire [2:0] _341_;
  wire _342_;
  wire _343_;
  wire _344_;
  wire [2:0] _345_;
  wire _346_;
  wire [1:0] _347_;
  wire _348_;
  wire [1:0] _349_;
  wire _350_;
  wire [1:0] _351_;
  wire _352_;
  wire [1:0] _353_;
  wire _354_;
  wire [1:0] _355_;
  wire _356_;
  wire [1:0] _357_;
  wire _358_;
  wire [1:0] _359_;
  wire _360_;
  wire [1:0] _361_;
  wire _362_;
  wire _363_;
  wire _364_;
  wire _365_;
  wire _366_;
  wire _367_;
  wire _368_;
  wire _369_;
  wire _370_;
  wire [1:0] _371_;
  wire _372_;
  wire _373_;
  wire _374_;
  wire _375_;
  wire _376_;
  wire _377_;
  wire _378_;
  wire _379_;
  wire _380_;
  output [7:0] DataIn_o;
  wire [7:0] DataIn_o;
  output [1:0] LineState;
  wire [1:0] LineState;
  output RxActive_o;
  wire RxActive_o;
  input RxEn_i;
  wire RxEn_i;
  output RxError_o;
  wire RxError_o;
  output RxValid_o;
  wire RxValid_o;
  reg [2:0] bit_cnt;
  reg bit_stuff_err;
  reg byte_err;
  wire change;
  input clk;
  wire clk;
  wire [1:0] dpll_next_state;
  reg [1:0] dpll_state;
  wire drop_bit;
  output fs_ce;
  reg fs_ce;
  wire fs_ce_d;
  reg fs_ce_r1;
  reg fs_ce_r2;
  wire [2:0] fs_next_state;
  reg [2:0] fs_state;
  reg [7:0] hold_reg;
  wire j;
  wire k;
  wire lock_en;
  reg [2:0] one_cnt;
  input rst;
  wire rst;
  reg rx_active;
  reg rx_en;
  reg rx_valid;
  reg rx_valid1;
  reg rx_valid_r;
  input rxd;
  wire rxd;
  reg rxd_r;
  reg rxd_s;
  reg rxd_s0;
  reg rxd_s1;
  input rxdn;
  wire rxdn;
  reg rxdn_s;
  reg rxdn_s0;
  reg rxdn_s1;
  reg rxdn_s_r;
  input rxdp;
  wire rxdp;
  reg rxdp_s;
  reg rxdp_s0;
  reg rxdp_s1;
  reg rxdp_s_r;
  reg sd_nrzi;
  reg sd_r;
  wire se0;
  reg se0_r;
  reg se0_s;
  reg shift_en;
  reg sync_err;
  wire sync_err_d;
  wire synced_d;
  assign _068_ = one_cnt + 3'h1;
  assign _069_ = bit_cnt + 3'h1;
  assign _070_ = _116_ & sync_err_d;
  assign _071_ = rxdp_s0 & rxdp_s1;
  assign _072_ = rxdp_s0 & rxdp_s1;
  assign _073_ = rxdn_s0 & rxdn_s1;
  assign _074_ = rxdn_s0 & rxdn_s1;
  assign _075_ = _119_ & rxdn_s;
  assign _076_ = rxdp_s & _120_;
  assign _077_ = _121_ & _122_;
  assign _078_ = drop_bit & sd_nrzi;
  assign _079_ = _078_ & fs_ce;
  assign _080_ = _079_ & _135_;
  assign _081_ = _080_ & rx_active;
  assign _082_ = _143_ & rx_valid1;
  assign _083_ = _082_ & fs_ce;
  assign _084_ = se0 & _144_;
  assign _085_ = _084_ & _379_;
  assign _086_ = _085_ & rx_active;
  assign _087_ = one_cnt == 3'h6;
  assign _088_ = bit_cnt == 3'h7;
  assign _089_ = rxd_s0 && rxd_s1;
  assign _090_ = _117_ && _118_;
  assign _091_ = lock_en && change;
  assign _092_ = lock_en && change;
  assign _093_ = lock_en && change;
  assign _094_ = lock_en && change;
  assign _095_ = fs_ce && _125_;
  assign _096_ = _095_ && _126_;
  assign _097_ = _096_ && _127_;
  assign _098_ = k && rx_en;
  assign _099_ = j && rx_en;
  assign _100_ = k && rx_en;
  assign _101_ = j && rx_en;
  assign _102_ = k && rx_en;
  assign _103_ = j && rx_en;
  assign _104_ = k && rx_en;
  assign _105_ = k && rx_en;
  assign _106_ = synced_d && rx_en;
  assign _107_ = se0 && rx_valid_r;
  assign _108_ = rx_active && fs_ce;
  assign _109_ = fs_ce && shift_en;
  assign _110_ = _109_ && _136_;
  assign _111_ = fs_ce && _139_;
  assign _112_ = fs_ce && _141_;
  assign _113_ = _112_ && _088_;
  assign _114_ = rx_valid1 && fs_ce;
  assign _115_ = _114_ && _142_;
  assign _116_ = ! rx_active;
  assign _117_ = ! rxd_s0;
  assign _118_ = ! rxd_s1;
  assign _119_ = ! rxdp_s;
  assign _120_ = ! rxdn_s;
  assign _121_ = ! rxdp_s;
  assign _122_ = ! rxdn_s;
  assign _123_ = ! rst;
  assign _124_ = ! rst;
  assign _125_ = ! rx_active;
  assign _126_ = ! se0;
  assign _127_ = ! se0_s;
  assign _128_ = ! rst;
  assign _129_ = ! rst;
  assign _130_ = ! rx_active;
  assign _131_ = ! _380_;
  assign _132_ = ! rst;
  assign _133_ = ! shift_en;
  assign _134_ = ! sd_nrzi;
  assign _135_ = ! se0;
  assign _136_ = ! drop_bit;
  assign _137_ = ! rst;
  assign _138_ = ! shift_en;
  assign _139_ = ! drop_bit;
  assign _140_ = ! rst;
  assign _141_ = ! drop_bit;
  assign _142_ = ! drop_bit;
  assign _143_ = ! drop_bit;
  assign _144_ = ! se0_r;
  assign _145_ = _134_ || drop_bit;
  assign _146_ = rxd_r != rxd_s;
  assign _147_ = sync_err | bit_stuff_err;
  assign _148_ = _147_ | byte_err;
  assign _149_ = _072_ | rxdp_s_r;
  assign _150_ = _074_ | rxdn_s_r;
  assign _151_ = synced_d | rx_active;
  always @(posedge clk)
    byte_err <= _086_;
  always @(posedge clk)
    se0_r <= _077_;
  always @(posedge clk)
    rx_valid <= _083_;
  always @(posedge clk)
    rx_valid1 <= _156_;
  always @(posedge clk)
    bit_cnt <= _162_;
  always @(posedge clk)
    hold_reg <= _164_;
  always @(posedge clk)
    shift_en <= _166_;
  always @(posedge clk)
    bit_stuff_err <= _081_;
  always @(posedge clk)
    one_cnt <= _174_;
  always @(posedge clk)
    sd_nrzi <= _180_;
  always @(posedge clk)
    sd_r <= _182_;
  always @(posedge clk)
    rx_valid_r <= _186_;
  always @(posedge clk)
    rx_active <= _192_;
  always @(posedge clk)
    fs_state <= _345_;
  always @(posedge clk)
    fs_ce <= fs_ce_r2;
  always @(posedge clk)
    fs_ce_r2 <= fs_ce_r1;
  always @(posedge clk)
    fs_ce_r1 <= _366_;
  always @(posedge clk)
    dpll_state <= _371_;
  always @(posedge clk)
    rxd_r <= rxd_s;
  always @(posedge clk)
    se0_s <= _373_;
  always @(posedge clk)
    rxdn_s <= _150_;
  always @(posedge clk)
    rxdn_s_r <= _073_;
  always @(posedge clk)
    rxdn_s1 <= rxdn_s0;
  always @(posedge clk)
    rxdn_s0 <= rxdn;
  always @(posedge clk)
    rxdp_s <= _149_;
  always @(posedge clk)
    rxdp_s_r <= _071_;
  always @(posedge clk)
    rxdp_s1 <= rxdp_s0;
  always @(posedge clk)
    rxdp_s0 <= rxdp;
  always @(posedge clk)
    rxd_s <= _377_;
  always @(posedge clk)
    rxd_s1 <= rxd_s0;
  always @(posedge clk)
    rxd_s0 <= rxd;
  always @(posedge clk)
    sync_err <= _070_;
  always @(posedge clk)
    rx_en <= RxEn_i;
  assign _152_ = _153_ ? 1'h0 : rx_valid1;
  assign _154_ = _155_ ? 1'h1 : _152_;
  assign _156_ = rst ? _154_ : 1'h0;
  assign _158_ = _159_ ? _069_ : bit_cnt;
  assign _160_ = shift_en ? _158_ : 3'h0;
  assign _162_ = rst ? _160_ : 3'h0;
  assign _164_ = _165_ ? { sd_nrzi, hold_reg[7:1] } : hold_reg;
  assign _166_ = _167_ ? _151_ : shift_en;
  assign _168_ = _169_ ? 3'h0 : _068_;
  assign _170_ = _171_ ? _168_ : one_cnt;
  assign _172_ = shift_en ? _170_ : 3'h0;
  assign _174_ = rst ? _172_ : 3'h0;
  assign _176_ = _177_ ? _131_ : sd_nrzi;
  assign _178_ = rx_active ? _176_ : 1'h1;
  assign _180_ = rst ? _178_ : 1'h0;
  assign _182_ = _183_ ? rxd_s : sd_r;
  assign _184_ = _185_ ? 1'h0 : rx_valid_r;
  assign _186_ = _187_ ? 1'h1 : _184_;
  assign _188_ = _189_ ? 1'h0 : rx_active;
  assign _190_ = _191_ ? 1'h1 : _188_;
  assign _192_ = rst ? _190_ : 1'h0;
  assign _194_ = _195_ ? 1'h1 : 1'h0;
  assign _196_ = _197_ ? _194_ : 1'hx;
  assign _197_ = fs_state == 3'h7;
  assign _198_ = _199_ ? _196_ : 1'hx;
  assign _200_ = _201_ ? 3'h7 : 3'h0;
  assign _202_ = _203_ ? _200_ : 3'hx;
  assign _203_ = fs_state == 3'h6;
  assign _204_ = _205_ ? _202_ : 3'hx;
  assign _206_ = _207_ ? 1'h0 : 1'h1;
  assign _208_ = _209_ ? _206_ : 1'hx;
  assign _209_ = fs_state == 3'h6;
  assign _210_ = _211_ ? _208_ : 1'hx;
  assign _212_ = _213_ ? 1'h1 : 1'h0;
  assign _214_ = _215_ ? 1'hx : _212_;
  assign _216_ = _217_ ? _214_ : 1'hx;
  assign _217_ = fs_state == 3'h5;
  assign _218_ = _219_ ? _216_ : 1'hx;
  assign _220_ = _221_ ? 3'hx : 3'h0;
  assign _222_ = _223_ ? _220_ : 3'hx;
  assign _223_ = fs_state == 3'h5;
  assign _224_ = _225_ ? _222_ : 3'hx;
  assign _226_ = _227_ ? 1'h0 : 1'h1;
  assign _228_ = _229_ ? 1'hx : _226_;
  assign _230_ = _231_ ? _228_ : 1'hx;
  assign _231_ = fs_state == 3'h5;
  assign _232_ = _233_ ? _230_ : 1'hx;
  assign _234_ = _235_ ? 3'h6 : _066_;
  assign _236_ = _237_ ? _234_ : 3'hx;
  assign _237_ = fs_state == 3'h5;
  assign _238_ = _239_ ? _236_ : 3'hx;
  assign _240_ = _241_ ? 1'h0 : _065_;
  assign _242_ = _243_ ? _240_ : 1'hx;
  assign _243_ = fs_state == 3'h5;
  assign _244_ = _245_ ? _242_ : 1'hx;
  assign _246_ = _247_ ? 1'h0 : _055_;
  assign _248_ = _249_ ? _246_ : 1'hx;
  assign _249_ = fs_state == 3'h5;
  assign _250_ = _251_ ? _248_ : 1'hx;
  assign _252_ = _253_ ? 3'h5 : 3'h0;
  assign _254_ = _255_ ? _252_ : 3'hx;
  assign _255_ = fs_state == 3'h4;
  assign _256_ = _257_ ? _254_ : 3'hx;
  assign _258_ = _259_ ? 1'h0 : 1'h1;
  assign _260_ = _261_ ? _258_ : 1'hx;
  assign _261_ = fs_state == 3'h4;
  assign _262_ = _263_ ? _260_ : 1'hx;
  assign _264_ = _265_ ? 3'h4 : 3'h0;
  assign _266_ = _267_ ? _264_ : 3'hx;
  assign _267_ = fs_state == 3'h3;
  assign _268_ = _269_ ? _266_ : 3'hx;
  assign _270_ = _271_ ? 1'h0 : 1'h1;
  assign _272_ = _273_ ? _270_ : 1'hx;
  assign _273_ = fs_state == 3'h3;
  assign _274_ = _275_ ? _272_ : 1'hx;
  assign _276_ = _277_ ? 3'h3 : 3'h0;
  assign _278_ = _279_ ? _276_ : 3'hx;
  assign _279_ = fs_state == 3'h2;
  assign _280_ = _281_ ? _278_ : 3'hx;
  assign _282_ = _283_ ? 1'h0 : 1'h1;
  assign _284_ = _285_ ? _282_ : 1'hx;
  assign _285_ = fs_state == 3'h2;
  assign _286_ = _287_ ? _284_ : 1'hx;
  assign _288_ = _289_ ? 3'h2 : 3'h0;
  assign _290_ = _291_ ? _288_ : 3'hx;
  assign _291_ = fs_state == 3'h1;
  assign _292_ = _293_ ? _290_ : 3'hx;
  assign _294_ = _295_ ? 1'h0 : 1'h1;
  assign _296_ = _297_ ? _294_ : 1'hx;
  assign _297_ = fs_state == 3'h1;
  assign _298_ = _299_ ? _296_ : 1'hx;
  assign _300_ = _301_ ? 3'h1 : fs_state;
  assign _302_ = _303_ ? _300_ : 3'hx;
  assign _303_ = ! fs_state;
  assign _304_ = _305_ ? _302_ : 3'hx;
  function [2:0] _593_;
    input [2:0] a;
    input [23:0] b;
    input [7:0] s;
    casez (s) // synopsys parallel_case
      8'b???????1:
        _593_ = b[2:0];
      8'b??????1?:
        _593_ = b[5:3];
      8'b?????1??:
        _593_ = b[8:6];
      8'b????1???:
        _593_ = b[11:9];
      8'b???1????:
        _593_ = b[14:12];
      8'b??1?????:
        _593_ = b[17:15];
      8'b?1??????:
        _593_ = b[20:18];
      8'b1???????:
        _593_ = b[23:21];
      default:
        _593_ = a;
    endcase
  endfunction
  assign _306_ = _593_(3'hx, { _049_, _053_, _057_, _060_, _062_, _064_, _038_, 3'h0 }, { _314_, _313_, _312_, _311_, _310_, _309_, _308_, _307_ });
  assign _307_ = fs_state == 3'h7;
  assign _308_ = fs_state == 3'h6;
  assign _309_ = fs_state == 3'h5;
  assign _310_ = fs_state == 3'h4;
  assign _311_ = fs_state == 3'h3;
  assign _312_ = fs_state == 3'h2;
  assign _313_ = fs_state == 3'h1;
  assign _314_ = ! fs_state;
  assign _315_ = _316_ ? _306_ : 3'hx;
  function [0:0] _603_;
    input [0:0] a;
    input [7:0] b;
    input [7:0] s;
    casez (s) // synopsys parallel_case
      8'b???????1:
        _603_ = b[0:0];
      8'b??????1?:
        _603_ = b[1:1];
      8'b?????1??:
        _603_ = b[2:2];
      8'b????1???:
        _603_ = b[3:3];
      8'b???1????:
        _603_ = b[4:4];
      8'b??1?????:
        _603_ = b[5:5];
      8'b?1??????:
        _603_ = b[6:6];
      8'b1???????:
        _603_ = b[7:7];
      default:
        _603_ = a;
    endcase
  endfunction
  assign _317_ = _603_(1'hx, { 1'h0, _050_, _054_, _058_, _061_, _063_, _067_, 1'h0 }, { _325_, _324_, _323_, _322_, _321_, _320_, _319_, _318_ });
  assign _318_ = fs_state == 3'h7;
  assign _319_ = fs_state == 3'h6;
  assign _320_ = fs_state == 3'h5;
  assign _321_ = fs_state == 3'h4;
  assign _322_ = fs_state == 3'h3;
  assign _323_ = fs_state == 3'h2;
  assign _324_ = fs_state == 3'h1;
  assign _325_ = ! fs_state;
  assign _326_ = _327_ ? _317_ : 1'hx;
  function [0:0] _613_;
    input [0:0] a;
    input [7:0] b;
    input [7:0] s;
    casez (s) // synopsys parallel_case
      8'b???????1:
        _613_ = b[0:0];
      8'b??????1?:
        _613_ = b[1:1];
      8'b?????1??:
        _613_ = b[2:2];
      8'b????1???:
        _613_ = b[3:3];
      8'b???1????:
        _613_ = b[4:4];
      8'b??1?????:
        _613_ = b[5:5];
      8'b?1??????:
        _613_ = b[6:6];
      8'b1???????:
        _613_ = b[7:7];
      default:
        _613_ = a;
    endcase
  endfunction
  assign _328_ = _613_(1'hx, { 5'h00, _051_, 1'h0, _059_ }, { _336_, _335_, _334_, _333_, _332_, _331_, _330_, _329_ });
  assign _329_ = fs_state == 3'h7;
  assign _330_ = fs_state == 3'h6;
  assign _331_ = fs_state == 3'h5;
  assign _332_ = fs_state == 3'h4;
  assign _333_ = fs_state == 3'h3;
  assign _334_ = fs_state == 3'h2;
  assign _335_ = fs_state == 3'h1;
  assign _336_ = ! fs_state;
  assign _337_ = _338_ ? _328_ : 1'hx;
  assign _339_ = _340_ ? _046_ : 1'h0;
  assign _341_ = _342_ ? _045_ : fs_state;
  assign _343_ = _344_ ? _047_ : 1'h0;
  assign _345_ = rst ? fs_next_state : 3'h0;
  assign _347_ = _348_ ? 2'h0 : 2'hx;
  assign _348_ = dpll_state == 2'h3;
  assign _349_ = _350_ ? 2'h0 : 2'h3;
  assign _351_ = _352_ ? _349_ : 2'hx;
  assign _352_ = dpll_state == 2'h2;
  assign _353_ = _354_ ? 2'h3 : 2'h2;
  assign _355_ = _356_ ? _353_ : 2'hx;
  assign _356_ = dpll_state == 2'h1;
  assign _357_ = _358_ ? 2'h0 : 2'h1;
  assign _359_ = _360_ ? _357_ : 2'hx;
  assign _360_ = ! dpll_state;
  function [1:0] _638_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _638_ = b[1:0];
      4'b??1?:
        _638_ = b[3:2];
      4'b?1??:
        _638_ = b[5:4];
      4'b1???:
        _638_ = b[7:6];
      default:
        _638_ = a;
    endcase
  endfunction
  assign _361_ = _638_(2'hx, { _044_, _048_, _052_, _056_ }, { _365_, _364_, _363_, _362_ });
  assign _362_ = dpll_state == 2'h3;
  assign _363_ = dpll_state == 2'h2;
  assign _364_ = dpll_state == 2'h1;
  assign _365_ = ! dpll_state;
  function [0:0] _643_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _643_ = b[0:0];
      4'b??1?:
        _643_ = b[1:1];
      4'b?1??:
        _643_ = b[2:2];
      4'b1???:
        _643_ = b[3:3];
      default:
        _643_ = a;
    endcase
  endfunction
  assign _366_ = _643_(1'hx, 4'h4, { _370_, _369_, _368_, _367_ });
  assign _367_ = dpll_state == 2'h3;
  assign _368_ = dpll_state == 2'h2;
  assign _369_ = dpll_state == 2'h1;
  assign _370_ = ! dpll_state;
  assign _371_ = rst ? dpll_next_state : 2'h1;
  assign _373_ = _374_ ? _077_ : se0_s;
  assign _375_ = _376_ ? 1'h0 : rxd_s;
  assign _377_ = _378_ ? 1'h1 : _375_;
  assign _379_ = | bit_cnt[2:1];
  assign _380_ = rxd_s ^ sd_r;
  assign RxActive_o = rx_active;
  assign RxValid_o = rx_valid;
  assign RxError_o = _148_;
  assign DataIn_o = hold_reg;
  assign LineState = { rxdn_s1, rxdp_s1 };
  assign k = _075_;
  assign j = _076_;
  assign se0 = _077_;
  assign lock_en = rx_en;
  assign change = _146_;
  assign drop_bit = _087_;
  assign _002_ = _086_;
  assign _032_ = _077_;
  assign _016_ = _083_;
  assign _001_ = _081_;
  assign _036_ = _042_;
  assign _009_ = _041_;
  assign _037_ = _043_;
  assign _005_ = fs_ce_r2;
  assign _008_ = fs_ce_r1;
  assign _007_ = fs_ce_d;
  assign _006_ = _040_;
  assign _003_ = _039_;
  assign _018_ = rxd_s;
  assign _024_ = _150_;
  assign _025_ = _073_;
  assign _023_ = rxdn_s0;
  assign _022_ = rxdn;
  assign _028_ = _149_;
  assign _029_ = _071_;
  assign _027_ = rxdp_s0;
  assign _026_ = rxdp;
  assign _020_ = rxd_s0;
  assign _019_ = rxd;
  assign _035_ = _070_;
  assign _014_ = RxEn_i;
  assign _153_ = _115_;
  assign _155_ = _113_;
  assign _157_ = _140_;
  assign _015_ = _156_;
  assign _159_ = _111_;
  assign _161_ = _138_;
  assign _163_ = _137_;
  assign _000_ = _162_;
  assign _165_ = _110_;
  assign _011_ = _164_;
  assign _167_ = fs_ce;
  assign _034_ = _166_;
  assign _169_ = _145_;
  assign _171_ = fs_ce;
  assign _173_ = _133_;
  assign _175_ = _132_;
  assign _012_ = _174_;
  assign _177_ = _108_;
  assign _179_ = _130_;
  assign _181_ = _129_;
  assign _030_ = _180_;
  assign _183_ = fs_ce;
  assign _031_ = _182_;
  assign _185_ = fs_ce;
  assign _187_ = rx_valid;
  assign _017_ = _186_;
  assign _189_ = _107_;
  assign _191_ = _106_;
  assign _193_ = _128_;
  assign _013_ = _192_;
  assign _195_ = k;
  assign _199_ = _097_;
  assign _059_ = _198_;
  assign _201_ = _105_;
  assign _205_ = _097_;
  assign _038_ = _204_;
  assign _207_ = _105_;
  assign _211_ = _097_;
  assign _067_ = _210_;
  assign _213_ = _104_;
  assign _215_ = _103_;
  assign _219_ = _097_;
  assign _055_ = _218_;
  assign _221_ = _103_;
  assign _225_ = _097_;
  assign _066_ = _224_;
  assign _227_ = _104_;
  assign _229_ = _103_;
  assign _233_ = _097_;
  assign _065_ = _232_;
  assign _235_ = _103_;
  assign _239_ = _097_;
  assign _064_ = _238_;
  assign _241_ = _103_;
  assign _245_ = _097_;
  assign _063_ = _244_;
  assign _247_ = _103_;
  assign _251_ = _097_;
  assign _051_ = _250_;
  assign _253_ = _102_;
  assign _257_ = _097_;
  assign _062_ = _256_;
  assign _259_ = _102_;
  assign _263_ = _097_;
  assign _061_ = _262_;
  assign _265_ = _101_;
  assign _269_ = _097_;
  assign _060_ = _268_;
  assign _271_ = _101_;
  assign _275_ = _097_;
  assign _058_ = _274_;
  assign _277_ = _100_;
  assign _281_ = _097_;
  assign _057_ = _280_;
  assign _283_ = _100_;
  assign _287_ = _097_;
  assign _054_ = _286_;
  assign _289_ = _099_;
  assign _293_ = _097_;
  assign _053_ = _292_;
  assign _295_ = _099_;
  assign _299_ = _097_;
  assign _050_ = _298_;
  assign _301_ = _098_;
  assign _305_ = _097_;
  assign _049_ = _304_;
  assign _316_ = _097_;
  assign _045_ = _315_;
  assign _327_ = _097_;
  assign _046_ = _326_;
  assign _338_ = _097_;
  assign _047_ = _337_;
  assign _340_ = _097_;
  assign _042_ = _339_;
  assign _342_ = _097_;
  assign _041_ = _341_;
  assign _344_ = _097_;
  assign _043_ = _343_;
  assign _346_ = _124_;
  assign _010_ = _345_;
  assign _056_ = _347_;
  assign _350_ = _093_;
  assign _052_ = _351_;
  assign _354_ = _092_;
  assign _048_ = _355_;
  assign _358_ = _091_;
  assign _044_ = _359_;
  assign _039_ = _361_;
  assign _040_ = _366_;
  assign _372_ = _123_;
  assign _004_ = _371_;
  assign _374_ = fs_ce;
  assign _033_ = _373_;
  assign _376_ = _090_;
  assign _378_ = _089_;
  assign _021_ = _377_;
  assign synced_d = _343_;
  assign fs_next_state = _341_;
  assign sync_err_d = _339_;
  assign dpll_next_state = _361_;
  assign fs_ce_d = _366_;
endmodule

module usb_tx_phy(clk, rst, fs_ce, phy_mode, txdp, txdn, txoe, DataOut_i, TxValid_i, TxReady_o);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire [2:0] _006_;
  wire _007_;
  wire [7:0] _008_;
  wire [7:0] _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire [2:0] _014_;
  wire [2:0] _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire [2:0] _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire [2:0] _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire [2:0] _038_;
  wire _039_;
  wire _040_;
  wire [2:0] _041_;
  wire _042_;
  wire [2:0] _043_;
  wire [2:0] _044_;
  wire [2:0] _045_;
  wire [2:0] _046_;
  wire [2:0] _047_;
  wire [2:0] _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire [2:0] _105_;
  wire _106_;
  wire [2:0] _107_;
  wire _108_;
  wire [2:0] _109_;
  wire _110_;
  wire [2:0] _111_;
  wire _112_;
  wire [2:0] _113_;
  wire _114_;
  wire [2:0] _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire [2:0] _125_;
  wire _126_;
  wire [2:0] _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire [2:0] _133_;
  wire _134_;
  wire [2:0] _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire [2:0] _145_;
  wire _146_;
  wire [2:0] _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire [2:0] _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire [2:0] _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  wire _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire _221_;
  wire _222_;
  wire _223_;
  wire _224_;
  wire _225_;
  wire _226_;
  wire _227_;
  wire _228_;
  wire _229_;
  wire _230_;
  wire _231_;
  wire _232_;
  wire _233_;
  wire _234_;
  wire _235_;
  wire _236_;
  wire _237_;
  wire _238_;
  wire _239_;
  wire _240_;
  wire _241_;
  wire [2:0] _242_;
  wire _243_;
  wire [2:0] _244_;
  wire _245_;
  wire [2:0] _246_;
  wire _247_;
  wire [2:0] _248_;
  wire _249_;
  wire [7:0] _250_;
  wire _251_;
  wire [7:0] _252_;
  wire _253_;
  wire _254_;
  wire _255_;
  wire _256_;
  wire _257_;
  wire _258_;
  wire _259_;
  wire _260_;
  wire _261_;
  wire _262_;
  wire _263_;
  wire _264_;
  wire [2:0] _265_;
  wire _266_;
  wire [2:0] _267_;
  wire _268_;
  wire [2:0] _269_;
  wire _270_;
  wire _271_;
  wire _272_;
  wire _273_;
  wire _274_;
  wire _275_;
  wire _276_;
  wire _277_;
  wire _278_;
  wire _279_;
  wire _280_;
  wire _281_;
  wire _282_;
  wire _283_;
  wire _284_;
  wire _285_;
  wire _286_;
  wire _287_;
  wire _288_;
  wire _289_;
  wire _290_;
  wire _291_;
  wire _292_;
  wire _293_;
  input [7:0] DataOut_i;
  wire [7:0] DataOut_i;
  output TxReady_o;
  reg TxReady_o;
  input TxValid_i;
  wire TxValid_i;
  reg append_eop;
  reg append_eop_sync1;
  reg append_eop_sync2;
  reg append_eop_sync3;
  reg append_eop_sync4;
  reg [2:0] bit_cnt;
  input clk;
  wire clk;
  reg data_done;
  wire eop_done;
  input fs_ce;
  wire fs_ce;
  wire hold;
  reg [7:0] hold_reg;
  reg [7:0] hold_reg_d;
  reg ld_data;
  wire ld_data_d;
  wire ld_eop_d;
  wire ld_sop_d;
  wire [2:0] next_state;
  reg [2:0] one_cnt;
  input phy_mode;
  wire phy_mode;
  input rst;
  wire rst;
  reg sd_bs_o;
  reg sd_nrzi_o;
  reg sd_raw_o;
  reg sft_done;
  wire sft_done_e;
  reg sft_done_r;
  reg [2:0] state;
  wire stuff;
  reg tx_ip;
  reg tx_ip_sync;
  wire tx_ready_d;
  output txdn;
  reg txdn;
  output txdp;
  reg txdp;
  output txoe;
  reg txoe;
  reg txoe_r1;
  reg txoe_r2;
  assign _047_ = bit_cnt + 3'h1;
  assign _048_ = one_cnt + 3'h1;
  assign _049_ = tx_ready_d & TxValid_i;
  assign _050_ = _072_ & _055_;
  assign _051_ = sft_done & _073_;
  assign _052_ = append_eop_sync3 & _086_;
  assign _053_ = _093_ & sd_nrzi_o;
  assign _054_ = _095_ & _102_;
  assign _055_ = bit_cnt == 3'h7;
  assign _056_ = one_cnt == 3'h6;
  assign _057_ = TxValid_i && _066_;
  assign _058_ = fs_ce && _070_;
  assign _059_ = _097_ && sft_done_e;
  assign _060_ = data_done && sft_done_e;
  assign _061_ = _098_ && fs_ce;
  assign _062_ = ! rst;
  assign _063_ = ! rst;
  assign _064_ = ! rst;
  assign _065_ = ! rst;
  assign _066_ = ! tx_ip;
  assign _067_ = ! TxValid_i;
  assign _068_ = ! rst;
  assign _069_ = ! tx_ip_sync;
  assign _070_ = ! hold;
  assign _071_ = ! tx_ip_sync;
  assign _072_ = ! hold;
  assign _073_ = ! sft_done_r;
  assign _074_ = ! rst;
  assign _075_ = ! tx_ip_sync;
  assign _076_ = ! sd_raw_o;
  assign _077_ = ! rst;
  assign _078_ = ! tx_ip_sync;
  assign _079_ = ! rst;
  assign _080_ = ! tx_ip_sync;
  assign _081_ = ! txoe_r1;
  assign _082_ = ! rst;
  assign _083_ = ! rst;
  assign _084_ = ! rst;
  assign _085_ = ! rst;
  assign _086_ = ! append_eop_sync4;
  assign _087_ = ! rst;
  assign _088_ = ! rst;
  assign _089_ = ! rst;
  assign _090_ = ! rst;
  assign _091_ = ! _104_;
  assign _092_ = ! rst;
  assign _093_ = ! append_eop_sync3;
  assign _094_ = ! rst;
  assign _095_ = ! append_eop_sync3;
  assign _096_ = ! rst;
  assign _097_ = ! data_done;
  assign _098_ = ! eop_done;
  assign _099_ = _076_ || stuff;
  assign _100_ = _080_ || _081_;
  assign _101_ = ~ sd_nrzi_o;
  assign _102_ = ~ sd_nrzi_o;
  assign _103_ = append_eop_sync2 | _052_;
  assign _104_ = txoe_r1 | txoe_r2;
  always @(posedge clk)
    state <= _188_;
  always @(posedge clk)
    txdn <= _192_;
  always @(posedge clk)
    txdp <= _196_;
  always @(posedge clk)
    txoe <= _200_;
  always @(posedge clk)
    txoe_r2 <= _204_;
  always @(posedge clk)
    txoe_r1 <= _208_;
  always @(posedge clk)
    append_eop_sync4 <= _212_;
  always @(posedge clk)
    append_eop_sync3 <= _216_;
  always @(posedge clk)
    append_eop_sync2 <= _220_;
  always @(posedge clk)
    append_eop_sync1 <= _224_;
  always @(posedge clk)
    append_eop <= _230_;
  always @(posedge clk)
    sd_nrzi_o <= _236_;
  always @(posedge clk)
    sd_bs_o <= _240_;
  always @(posedge clk)
    one_cnt <= _248_;
  always @(posedge clk)
    hold_reg_d <= hold_reg;
  always @(posedge clk)
    hold_reg <= _252_;
  always @(posedge clk)
    sft_done_r <= sft_done;
  always @(posedge clk)
    sft_done <= _050_;
  always @(posedge clk)
    sd_raw_o <= _263_;
  always @(posedge clk)
    bit_cnt <= _269_;
  always @(posedge clk)
    data_done <= _275_;
  always @(posedge clk)
    tx_ip_sync <= _279_;
  always @(posedge clk)
    tx_ip <= _285_;
  always @(posedge clk)
    ld_data <= _174_;
  always @(posedge clk)
    TxReady_o <= _287_;
  assign _105_ = _106_ ? 3'h0 : state;
  assign _107_ = _108_ ? _105_ : 3'hx;
  assign _108_ = state == 3'h5;
  assign _109_ = _110_ ? 3'h5 : state;
  assign _111_ = _112_ ? _109_ : 3'hx;
  assign _112_ = state == 3'h4;
  assign _113_ = _114_ ? 3'h4 : state;
  assign _115_ = _116_ ? _113_ : 3'hx;
  assign _116_ = state == 3'h3;
  assign _117_ = _118_ ? 1'h1 : 1'h0;
  assign _119_ = _120_ ? _117_ : 1'hx;
  assign _120_ = state == 3'h2;
  assign _121_ = _122_ ? 1'h1 : 1'h0;
  assign _123_ = _124_ ? _121_ : 1'hx;
  assign _124_ = state == 3'h2;
  assign _125_ = _126_ ? 3'h3 : state;
  assign _127_ = _128_ ? _125_ : 3'hx;
  assign _128_ = state == 3'h2;
  assign _129_ = _130_ ? 1'h1 : 1'h0;
  assign _131_ = _132_ ? _129_ : 1'hx;
  assign _132_ = state == 3'h2;
  assign _133_ = _134_ ? 3'h2 : state;
  assign _135_ = _136_ ? _133_ : 3'hx;
  assign _136_ = state == 3'h1;
  assign _137_ = _138_ ? 1'h1 : 1'h0;
  assign _139_ = _140_ ? _137_ : 1'hx;
  assign _140_ = state == 3'h1;
  assign _141_ = _142_ ? 1'h1 : 1'h0;
  assign _143_ = _144_ ? _141_ : 1'hx;
  assign _144_ = state == 3'h1;
  assign _145_ = _146_ ? 3'h1 : state;
  assign _147_ = _148_ ? _145_ : 3'hx;
  assign _148_ = ! state;
  assign _149_ = _150_ ? 1'h1 : 1'h0;
  assign _151_ = _152_ ? _149_ : 1'hx;
  assign _152_ = ! state;
  function [0:0] _413_;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _413_ = b[0:0];
      6'b????1?:
        _413_ = b[1:1];
      6'b???1??:
        _413_ = b[2:2];
      6'b??1???:
        _413_ = b[3:3];
      6'b?1????:
        _413_ = b[4:4];
      6'b1?????:
        _413_ = b[5:5];
      default:
        _413_ = a;
    endcase
  endfunction
  assign _153_ = _413_(1'hx, { _037_, 5'h00 }, { _159_, _158_, _157_, _156_, _155_, _154_ });
  assign _154_ = state == 3'h5;
  assign _155_ = state == 3'h4;
  assign _156_ = state == 3'h3;
  assign _157_ = state == 3'h2;
  assign _158_ = state == 3'h1;
  assign _159_ = ! state;
  function [2:0] _420_;
    input [2:0] a;
    input [17:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _420_ = b[2:0];
      6'b????1?:
        _420_ = b[5:3];
      6'b???1??:
        _420_ = b[8:6];
      6'b??1???:
        _420_ = b[11:9];
      6'b?1????:
        _420_ = b[14:12];
      6'b1?????:
        _420_ = b[17:15];
      default:
        _420_ = a;
    endcase
  endfunction
  assign _160_ = _420_(3'hx, { _038_, _041_, _043_, _044_, _045_, _046_ }, { _166_, _165_, _164_, _163_, _162_, _161_ });
  assign _161_ = state == 3'h5;
  assign _162_ = state == 3'h4;
  assign _163_ = state == 3'h3;
  assign _164_ = state == 3'h2;
  assign _165_ = state == 3'h1;
  assign _166_ = ! state;
  function [0:0] _427_;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _427_ = b[0:0];
      6'b????1?:
        _427_ = b[1:1];
      6'b???1??:
        _427_ = b[2:2];
      6'b??1???:
        _427_ = b[3:3];
      6'b?1????:
        _427_ = b[4:4];
      6'b1?????:
        _427_ = b[5:5];
      default:
        _427_ = a;
    endcase
  endfunction
  assign _167_ = _427_(1'hx, { 2'h0, _036_, 3'h0 }, { _173_, _172_, _171_, _170_, _169_, _168_ });
  assign _168_ = state == 3'h5;
  assign _169_ = state == 3'h4;
  assign _170_ = state == 3'h3;
  assign _171_ = state == 3'h2;
  assign _172_ = state == 3'h1;
  assign _173_ = ! state;
  function [0:0] _434_;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _434_ = b[0:0];
      6'b????1?:
        _434_ = b[1:1];
      6'b???1??:
        _434_ = b[2:2];
      6'b??1???:
        _434_ = b[3:3];
      6'b?1????:
        _434_ = b[4:4];
      6'b1?????:
        _434_ = b[5:5];
      default:
        _434_ = a;
    endcase
  endfunction
  assign _174_ = _434_(1'hx, { 1'h0, _035_, _040_, 3'h0 }, { _180_, _179_, _178_, _177_, _176_, _175_ });
  assign _175_ = state == 3'h5;
  assign _176_ = state == 3'h4;
  assign _177_ = state == 3'h3;
  assign _178_ = state == 3'h2;
  assign _179_ = state == 3'h1;
  assign _180_ = ! state;
  function [0:0] _441_;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _441_ = b[0:0];
      6'b????1?:
        _441_ = b[1:1];
      6'b???1??:
        _441_ = b[2:2];
      6'b??1???:
        _441_ = b[3:3];
      6'b?1????:
        _441_ = b[4:4];
      6'b1?????:
        _441_ = b[5:5];
      default:
        _441_ = a;
    endcase
  endfunction
  assign _181_ = _441_(1'hx, { 1'h0, _039_, _042_, 3'h0 }, { _187_, _186_, _185_, _184_, _183_, _182_ });
  assign _182_ = state == 3'h5;
  assign _183_ = state == 3'h4;
  assign _184_ = state == 3'h3;
  assign _185_ = state == 3'h2;
  assign _186_ = state == 3'h1;
  assign _187_ = ! state;
  assign _188_ = rst ? next_state : 3'h0;
  assign _190_ = _191_ ? _293_ : txdn;
  assign _192_ = rst ? _190_ : 1'h0;
  assign _194_ = _195_ ? _292_ : txdp;
  assign _196_ = rst ? _194_ : 1'h1;
  assign _198_ = _199_ ? _091_ : txoe;
  assign _200_ = rst ? _198_ : 1'h1;
  assign _202_ = _203_ ? txoe_r1 : txoe_r2;
  assign _204_ = rst ? _202_ : 1'h0;
  assign _206_ = _207_ ? tx_ip_sync : txoe_r1;
  assign _208_ = rst ? _206_ : 1'h0;
  assign _210_ = _211_ ? append_eop_sync3 : append_eop_sync4;
  assign _212_ = rst ? _210_ : 1'h0;
  assign _214_ = _215_ ? _103_ : append_eop_sync3;
  assign _216_ = rst ? _214_ : 1'h0;
  assign _218_ = _219_ ? append_eop_sync1 : append_eop_sync2;
  assign _220_ = rst ? _218_ : 1'h0;
  assign _222_ = _223_ ? append_eop : append_eop_sync1;
  assign _224_ = rst ? _222_ : 1'h0;
  assign _226_ = _227_ ? 1'h0 : append_eop;
  assign _228_ = _229_ ? 1'h1 : _226_;
  assign _230_ = rst ? _228_ : 1'h0;
  assign _232_ = _233_ ? _291_ : sd_nrzi_o;
  assign _234_ = _235_ ? 1'h1 : _232_;
  assign _236_ = rst ? _234_ : 1'h1;
  assign _238_ = _239_ ? _290_ : sd_bs_o;
  assign _240_ = rst ? _238_ : 1'h0;
  assign _242_ = _243_ ? 3'h0 : _048_;
  assign _244_ = _245_ ? _242_ : one_cnt;
  assign _246_ = tx_ip_sync ? _244_ : 3'h0;
  assign _248_ = rst ? _246_ : 3'h0;
  assign _250_ = _251_ ? DataOut_i : hold_reg;
  assign _252_ = _253_ ? 8'h80 : _250_;
  function [0:0] _481_;
    input [0:0] a;
    input [7:0] b;
    input [7:0] s;
    casez (s) // synopsys parallel_case
      8'b???????1:
        _481_ = b[0:0];
      8'b??????1?:
        _481_ = b[1:1];
      8'b?????1??:
        _481_ = b[2:2];
      8'b????1???:
        _481_ = b[3:3];
      8'b???1????:
        _481_ = b[4:4];
      8'b??1?????:
        _481_ = b[5:5];
      8'b?1??????:
        _481_ = b[6:6];
      8'b1???????:
        _481_ = b[7:7];
      default:
        _481_ = a;
    endcase
  endfunction
  assign _254_ = _481_(1'hx, { hold_reg_d[0], hold_reg_d[1], hold_reg_d[2], hold_reg_d[3], hold_reg_d[4], hold_reg_d[5], hold_reg_d[6], hold_reg_d[7] }, { _262_, _261_, _260_, _259_, _258_, _257_, _256_, _255_ });
  assign _255_ = bit_cnt == 3'h7;
  assign _256_ = bit_cnt == 3'h6;
  assign _257_ = bit_cnt == 3'h5;
  assign _258_ = bit_cnt == 3'h4;
  assign _259_ = bit_cnt == 3'h3;
  assign _260_ = bit_cnt == 3'h2;
  assign _261_ = bit_cnt == 3'h1;
  assign _262_ = ! bit_cnt;
  assign _263_ = tx_ip_sync ? _254_ : 1'h0;
  assign _265_ = _266_ ? _047_ : bit_cnt;
  assign _267_ = tx_ip_sync ? _265_ : 3'h0;
  assign _269_ = rst ? _267_ : 3'h0;
  assign _271_ = TxValid_i ? data_done : 1'h0;
  assign _273_ = _274_ ? 1'h1 : _271_;
  assign _275_ = rst ? _273_ : 1'h0;
  assign _277_ = _278_ ? tx_ip : tx_ip_sync;
  assign _279_ = rst ? _277_ : 1'h0;
  assign _281_ = _282_ ? 1'h0 : tx_ip;
  assign _283_ = _284_ ? 1'h1 : _281_;
  assign _285_ = rst ? _283_ : 1'h0;
  assign _287_ = rst ? _049_ : 1'h0;
  assign _289_ = stuff ? 1'h0 : sd_raw_o;
  assign _290_ = tx_ip_sync ? _289_ : 1'h0;
  assign _291_ = sd_bs_o ? sd_nrzi_o : _101_;
  assign _292_ = phy_mode ? _053_ : sd_nrzi_o;
  assign _293_ = phy_mode ? _054_ : append_eop_sync3;
  assign hold = stuff;
  assign sft_done_e = _051_;
  assign stuff = _056_;
  assign eop_done = append_eop_sync3;
  assign _012_ = _031_;
  assign _011_ = _030_;
  assign _013_ = _032_;
  assign _024_ = _034_;
  assign _014_ = _033_;
  assign _009_ = hold_reg;
  assign _020_ = sft_done;
  assign _019_ = _050_;
  assign _010_ = ld_data_d;
  assign _106_ = fs_ce;
  assign _046_ = _107_;
  assign _110_ = _061_;
  assign _045_ = _111_;
  assign _114_ = eop_done;
  assign _044_ = _115_;
  assign _118_ = _060_;
  assign _040_ = _119_;
  assign _122_ = _060_;
  assign _042_ = _123_;
  assign _126_ = _059_;
  assign _043_ = _127_;
  assign _130_ = _059_;
  assign _036_ = _131_;
  assign _134_ = sft_done_e;
  assign _041_ = _135_;
  assign _138_ = sft_done_e;
  assign _035_ = _139_;
  assign _142_ = sft_done_e;
  assign _039_ = _143_;
  assign _146_ = TxValid_i;
  assign _038_ = _147_;
  assign _150_ = TxValid_i;
  assign _037_ = _151_;
  assign _032_ = _153_;
  assign _033_ = _160_;
  assign _031_ = _167_;
  assign _030_ = _174_;
  assign _034_ = _181_;
  assign _189_ = _096_;
  assign _021_ = _188_;
  assign _191_ = fs_ce;
  assign _193_ = _094_;
  assign _025_ = _192_;
  assign _195_ = fs_ce;
  assign _197_ = _092_;
  assign _026_ = _196_;
  assign _199_ = fs_ce;
  assign _201_ = _090_;
  assign _027_ = _200_;
  assign _203_ = fs_ce;
  assign _205_ = _089_;
  assign _029_ = _204_;
  assign _207_ = fs_ce;
  assign _209_ = _088_;
  assign _028_ = _208_;
  assign _211_ = fs_ce;
  assign _213_ = _087_;
  assign _005_ = _212_;
  assign _215_ = fs_ce;
  assign _217_ = _085_;
  assign _004_ = _216_;
  assign _219_ = fs_ce;
  assign _221_ = _084_;
  assign _003_ = _220_;
  assign _223_ = fs_ce;
  assign _225_ = _083_;
  assign _002_ = _224_;
  assign _227_ = append_eop_sync2;
  assign _229_ = ld_eop_d;
  assign _231_ = _082_;
  assign _001_ = _230_;
  assign _233_ = fs_ce;
  assign _235_ = _100_;
  assign _237_ = _079_;
  assign _017_ = _236_;
  assign _239_ = fs_ce;
  assign _241_ = _077_;
  assign _016_ = _240_;
  assign _243_ = _099_;
  assign _245_ = fs_ce;
  assign _247_ = _075_;
  assign _249_ = _074_;
  assign _015_ = _248_;
  assign _251_ = ld_data;
  assign _253_ = ld_sop_d;
  assign _008_ = _252_;
  assign _264_ = _071_;
  assign _018_ = _263_;
  assign _266_ = _058_;
  assign _268_ = _069_;
  assign _270_ = _068_;
  assign _006_ = _269_;
  assign _272_ = _067_;
  assign _274_ = _057_;
  assign _276_ = _065_;
  assign _007_ = _275_;
  assign _278_ = fs_ce;
  assign _280_ = _064_;
  assign _023_ = _279_;
  assign _282_ = eop_done;
  assign _284_ = ld_sop_d;
  assign _286_ = _063_;
  assign _022_ = _285_;
  assign _288_ = _062_;
  assign _000_ = _287_;
  assign next_state = _160_;
  assign tx_ready_d = _181_;
  assign ld_sop_d = _153_;
  assign ld_data_d = _174_;
  assign ld_eop_d = _167_;
endmodule
