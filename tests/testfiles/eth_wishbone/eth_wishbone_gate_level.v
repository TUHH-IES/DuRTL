/* Generated by Yosys 0.39+1 (git sha1 b3124f30e, x86_64-w64-mingw32-g++ 13.2.1 -Os) */

module \$paramod$0c2657bd5c5455bdd610d1f801789b00c2352910\eth_fifo (data_in, data_out, clk, reset, write, read, clear, almost_full, full, almost_empty, empty, cnt);
  wire [31:0] _000_;
  wire [31:0] _001_;
  wire [3:0] _002_;
  wire [31:0] _003_;
  wire [31:0] _004_;
  wire [4:0] _005_;
  wire [31:0] _006_;
  wire [3:0] _007_;
  wire [3:0] _008_;
  wire [31:0] _009_;
  wire [31:0] _010_;
  wire [3:0] _011_;
  wire [31:0] _012_;
  wire [31:0] _013_;
  wire [3:0] _014_;
  wire [31:0] _015_;
  wire [31:0] _016_;
  wire [31:0] _017_;
  wire [3:0] _018_;
  wire [3:0] _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire [31:0] _026_;
  wire [31:0] _027_;
  reg [31:0] _028_;
  reg [31:0] _029_;
  reg [3:0] _030_;
  reg [31:0] _031_;
  reg [31:0] _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire [31:0] _037_;
  wire _038_;
  wire [31:0] _039_;
  wire _040_;
  wire [31:0] _041_;
  wire _042_;
  wire [31:0] _043_;
  wire _044_;
  wire [31:0] _045_;
  wire _046_;
  wire [3:0] _047_;
  wire _048_;
  wire [3:0] _049_;
  wire _050_;
  wire [31:0] _051_;
  wire _052_;
  wire [31:0] _053_;
  wire _054_;
  wire [31:0] _055_;
  wire _056_;
  wire [31:0] _057_;
  wire _058_;
  wire [3:0] _059_;
  wire _060_;
  wire [3:0] _061_;
  wire _062_;
  wire [3:0] _063_;
  wire _064_;
  wire [3:0] _065_;
  wire _066_;
  wire [3:0] _067_;
  wire _068_;
  wire [4:0] _069_;
  wire _070_;
  wire [4:0] _071_;
  wire _072_;
  wire [4:0] _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire [31:0] _077_;
  wire _078_;
  wire _079_;
  output almost_empty;
  wire almost_empty;
  output almost_full;
  wire almost_full;
  input clear;
  wire clear;
  input clk;
  wire clk;
  output [4:0] cnt;
  reg [4:0] cnt;
  input [31:0] data_in;
  wire [31:0] data_in;
  output [31:0] data_out;
  reg [31:0] data_out;
  output empty;
  wire empty;
  output full;
  wire full;
  input read;
  wire read;
  reg [3:0] read_pointer;
  input reset;
  wire reset;
  input write;
  wire write;
  reg [3:0] write_pointer;
  reg [31:0] fifo [15:0];
  always @(posedge clk) begin
    if (_051_[0])
      fifo[32'd0][0:0] <= _053_[0];
    if (_051_[1])
      fifo[32'd0][1:1] <= _053_[1];
    if (_051_[2])
      fifo[32'd0][2:2] <= _053_[2];
    if (_051_[3])
      fifo[32'd0][3:3] <= _053_[3];
    if (_051_[4])
      fifo[32'd0][4:4] <= _053_[4];
    if (_051_[5])
      fifo[32'd0][5:5] <= _053_[5];
    if (_051_[6])
      fifo[32'd0][6:6] <= _053_[6];
    if (_051_[7])
      fifo[32'd0][7:7] <= _053_[7];
    if (_051_[8])
      fifo[32'd0][8:8] <= _053_[8];
    if (_051_[9])
      fifo[32'd0][9:9] <= _053_[9];
    if (_051_[10])
      fifo[32'd0][10:10] <= _053_[10];
    if (_051_[11])
      fifo[32'd0][11:11] <= _053_[11];
    if (_051_[12])
      fifo[32'd0][12:12] <= _053_[12];
    if (_051_[13])
      fifo[32'd0][13:13] <= _053_[13];
    if (_051_[14])
      fifo[32'd0][14:14] <= _053_[14];
    if (_051_[15])
      fifo[32'd0][15:15] <= _053_[15];
    if (_051_[16])
      fifo[32'd0][16:16] <= _053_[16];
    if (_051_[17])
      fifo[32'd0][17:17] <= _053_[17];
    if (_051_[18])
      fifo[32'd0][18:18] <= _053_[18];
    if (_051_[19])
      fifo[32'd0][19:19] <= _053_[19];
    if (_051_[20])
      fifo[32'd0][20:20] <= _053_[20];
    if (_051_[21])
      fifo[32'd0][21:21] <= _053_[21];
    if (_051_[22])
      fifo[32'd0][22:22] <= _053_[22];
    if (_051_[23])
      fifo[32'd0][23:23] <= _053_[23];
    if (_051_[24])
      fifo[32'd0][24:24] <= _053_[24];
    if (_051_[25])
      fifo[32'd0][25:25] <= _053_[25];
    if (_051_[26])
      fifo[32'd0][26:26] <= _053_[26];
    if (_051_[27])
      fifo[32'd0][27:27] <= _053_[27];
    if (_051_[28])
      fifo[32'd0][28:28] <= _053_[28];
    if (_051_[29])
      fifo[32'd0][29:29] <= _053_[29];
    if (_051_[30])
      fifo[32'd0][30:30] <= _053_[30];
    if (_051_[31])
      fifo[32'd0][31:31] <= _053_[31];
  end
  always @(posedge clk) begin
    if (_055_[0])
      fifo[{ 28'h0000000, _059_ }][0:0] <= _057_[0];
    if (_055_[1])
      fifo[{ 28'h0000000, _059_ }][1:1] <= _057_[1];
    if (_055_[2])
      fifo[{ 28'h0000000, _059_ }][2:2] <= _057_[2];
    if (_055_[3])
      fifo[{ 28'h0000000, _059_ }][3:3] <= _057_[3];
    if (_055_[4])
      fifo[{ 28'h0000000, _059_ }][4:4] <= _057_[4];
    if (_055_[5])
      fifo[{ 28'h0000000, _059_ }][5:5] <= _057_[5];
    if (_055_[6])
      fifo[{ 28'h0000000, _059_ }][6:6] <= _057_[6];
    if (_055_[7])
      fifo[{ 28'h0000000, _059_ }][7:7] <= _057_[7];
    if (_055_[8])
      fifo[{ 28'h0000000, _059_ }][8:8] <= _057_[8];
    if (_055_[9])
      fifo[{ 28'h0000000, _059_ }][9:9] <= _057_[9];
    if (_055_[10])
      fifo[{ 28'h0000000, _059_ }][10:10] <= _057_[10];
    if (_055_[11])
      fifo[{ 28'h0000000, _059_ }][11:11] <= _057_[11];
    if (_055_[12])
      fifo[{ 28'h0000000, _059_ }][12:12] <= _057_[12];
    if (_055_[13])
      fifo[{ 28'h0000000, _059_ }][13:13] <= _057_[13];
    if (_055_[14])
      fifo[{ 28'h0000000, _059_ }][14:14] <= _057_[14];
    if (_055_[15])
      fifo[{ 28'h0000000, _059_ }][15:15] <= _057_[15];
    if (_055_[16])
      fifo[{ 28'h0000000, _059_ }][16:16] <= _057_[16];
    if (_055_[17])
      fifo[{ 28'h0000000, _059_ }][17:17] <= _057_[17];
    if (_055_[18])
      fifo[{ 28'h0000000, _059_ }][18:18] <= _057_[18];
    if (_055_[19])
      fifo[{ 28'h0000000, _059_ }][19:19] <= _057_[19];
    if (_055_[20])
      fifo[{ 28'h0000000, _059_ }][20:20] <= _057_[20];
    if (_055_[21])
      fifo[{ 28'h0000000, _059_ }][21:21] <= _057_[21];
    if (_055_[22])
      fifo[{ 28'h0000000, _059_ }][22:22] <= _057_[22];
    if (_055_[23])
      fifo[{ 28'h0000000, _059_ }][23:23] <= _057_[23];
    if (_055_[24])
      fifo[{ 28'h0000000, _059_ }][24:24] <= _057_[24];
    if (_055_[25])
      fifo[{ 28'h0000000, _059_ }][25:25] <= _057_[25];
    if (_055_[26])
      fifo[{ 28'h0000000, _059_ }][26:26] <= _057_[26];
    if (_055_[27])
      fifo[{ 28'h0000000, _059_ }][27:27] <= _057_[27];
    if (_055_[28])
      fifo[{ 28'h0000000, _059_ }][28:28] <= _057_[28];
    if (_055_[29])
      fifo[{ 28'h0000000, _059_ }][29:29] <= _057_[29];
    if (_055_[30])
      fifo[{ 28'h0000000, _059_ }][30:30] <= _057_[30];
    if (_055_[31])
      fifo[{ 28'h0000000, _059_ }][31:31] <= _057_[31];
  end
  assign _026_ = fifo[32'd0];
  assign _027_ = fifo[{ 28'h0000000, read_pointer }];
  assign _017_ = cnt + 32'd1;
  assign _018_ = read_pointer + 1'h1;
  assign _019_ = write_pointer + 1'h1;
  assign _066_ = read & _076_;
  assign _062_ = write & _034_;
  assign _060_ = write & clear;
  assign _048_ = write & _036_;
  assign almost_empty = cnt == 5'h01;
  assign full = cnt == 5'h10;
  assign _034_ = ~ full;
  assign empty = ~ _076_;
  assign _036_ = ~ full;
  always @(posedge clk)
    data_out <= _037_;
  always @(posedge clk)
    _028_ <= _053_;
  always @(posedge clk)
    _029_ <= _051_;
  always @(posedge clk)
    _030_ <= _059_;
  always @(posedge clk)
    _031_ <= _057_;
  always @(posedge clk)
    _032_ <= _055_;
  always @(posedge clk, posedge reset)
    if (reset) write_pointer <= 4'h0;
    else write_pointer <= _063_;
  always @(posedge clk, posedge reset)
    if (reset) read_pointer <= 4'h0;
    else read_pointer <= _067_;
  always @(posedge clk, posedge reset)
    if (reset) cnt <= 5'h00;
    else cnt <= _073_;
  assign _037_ = clear ? _026_ : _027_;
  assign _039_ = _048_ ? 32'd4294967295 : 32'd0;
  assign _041_ = _060_ ? 32'hxxxxxxxx : _039_;
  assign _043_ = _048_ ? data_in : 32'hxxxxxxxx;
  assign _045_ = _060_ ? 32'hxxxxxxxx : _043_;
  assign _047_ = _048_ ? write_pointer : 4'hx;
  assign _049_ = _060_ ? 4'hx : _047_;
  assign _051_ = _060_ ? 32'd4294967295 : 32'd0;
  assign _053_ = _060_ ? data_in : 32'hxxxxxxxx;
  assign _055_ = _060_ ? 32'd0 : _041_;
  assign _057_ = _060_ ? 32'hxxxxxxxx : _045_;
  assign _059_ = _060_ ? 4'hx : _049_;
  assign _061_ = _062_ ? _019_ : write_pointer;
  assign _063_ = clear ? { 3'h0, write } : _061_;
  assign _065_ = _066_ ? _018_ : read_pointer;
  assign _067_ = clear ? { 3'h0, read } : _065_;
  assign _069_ = read ? _077_[4:0] : _017_[4:0];
  assign _071_ = _079_ ? _069_ : cnt;
  assign _073_ = clear ? { 4'h0, _078_ } : _071_;
  assign almost_full = & cnt[3:0];
  assign _076_ = | cnt;
  assign _077_ = cnt - 32'd1;
  assign _078_ = read ^ write;
  assign _079_ = read ^ write;
  assign _000_[31] = _053_[31];
  assign _000_[30] = _053_[30];
  assign _000_[29] = _053_[29];
  assign _000_[28] = _053_[28];
  assign _000_[27] = _053_[27];
  assign _000_[26] = _053_[26];
  assign _000_[25] = _053_[25];
  assign _000_[24] = _053_[24];
  assign _000_[23] = _053_[23];
  assign _000_[22] = _053_[22];
  assign _000_[21] = _053_[21];
  assign _000_[20] = _053_[20];
  assign _000_[19] = _053_[19];
  assign _000_[18] = _053_[18];
  assign _000_[17] = _053_[17];
  assign _000_[16] = _053_[16];
  assign _000_[15] = _053_[15];
  assign _000_[14] = _053_[14];
  assign _000_[13] = _053_[13];
  assign _000_[12] = _053_[12];
  assign _000_[11] = _053_[11];
  assign _000_[10] = _053_[10];
  assign _000_[9] = _053_[9];
  assign _000_[8] = _053_[8];
  assign _000_[7] = _053_[7];
  assign _000_[6] = _053_[6];
  assign _000_[5] = _053_[5];
  assign _000_[4] = _053_[4];
  assign _000_[3] = _053_[3];
  assign _000_[2] = _053_[2];
  assign _000_[1] = _053_[1];
  assign _000_[0] = _053_[0];
  assign _001_[31] = _051_[31];
  assign _001_[30] = _051_[30];
  assign _001_[29] = _051_[29];
  assign _001_[28] = _051_[28];
  assign _001_[27] = _051_[27];
  assign _001_[26] = _051_[26];
  assign _001_[25] = _051_[25];
  assign _001_[24] = _051_[24];
  assign _001_[23] = _051_[23];
  assign _001_[22] = _051_[22];
  assign _001_[21] = _051_[21];
  assign _001_[20] = _051_[20];
  assign _001_[19] = _051_[19];
  assign _001_[18] = _051_[18];
  assign _001_[17] = _051_[17];
  assign _001_[16] = _051_[16];
  assign _001_[15] = _051_[15];
  assign _001_[14] = _051_[14];
  assign _001_[13] = _051_[13];
  assign _001_[12] = _051_[12];
  assign _001_[11] = _051_[11];
  assign _001_[10] = _051_[10];
  assign _001_[9] = _051_[9];
  assign _001_[8] = _051_[8];
  assign _001_[7] = _051_[7];
  assign _001_[6] = _051_[6];
  assign _001_[5] = _051_[5];
  assign _001_[4] = _051_[4];
  assign _001_[3] = _051_[3];
  assign _001_[2] = _051_[2];
  assign _001_[1] = _051_[1];
  assign _001_[0] = _051_[0];
  assign _002_[3] = _059_[3];
  assign _002_[2] = _059_[2];
  assign _002_[1] = _059_[1];
  assign _002_[0] = _059_[0];
  assign _003_[31] = _057_[31];
  assign _003_[30] = _057_[30];
  assign _003_[29] = _057_[29];
  assign _003_[28] = _057_[28];
  assign _003_[27] = _057_[27];
  assign _003_[26] = _057_[26];
  assign _003_[25] = _057_[25];
  assign _003_[24] = _057_[24];
  assign _003_[23] = _057_[23];
  assign _003_[22] = _057_[22];
  assign _003_[21] = _057_[21];
  assign _003_[20] = _057_[20];
  assign _003_[19] = _057_[19];
  assign _003_[18] = _057_[18];
  assign _003_[17] = _057_[17];
  assign _003_[16] = _057_[16];
  assign _003_[15] = _057_[15];
  assign _003_[14] = _057_[14];
  assign _003_[13] = _057_[13];
  assign _003_[12] = _057_[12];
  assign _003_[11] = _057_[11];
  assign _003_[10] = _057_[10];
  assign _003_[9] = _057_[9];
  assign _003_[8] = _057_[8];
  assign _003_[7] = _057_[7];
  assign _003_[6] = _057_[6];
  assign _003_[5] = _057_[5];
  assign _003_[4] = _057_[4];
  assign _003_[3] = _057_[3];
  assign _003_[2] = _057_[2];
  assign _003_[1] = _057_[1];
  assign _003_[0] = _057_[0];
  assign _004_[31] = _055_[31];
  assign _004_[30] = _055_[30];
  assign _004_[29] = _055_[29];
  assign _004_[28] = _055_[28];
  assign _004_[27] = _055_[27];
  assign _004_[26] = _055_[26];
  assign _004_[25] = _055_[25];
  assign _004_[24] = _055_[24];
  assign _004_[23] = _055_[23];
  assign _004_[22] = _055_[22];
  assign _004_[21] = _055_[21];
  assign _004_[20] = _055_[20];
  assign _004_[19] = _055_[19];
  assign _004_[18] = _055_[18];
  assign _004_[17] = _055_[17];
  assign _004_[16] = _055_[16];
  assign _004_[15] = _055_[15];
  assign _004_[14] = _055_[14];
  assign _004_[13] = _055_[13];
  assign _004_[12] = _055_[12];
  assign _004_[11] = _055_[11];
  assign _004_[10] = _055_[10];
  assign _004_[9] = _055_[9];
  assign _004_[8] = _055_[8];
  assign _004_[7] = _055_[7];
  assign _004_[6] = _055_[6];
  assign _004_[5] = _055_[5];
  assign _004_[4] = _055_[4];
  assign _004_[3] = _055_[3];
  assign _004_[2] = _055_[2];
  assign _004_[1] = _055_[1];
  assign _004_[0] = _055_[0];
  assign _005_[4] = _073_[4];
  assign _005_[3] = _073_[3];
  assign _005_[2] = _073_[2];
  assign _005_[1] = _073_[1];
  assign _005_[0] = _073_[0];
  assign _006_[31] = _037_[31];
  assign _006_[30] = _037_[30];
  assign _006_[29] = _037_[29];
  assign _006_[28] = _037_[28];
  assign _006_[27] = _037_[27];
  assign _006_[26] = _037_[26];
  assign _006_[25] = _037_[25];
  assign _006_[24] = _037_[24];
  assign _006_[23] = _037_[23];
  assign _006_[22] = _037_[22];
  assign _006_[21] = _037_[21];
  assign _006_[20] = _037_[20];
  assign _006_[19] = _037_[19];
  assign _006_[18] = _037_[18];
  assign _006_[17] = _037_[17];
  assign _006_[16] = _037_[16];
  assign _006_[15] = _037_[15];
  assign _006_[14] = _037_[14];
  assign _006_[13] = _037_[13];
  assign _006_[12] = _037_[12];
  assign _006_[11] = _037_[11];
  assign _006_[10] = _037_[10];
  assign _006_[9] = _037_[9];
  assign _006_[8] = _037_[8];
  assign _006_[7] = _037_[7];
  assign _006_[6] = _037_[6];
  assign _006_[5] = _037_[5];
  assign _006_[4] = _037_[4];
  assign _006_[3] = _037_[3];
  assign _006_[2] = _037_[2];
  assign _006_[1] = _037_[1];
  assign _006_[0] = _037_[0];
  assign _007_[3] = _067_[3];
  assign _007_[2] = _067_[2];
  assign _007_[1] = _067_[1];
  assign _007_[0] = _067_[0];
  assign _008_[3] = _063_[3];
  assign _008_[2] = _063_[2];
  assign _008_[1] = _063_[1];
  assign _008_[0] = _063_[0];
  assign _009_[31] = _053_[31];
  assign _009_[30] = _053_[30];
  assign _009_[29] = _053_[29];
  assign _009_[28] = _053_[28];
  assign _009_[27] = _053_[27];
  assign _009_[26] = _053_[26];
  assign _009_[25] = _053_[25];
  assign _009_[24] = _053_[24];
  assign _009_[23] = _053_[23];
  assign _009_[22] = _053_[22];
  assign _009_[21] = _053_[21];
  assign _009_[20] = _053_[20];
  assign _009_[19] = _053_[19];
  assign _009_[18] = _053_[18];
  assign _009_[17] = _053_[17];
  assign _009_[16] = _053_[16];
  assign _009_[15] = _053_[15];
  assign _009_[14] = _053_[14];
  assign _009_[13] = _053_[13];
  assign _009_[12] = _053_[12];
  assign _009_[11] = _053_[11];
  assign _009_[10] = _053_[10];
  assign _009_[9] = _053_[9];
  assign _009_[8] = _053_[8];
  assign _009_[7] = _053_[7];
  assign _009_[6] = _053_[6];
  assign _009_[5] = _053_[5];
  assign _009_[4] = _053_[4];
  assign _009_[3] = _053_[3];
  assign _009_[2] = _053_[2];
  assign _009_[1] = _053_[1];
  assign _009_[0] = _053_[0];
  assign _010_[31] = _051_[31];
  assign _010_[30] = _051_[30];
  assign _010_[29] = _051_[29];
  assign _010_[28] = _051_[28];
  assign _010_[27] = _051_[27];
  assign _010_[26] = _051_[26];
  assign _010_[25] = _051_[25];
  assign _010_[24] = _051_[24];
  assign _010_[23] = _051_[23];
  assign _010_[22] = _051_[22];
  assign _010_[21] = _051_[21];
  assign _010_[20] = _051_[20];
  assign _010_[19] = _051_[19];
  assign _010_[18] = _051_[18];
  assign _010_[17] = _051_[17];
  assign _010_[16] = _051_[16];
  assign _010_[15] = _051_[15];
  assign _010_[14] = _051_[14];
  assign _010_[13] = _051_[13];
  assign _010_[12] = _051_[12];
  assign _010_[11] = _051_[11];
  assign _010_[10] = _051_[10];
  assign _010_[9] = _051_[9];
  assign _010_[8] = _051_[8];
  assign _010_[7] = _051_[7];
  assign _010_[6] = _051_[6];
  assign _010_[5] = _051_[5];
  assign _010_[4] = _051_[4];
  assign _010_[3] = _051_[3];
  assign _010_[2] = _051_[2];
  assign _010_[1] = _051_[1];
  assign _010_[0] = _051_[0];
  assign _011_[3] = _059_[3];
  assign _011_[2] = _059_[2];
  assign _011_[1] = _059_[1];
  assign _011_[0] = _059_[0];
  assign _012_[31] = _057_[31];
  assign _012_[30] = _057_[30];
  assign _012_[29] = _057_[29];
  assign _012_[28] = _057_[28];
  assign _012_[27] = _057_[27];
  assign _012_[26] = _057_[26];
  assign _012_[25] = _057_[25];
  assign _012_[24] = _057_[24];
  assign _012_[23] = _057_[23];
  assign _012_[22] = _057_[22];
  assign _012_[21] = _057_[21];
  assign _012_[20] = _057_[20];
  assign _012_[19] = _057_[19];
  assign _012_[18] = _057_[18];
  assign _012_[17] = _057_[17];
  assign _012_[16] = _057_[16];
  assign _012_[15] = _057_[15];
  assign _012_[14] = _057_[14];
  assign _012_[13] = _057_[13];
  assign _012_[12] = _057_[12];
  assign _012_[11] = _057_[11];
  assign _012_[10] = _057_[10];
  assign _012_[9] = _057_[9];
  assign _012_[8] = _057_[8];
  assign _012_[7] = _057_[7];
  assign _012_[6] = _057_[6];
  assign _012_[5] = _057_[5];
  assign _012_[4] = _057_[4];
  assign _012_[3] = _057_[3];
  assign _012_[2] = _057_[2];
  assign _012_[1] = _057_[1];
  assign _012_[0] = _057_[0];
  assign _013_[31] = _055_[31];
  assign _013_[30] = _055_[30];
  assign _013_[29] = _055_[29];
  assign _013_[28] = _055_[28];
  assign _013_[27] = _055_[27];
  assign _013_[26] = _055_[26];
  assign _013_[25] = _055_[25];
  assign _013_[24] = _055_[24];
  assign _013_[23] = _055_[23];
  assign _013_[22] = _055_[22];
  assign _013_[21] = _055_[21];
  assign _013_[20] = _055_[20];
  assign _013_[19] = _055_[19];
  assign _013_[18] = _055_[18];
  assign _013_[17] = _055_[17];
  assign _013_[16] = _055_[16];
  assign _013_[15] = _055_[15];
  assign _013_[14] = _055_[14];
  assign _013_[13] = _055_[13];
  assign _013_[12] = _055_[12];
  assign _013_[11] = _055_[11];
  assign _013_[10] = _055_[10];
  assign _013_[9] = _055_[9];
  assign _013_[8] = _055_[8];
  assign _013_[7] = _055_[7];
  assign _013_[6] = _055_[6];
  assign _013_[5] = _055_[5];
  assign _013_[4] = _055_[4];
  assign _013_[3] = _055_[3];
  assign _013_[2] = _055_[2];
  assign _013_[1] = _055_[1];
  assign _013_[0] = _055_[0];
  assign _014_[3] = _049_[3];
  assign _014_[2] = _049_[2];
  assign _014_[1] = _049_[1];
  assign _014_[0] = _049_[0];
  assign _015_[31] = _045_[31];
  assign _015_[30] = _045_[30];
  assign _015_[29] = _045_[29];
  assign _015_[28] = _045_[28];
  assign _015_[27] = _045_[27];
  assign _015_[26] = _045_[26];
  assign _015_[25] = _045_[25];
  assign _015_[24] = _045_[24];
  assign _015_[23] = _045_[23];
  assign _015_[22] = _045_[22];
  assign _015_[21] = _045_[21];
  assign _015_[20] = _045_[20];
  assign _015_[19] = _045_[19];
  assign _015_[18] = _045_[18];
  assign _015_[17] = _045_[17];
  assign _015_[16] = _045_[16];
  assign _015_[15] = _045_[15];
  assign _015_[14] = _045_[14];
  assign _015_[13] = _045_[13];
  assign _015_[12] = _045_[12];
  assign _015_[11] = _045_[11];
  assign _015_[10] = _045_[10];
  assign _015_[9] = _045_[9];
  assign _015_[8] = _045_[8];
  assign _015_[7] = _045_[7];
  assign _015_[6] = _045_[6];
  assign _015_[5] = _045_[5];
  assign _015_[4] = _045_[4];
  assign _015_[3] = _045_[3];
  assign _015_[2] = _045_[2];
  assign _015_[1] = _045_[1];
  assign _015_[0] = _045_[0];
  assign _016_[31] = _041_[31];
  assign _016_[30] = _041_[30];
  assign _016_[29] = _041_[29];
  assign _016_[28] = _041_[28];
  assign _016_[27] = _041_[27];
  assign _016_[26] = _041_[26];
  assign _016_[25] = _041_[25];
  assign _016_[24] = _041_[24];
  assign _016_[23] = _041_[23];
  assign _016_[22] = _041_[22];
  assign _016_[21] = _041_[21];
  assign _016_[20] = _041_[20];
  assign _016_[19] = _041_[19];
  assign _016_[18] = _041_[18];
  assign _016_[17] = _041_[17];
  assign _016_[16] = _041_[16];
  assign _016_[15] = _041_[15];
  assign _016_[14] = _041_[14];
  assign _016_[13] = _041_[13];
  assign _016_[12] = _041_[12];
  assign _016_[11] = _041_[11];
  assign _016_[10] = _041_[10];
  assign _016_[9] = _041_[9];
  assign _016_[8] = _041_[8];
  assign _016_[7] = _041_[7];
  assign _016_[6] = _041_[6];
  assign _016_[5] = _041_[5];
  assign _016_[4] = _041_[4];
  assign _016_[3] = _041_[3];
  assign _016_[2] = _041_[2];
  assign _016_[1] = _041_[1];
  assign _016_[0] = _041_[0];
  assign _020_ = _066_;
  assign _021_ = _062_;
  assign _022_ = _060_;
  assign _023_ = _048_;
  assign _024_ = almost_empty;
  assign _025_ = full;
  assign _033_ = _076_;
  assign _035_ = empty;
  assign _038_ = clear;
  assign _040_ = _048_;
  assign _042_ = _060_;
  assign _044_ = _048_;
  assign _046_ = _060_;
  assign _050_ = _060_;
  assign _052_ = _060_;
  assign _054_ = _060_;
  assign _056_ = _060_;
  assign _058_ = _060_;
  assign _064_ = clear;
  assign _068_ = clear;
  assign _070_ = read;
  assign _072_ = _079_;
  assign _074_ = clear;
  assign _075_ = almost_full;
endmodule

module eth_spram_256x32(clk, rst, ce, we, oe, addr, di, dato);
  wire [7:0] _000_;
  wire [7:0] _001_;
  wire [7:0] _002_;
  wire [7:0] _003_;
  wire [7:0] _004_;
  wire [7:0] _005_;
  wire [7:0] _006_;
  wire [7:0] _007_;
  wire [7:0] _008_;
  wire [7:0] _009_;
  wire [7:0] _010_;
  wire [7:0] _011_;
  wire [7:0] _012_;
  wire [7:0] _013_;
  wire [7:0] _014_;
  wire [7:0] _015_;
  wire [7:0] _016_;
  wire [7:0] _017_;
  wire [7:0] _018_;
  wire [7:0] _019_;
  wire [7:0] _020_;
  wire [7:0] _021_;
  wire [7:0] _022_;
  wire [7:0] _023_;
  wire [7:0] _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire [7:0] _030_;
  wire [7:0] _031_;
  wire [7:0] _032_;
  wire [7:0] _033_;
  reg [7:0] _034_;
  reg [7:0] _035_;
  reg [7:0] _036_;
  reg [7:0] _037_;
  reg [7:0] _038_;
  reg [7:0] _039_;
  reg [7:0] _040_;
  reg [7:0] _041_;
  reg [7:0] _042_;
  reg [7:0] _043_;
  reg [7:0] _044_;
  reg [7:0] _045_;
  wire [7:0] _046_;
  wire _047_;
  wire [7:0] _048_;
  wire _049_;
  wire [7:0] _050_;
  wire _051_;
  wire [7:0] _052_;
  wire _053_;
  wire [7:0] _054_;
  wire _055_;
  wire [7:0] _056_;
  wire _057_;
  wire [7:0] _058_;
  wire _059_;
  wire [7:0] _060_;
  wire _061_;
  wire [7:0] _062_;
  wire _063_;
  wire [7:0] _064_;
  wire _065_;
  wire [7:0] _066_;
  wire _067_;
  wire [7:0] _068_;
  wire _069_;
  wire [7:0] _070_;
  wire _071_;
  wire [31:0] _072_;
  wire [31:0] _073_;
  input [7:0] addr;
  wire [7:0] addr;
  input ce;
  wire ce;
  input clk;
  wire clk;
  output [31:0] dato;
  wire [31:0] dato;
  input [31:0] di;
  wire [31:0] di;
  input oe;
  wire oe;
  wire [31:0] q;
  reg [7:0] raddr;
  input rst;
  wire rst;
  input [3:0] we;
  wire [3:0] we;
  reg [7:0] mem0 [255:0];
  always @(posedge clk) begin
    if (_046_[0])
      mem0[_050_][0:0] <= _048_[0];
    if (_046_[1])
      mem0[_050_][1:1] <= _048_[1];
    if (_046_[2])
      mem0[_050_][2:2] <= _048_[2];
    if (_046_[3])
      mem0[_050_][3:3] <= _048_[3];
    if (_046_[4])
      mem0[_050_][4:4] <= _048_[4];
    if (_046_[5])
      mem0[_050_][5:5] <= _048_[5];
    if (_046_[6])
      mem0[_050_][6:6] <= _048_[6];
    if (_046_[7])
      mem0[_050_][7:7] <= _048_[7];
  end
  assign _030_ = mem0[raddr];
  reg [7:0] mem1 [255:0];
  always @(posedge clk) begin
    if (_052_[0])
      mem1[_056_][0:0] <= _054_[0];
    if (_052_[1])
      mem1[_056_][1:1] <= _054_[1];
    if (_052_[2])
      mem1[_056_][2:2] <= _054_[2];
    if (_052_[3])
      mem1[_056_][3:3] <= _054_[3];
    if (_052_[4])
      mem1[_056_][4:4] <= _054_[4];
    if (_052_[5])
      mem1[_056_][5:5] <= _054_[5];
    if (_052_[6])
      mem1[_056_][6:6] <= _054_[6];
    if (_052_[7])
      mem1[_056_][7:7] <= _054_[7];
  end
  assign _031_ = mem1[raddr];
  reg [7:0] mem2 [255:0];
  always @(posedge clk) begin
    if (_058_[0])
      mem2[_062_][0:0] <= _060_[0];
    if (_058_[1])
      mem2[_062_][1:1] <= _060_[1];
    if (_058_[2])
      mem2[_062_][2:2] <= _060_[2];
    if (_058_[3])
      mem2[_062_][3:3] <= _060_[3];
    if (_058_[4])
      mem2[_062_][4:4] <= _060_[4];
    if (_058_[5])
      mem2[_062_][5:5] <= _060_[5];
    if (_058_[6])
      mem2[_062_][6:6] <= _060_[6];
    if (_058_[7])
      mem2[_062_][7:7] <= _060_[7];
  end
  assign _032_ = mem2[raddr];
  reg [7:0] mem3 [255:0];
  always @(posedge clk) begin
    if (_064_[0])
      mem3[_068_][0:0] <= _066_[0];
    if (_064_[1])
      mem3[_068_][1:1] <= _066_[1];
    if (_064_[2])
      mem3[_068_][2:2] <= _066_[2];
    if (_064_[3])
      mem3[_068_][3:3] <= _066_[3];
    if (_064_[4])
      mem3[_068_][4:4] <= _066_[4];
    if (_064_[5])
      mem3[_068_][5:5] <= _066_[5];
    if (_064_[6])
      mem3[_068_][6:6] <= _066_[6];
    if (_064_[7])
      mem3[_068_][7:7] <= _066_[7];
  end
  assign _033_ = mem3[raddr];
  assign _025_ = oe & ce;
  assign _069_ = ce && we[3];
  assign _063_ = ce && we[2];
  assign _057_ = ce && we[1];
  assign _051_ = ce && we[0];
  always @(posedge clk)
    _043_ <= _068_;
  always @(posedge clk)
    _044_ <= _066_;
  always @(posedge clk)
    _045_ <= _064_;
  always @(posedge clk)
    _040_ <= _062_;
  always @(posedge clk)
    _041_ <= _060_;
  always @(posedge clk)
    _042_ <= _058_;
  always @(posedge clk)
    _037_ <= _056_;
  always @(posedge clk)
    _038_ <= _054_;
  always @(posedge clk)
    _039_ <= _052_;
  always @(posedge clk)
    _034_ <= _050_;
  always @(posedge clk)
    _035_ <= _048_;
  always @(posedge clk)
    _036_ <= _046_;
  always @(posedge clk)
    raddr <= _070_;
  assign _046_ = _051_ ? 8'hff : 8'h00;
  assign _048_ = _051_ ? di[7:0] : 8'hxx;
  assign _050_ = _051_ ? addr : 8'hxx;
  assign _052_ = _057_ ? 8'hff : 8'h00;
  assign _054_ = _057_ ? di[15:8] : 8'hxx;
  assign _056_ = _057_ ? addr : 8'hxx;
  assign _058_ = _063_ ? 8'hff : 8'h00;
  assign _060_ = _063_ ? di[23:16] : 8'hxx;
  assign _062_ = _063_ ? addr : 8'hxx;
  assign _064_ = _069_ ? 8'hff : 8'h00;
  assign _066_ = _069_ ? di[31:24] : 8'hxx;
  assign _068_ = _069_ ? addr : 8'hxx;
  assign _070_ = ce ? addr : raddr;
  assign dato = _025_ ? q : 32'hzzzzzzzz;
  assign q = rst ? 32'd0 : { _033_, _032_, _031_, _030_ };
  assign _000_[7] = _050_[7];
  assign _000_[6] = _050_[6];
  assign _000_[5] = _050_[5];
  assign _000_[4] = _050_[4];
  assign _000_[3] = _050_[3];
  assign _000_[2] = _050_[2];
  assign _000_[1] = _050_[1];
  assign _000_[0] = _050_[0];
  assign _001_[7] = _048_[7];
  assign _001_[6] = _048_[6];
  assign _001_[5] = _048_[5];
  assign _001_[4] = _048_[4];
  assign _001_[3] = _048_[3];
  assign _001_[2] = _048_[2];
  assign _001_[1] = _048_[1];
  assign _001_[0] = _048_[0];
  assign _002_[7] = _046_[7];
  assign _002_[6] = _046_[6];
  assign _002_[5] = _046_[5];
  assign _002_[4] = _046_[4];
  assign _002_[3] = _046_[3];
  assign _002_[2] = _046_[2];
  assign _002_[1] = _046_[1];
  assign _002_[0] = _046_[0];
  assign _003_[7] = _056_[7];
  assign _003_[6] = _056_[6];
  assign _003_[5] = _056_[5];
  assign _003_[4] = _056_[4];
  assign _003_[3] = _056_[3];
  assign _003_[2] = _056_[2];
  assign _003_[1] = _056_[1];
  assign _003_[0] = _056_[0];
  assign _004_[7] = _054_[7];
  assign _004_[6] = _054_[6];
  assign _004_[5] = _054_[5];
  assign _004_[4] = _054_[4];
  assign _004_[3] = _054_[3];
  assign _004_[2] = _054_[2];
  assign _004_[1] = _054_[1];
  assign _004_[0] = _054_[0];
  assign _005_[7] = _052_[7];
  assign _005_[6] = _052_[6];
  assign _005_[5] = _052_[5];
  assign _005_[4] = _052_[4];
  assign _005_[3] = _052_[3];
  assign _005_[2] = _052_[2];
  assign _005_[1] = _052_[1];
  assign _005_[0] = _052_[0];
  assign _006_[7] = _062_[7];
  assign _006_[6] = _062_[6];
  assign _006_[5] = _062_[5];
  assign _006_[4] = _062_[4];
  assign _006_[3] = _062_[3];
  assign _006_[2] = _062_[2];
  assign _006_[1] = _062_[1];
  assign _006_[0] = _062_[0];
  assign _007_[7] = _060_[7];
  assign _007_[6] = _060_[6];
  assign _007_[5] = _060_[5];
  assign _007_[4] = _060_[4];
  assign _007_[3] = _060_[3];
  assign _007_[2] = _060_[2];
  assign _007_[1] = _060_[1];
  assign _007_[0] = _060_[0];
  assign _008_[7] = _058_[7];
  assign _008_[6] = _058_[6];
  assign _008_[5] = _058_[5];
  assign _008_[4] = _058_[4];
  assign _008_[3] = _058_[3];
  assign _008_[2] = _058_[2];
  assign _008_[1] = _058_[1];
  assign _008_[0] = _058_[0];
  assign _009_[7] = _068_[7];
  assign _009_[6] = _068_[6];
  assign _009_[5] = _068_[5];
  assign _009_[4] = _068_[4];
  assign _009_[3] = _068_[3];
  assign _009_[2] = _068_[2];
  assign _009_[1] = _068_[1];
  assign _009_[0] = _068_[0];
  assign _010_[7] = _066_[7];
  assign _010_[6] = _066_[6];
  assign _010_[5] = _066_[5];
  assign _010_[4] = _066_[4];
  assign _010_[3] = _066_[3];
  assign _010_[2] = _066_[2];
  assign _010_[1] = _066_[1];
  assign _010_[0] = _066_[0];
  assign _011_[7] = _064_[7];
  assign _011_[6] = _064_[6];
  assign _011_[5] = _064_[5];
  assign _011_[4] = _064_[4];
  assign _011_[3] = _064_[3];
  assign _011_[2] = _064_[2];
  assign _011_[1] = _064_[1];
  assign _011_[0] = _064_[0];
  assign _012_[7] = _070_[7];
  assign _012_[6] = _070_[6];
  assign _012_[5] = _070_[5];
  assign _012_[4] = _070_[4];
  assign _012_[3] = _070_[3];
  assign _012_[2] = _070_[2];
  assign _012_[1] = _070_[1];
  assign _012_[0] = _070_[0];
  assign _013_[7] = _050_[7];
  assign _013_[6] = _050_[6];
  assign _013_[5] = _050_[5];
  assign _013_[4] = _050_[4];
  assign _013_[3] = _050_[3];
  assign _013_[2] = _050_[2];
  assign _013_[1] = _050_[1];
  assign _013_[0] = _050_[0];
  assign _014_[7] = _048_[7];
  assign _014_[6] = _048_[6];
  assign _014_[5] = _048_[5];
  assign _014_[4] = _048_[4];
  assign _014_[3] = _048_[3];
  assign _014_[2] = _048_[2];
  assign _014_[1] = _048_[1];
  assign _014_[0] = _048_[0];
  assign _015_[7] = _046_[7];
  assign _015_[6] = _046_[6];
  assign _015_[5] = _046_[5];
  assign _015_[4] = _046_[4];
  assign _015_[3] = _046_[3];
  assign _015_[2] = _046_[2];
  assign _015_[1] = _046_[1];
  assign _015_[0] = _046_[0];
  assign _016_[7] = _056_[7];
  assign _016_[6] = _056_[6];
  assign _016_[5] = _056_[5];
  assign _016_[4] = _056_[4];
  assign _016_[3] = _056_[3];
  assign _016_[2] = _056_[2];
  assign _016_[1] = _056_[1];
  assign _016_[0] = _056_[0];
  assign _017_[7] = _054_[7];
  assign _017_[6] = _054_[6];
  assign _017_[5] = _054_[5];
  assign _017_[4] = _054_[4];
  assign _017_[3] = _054_[3];
  assign _017_[2] = _054_[2];
  assign _017_[1] = _054_[1];
  assign _017_[0] = _054_[0];
  assign _018_[7] = _052_[7];
  assign _018_[6] = _052_[6];
  assign _018_[5] = _052_[5];
  assign _018_[4] = _052_[4];
  assign _018_[3] = _052_[3];
  assign _018_[2] = _052_[2];
  assign _018_[1] = _052_[1];
  assign _018_[0] = _052_[0];
  assign _019_[7] = _062_[7];
  assign _019_[6] = _062_[6];
  assign _019_[5] = _062_[5];
  assign _019_[4] = _062_[4];
  assign _019_[3] = _062_[3];
  assign _019_[2] = _062_[2];
  assign _019_[1] = _062_[1];
  assign _019_[0] = _062_[0];
  assign _020_[7] = _060_[7];
  assign _020_[6] = _060_[6];
  assign _020_[5] = _060_[5];
  assign _020_[4] = _060_[4];
  assign _020_[3] = _060_[3];
  assign _020_[2] = _060_[2];
  assign _020_[1] = _060_[1];
  assign _020_[0] = _060_[0];
  assign _021_[7] = _058_[7];
  assign _021_[6] = _058_[6];
  assign _021_[5] = _058_[5];
  assign _021_[4] = _058_[4];
  assign _021_[3] = _058_[3];
  assign _021_[2] = _058_[2];
  assign _021_[1] = _058_[1];
  assign _021_[0] = _058_[0];
  assign _022_[7] = _068_[7];
  assign _022_[6] = _068_[6];
  assign _022_[5] = _068_[5];
  assign _022_[4] = _068_[4];
  assign _022_[3] = _068_[3];
  assign _022_[2] = _068_[2];
  assign _022_[1] = _068_[1];
  assign _022_[0] = _068_[0];
  assign _023_[7] = _066_[7];
  assign _023_[6] = _066_[6];
  assign _023_[5] = _066_[5];
  assign _023_[4] = _066_[4];
  assign _023_[3] = _066_[3];
  assign _023_[2] = _066_[2];
  assign _023_[1] = _066_[1];
  assign _023_[0] = _066_[0];
  assign _024_[7] = _064_[7];
  assign _024_[6] = _064_[6];
  assign _024_[5] = _064_[5];
  assign _024_[4] = _064_[4];
  assign _024_[3] = _064_[3];
  assign _024_[2] = _064_[2];
  assign _024_[1] = _064_[1];
  assign _024_[0] = _064_[0];
  assign _026_ = _069_;
  assign _027_ = _063_;
  assign _028_ = _057_;
  assign _029_ = _051_;
  assign _047_ = _051_;
  assign _049_ = _051_;
  assign _053_ = _057_;
  assign _055_ = _057_;
  assign _059_ = _063_;
  assign _061_ = _063_;
  assign _065_ = _069_;
  assign _067_ = _069_;
  assign _071_ = ce;
  assign _072_[31] = dato[31];
  assign _072_[30] = dato[30];
  assign _072_[29] = dato[29];
  assign _072_[28] = dato[28];
  assign _072_[27] = dato[27];
  assign _072_[26] = dato[26];
  assign _072_[25] = dato[25];
  assign _072_[24] = dato[24];
  assign _072_[23] = dato[23];
  assign _072_[22] = dato[22];
  assign _072_[21] = dato[21];
  assign _072_[20] = dato[20];
  assign _072_[19] = dato[19];
  assign _072_[18] = dato[18];
  assign _072_[17] = dato[17];
  assign _072_[16] = dato[16];
  assign _072_[15] = dato[15];
  assign _072_[14] = dato[14];
  assign _072_[13] = dato[13];
  assign _072_[12] = dato[12];
  assign _072_[11] = dato[11];
  assign _072_[10] = dato[10];
  assign _072_[9] = dato[9];
  assign _072_[8] = dato[8];
  assign _072_[7] = dato[7];
  assign _072_[6] = dato[6];
  assign _072_[5] = dato[5];
  assign _072_[4] = dato[4];
  assign _072_[3] = dato[3];
  assign _072_[2] = dato[2];
  assign _072_[1] = dato[1];
  assign _072_[0] = dato[0];
  assign _073_[31] = q[31];
  assign _073_[30] = q[30];
  assign _073_[29] = q[29];
  assign _073_[28] = q[28];
  assign _073_[27] = q[27];
  assign _073_[26] = q[26];
  assign _073_[25] = q[25];
  assign _073_[24] = q[24];
  assign _073_[23] = q[23];
  assign _073_[22] = q[22];
  assign _073_[21] = q[21];
  assign _073_[20] = q[20];
  assign _073_[19] = q[19];
  assign _073_[18] = q[18];
  assign _073_[17] = q[17];
  assign _073_[16] = q[16];
  assign _073_[15] = q[15];
  assign _073_[14] = q[14];
  assign _073_[13] = q[13];
  assign _073_[12] = q[12];
  assign _073_[11] = q[11];
  assign _073_[10] = q[10];
  assign _073_[9] = q[9];
  assign _073_[8] = q[8];
  assign _073_[7] = q[7];
  assign _073_[6] = q[6];
  assign _073_[5] = q[5];
  assign _073_[4] = q[4];
  assign _073_[3] = q[3];
  assign _073_[2] = q[2];
  assign _073_[1] = q[1];
  assign _073_[0] = q[0];
endmodule

module eth_wishbone(WB_CLK_I, WB_DAT_I, WB_DAT_O, WB_ADR_I, WB_WE_I, WB_ACK_O, BDCs, Reset, m_wb_adr_o, m_wb_sel_o, m_wb_we_o, m_wb_dat_o, m_wb_dat_i, m_wb_cyc_o, m_wb_stb_o, m_wb_ack_i, m_wb_err_i, m_wb_cti_o, m_wb_bte_o, MTxClk, TxStartFrm
, TxEndFrm, TxUsedData, TxData, TxRetry, TxAbort, TxUnderRun, TxDone, PerPacketCrcEn, PerPacketPad, MRxClk, RxData, RxValid, RxStartFrm, RxEndFrm, RxAbort, RxStatusWriteLatched_sync2, r_TxEn, r_RxEn, r_TxBDNum, r_RxFlow, r_PassAll
, TxB_IRQ, TxE_IRQ, RxB_IRQ, RxE_IRQ, Busy_IRQ, InvalidSymbol, LatchedCrcError, RxLateCollision, ShortFrame, DribbleNibble, ReceivedPacketTooBig, RxLength, LoadRxStatus, ReceivedPacketGood, AddressMiss, ReceivedPauseFrm, RetryCntLatched, RetryLimit, LateCollLatched, DeferLatched, RstDeferLatched
, CarrierSenseLost);
  wire _0000_;
  wire [3:0] _0001_;
  wire _0002_;
  wire _0003_;
  wire _0004_;
  wire _0005_;
  wire _0006_;
  wire _0007_;
  wire _0008_;
  wire _0009_;
  wire _0010_;
  wire _0011_;
  wire _0012_;
  wire _0013_;
  wire _0014_;
  wire _0015_;
  wire _0016_;
  wire _0017_;
  wire _0018_;
  wire _0019_;
  wire _0020_;
  wire [15:0] _0021_;
  wire _0022_;
  wire [15:0] _0023_;
  wire _0024_;
  wire _0025_;
  wire _0026_;
  wire _0027_;
  wire _0028_;
  wire _0029_;
  wire _0030_;
  wire _0031_;
  wire _0032_;
  wire _0033_;
  wire _0034_;
  wire _0035_;
  wire _0036_;
  wire _0037_;
  wire _0038_;
  wire _0039_;
  wire _0040_;
  wire [6:0] _0041_;
  wire _0042_;
  wire _0043_;
  wire _0044_;
  wire [1:0] _0045_;
  wire [3:0] _0046_;
  wire [23:0] _0047_;
  wire [31:0] _0048_;
  wire _0049_;
  wire _0050_;
  wire _0051_;
  wire _0052_;
  wire _0053_;
  wire _0054_;
  wire [1:0] _0055_;
  wire [29:0] _0056_;
  wire _0057_;
  wire _0058_;
  wire [8:0] _0059_;
  wire _0060_;
  wire _0061_;
  wire _0062_;
  wire _0063_;
  wire _0064_;
  wire [1:0] _0065_;
  wire [1:0] _0066_;
  wire _0067_;
  wire _0068_;
  wire _0069_;
  wire _0070_;
  wire _0071_;
  wire _0072_;
  wire _0073_;
  wire _0074_;
  wire _0075_;
  wire _0076_;
  wire _0077_;
  wire _0078_;
  wire _0079_;
  wire _0080_;
  wire _0081_;
  wire _0082_;
  wire _0083_;
  wire _0084_;
  wire _0085_;
  wire [6:0] _0086_;
  wire _0087_;
  wire _0088_;
  wire _0089_;
  wire [1:0] _0090_;
  wire [31:0] _0091_;
  wire [7:0] _0092_;
  wire _0093_;
  wire _0094_;
  wire _0095_;
  wire _0096_;
  wire _0097_;
  wire _0098_;
  wire _0099_;
  wire _0100_;
  wire _0101_;
  wire _0102_;
  wire _0103_;
  wire _0104_;
  wire [15:0] _0105_;
  wire [1:0] _0106_;
  wire [1:0] _0107_;
  wire [29:0] _0108_;
  wire _0109_;
  wire _0110_;
  wire _0111_;
  wire _0112_;
  wire _0113_;
  wire _0114_;
  wire _0115_;
  wire _0116_;
  wire _0117_;
  wire _0118_;
  wire _0119_;
  wire _0120_;
  wire _0121_;
  wire _0122_;
  wire [3:0] _0123_;
  wire _0124_;
  wire _0125_;
  wire _0126_;
  wire _0127_;
  wire [1:0] _0128_;
  wire _0129_;
  wire _0130_;
  wire _0131_;
  wire _0132_;
  wire _0133_;
  wire _0134_;
  wire _0135_;
  wire _0136_;
  wire [29:0] _0137_;
  wire [2:0] _0138_;
  wire _0139_;
  wire [3:0] _0140_;
  wire _0141_;
  wire _0142_;
  wire _0143_;
  wire [7:0] _0144_;
  wire [31:0] _0145_;
  wire [2:0] _0146_;
  wire _0147_;
  wire [2:0] _0148_;
  wire _0149_;
  wire [3:0] _0150_;
  wire [29:0] _0151_;
  wire [2:0] _0152_;
  wire [29:0] _0153_;
  wire [2:0] _0154_;
  wire [29:0] _0155_;
  wire [6:0] _0156_;
  wire [6:0] _0157_;
  wire [1:0] _0158_;
  wire [29:0] _0159_;
  wire [1:0] _0160_;
  wire [1:0] _0161_;
  wire _0162_;
  wire _0163_;
  wire _0164_;
  wire _0165_;
  wire _0166_;
  wire _0167_;
  wire _0168_;
  wire _0169_;
  wire _0170_;
  wire _0171_;
  wire _0172_;
  wire _0173_;
  wire _0174_;
  wire _0175_;
  wire _0176_;
  wire _0177_;
  wire _0178_;
  wire _0179_;
  wire _0180_;
  wire _0181_;
  wire _0182_;
  wire _0183_;
  wire _0184_;
  wire _0185_;
  wire _0186_;
  wire _0187_;
  wire _0188_;
  wire _0189_;
  wire _0190_;
  wire _0191_;
  wire _0192_;
  wire [6:0] _0193_;
  wire [6:0] _0194_;
  wire [6:0] _0195_;
  wire _0196_;
  wire _0197_;
  wire _0198_;
  wire _0199_;
  wire _0200_;
  wire _0201_;
  wire _0202_;
  wire _0203_;
  wire _0204_;
  wire _0205_;
  wire _0206_;
  wire _0207_;
  wire _0208_;
  wire _0209_;
  wire _0210_;
  wire _0211_;
  wire _0212_;
  wire _0213_;
  wire _0214_;
  wire _0215_;
  wire _0216_;
  wire _0217_;
  wire _0218_;
  wire _0219_;
  wire _0220_;
  wire _0221_;
  wire _0222_;
  wire _0223_;
  wire _0224_;
  wire _0225_;
  wire _0226_;
  wire _0227_;
  wire _0228_;
  wire _0229_;
  wire _0230_;
  wire _0231_;
  wire _0232_;
  wire _0233_;
  wire _0234_;
  wire _0235_;
  wire _0236_;
  wire _0237_;
  wire _0238_;
  wire _0239_;
  wire _0240_;
  wire _0241_;
  wire _0242_;
  wire _0243_;
  wire _0244_;
  wire _0245_;
  wire _0246_;
  wire _0247_;
  wire _0248_;
  wire _0249_;
  wire _0250_;
  wire _0251_;
  wire _0252_;
  wire _0253_;
  wire _0254_;
  wire _0255_;
  wire _0256_;
  wire _0257_;
  wire _0258_;
  wire _0259_;
  wire _0260_;
  wire _0261_;
  wire _0262_;
  wire _0263_;
  wire _0264_;
  wire _0265_;
  wire _0266_;
  wire _0267_;
  wire _0268_;
  wire _0269_;
  wire _0270_;
  wire _0271_;
  wire _0272_;
  wire _0273_;
  wire _0274_;
  wire _0275_;
  wire _0276_;
  wire _0277_;
  wire _0278_;
  wire _0279_;
  wire _0280_;
  wire _0281_;
  wire _0282_;
  wire _0283_;
  wire _0284_;
  wire _0285_;
  wire _0286_;
  wire _0287_;
  wire _0288_;
  wire _0289_;
  wire _0290_;
  wire _0291_;
  wire _0292_;
  wire _0293_;
  wire _0294_;
  wire _0295_;
  wire _0296_;
  wire _0297_;
  wire _0298_;
  wire _0299_;
  wire _0300_;
  wire _0301_;
  wire _0302_;
  wire _0303_;
  wire _0304_;
  wire _0305_;
  wire _0306_;
  wire _0307_;
  wire _0308_;
  wire _0309_;
  wire _0310_;
  wire _0311_;
  wire _0312_;
  wire _0313_;
  wire _0314_;
  wire _0315_;
  wire _0316_;
  wire _0317_;
  wire _0318_;
  wire _0319_;
  wire _0320_;
  wire _0321_;
  wire _0322_;
  wire _0323_;
  wire _0324_;
  wire _0325_;
  wire _0326_;
  wire _0327_;
  wire _0328_;
  wire _0329_;
  wire _0330_;
  wire _0331_;
  wire _0332_;
  wire _0333_;
  wire _0334_;
  wire _0335_;
  wire _0336_;
  wire _0337_;
  wire _0338_;
  wire _0339_;
  wire _0340_;
  wire _0341_;
  wire _0342_;
  wire _0343_;
  wire _0344_;
  wire _0345_;
  wire _0346_;
  wire _0347_;
  wire _0348_;
  wire _0349_;
  wire _0350_;
  wire _0351_;
  wire _0352_;
  wire _0353_;
  wire _0354_;
  wire _0355_;
  wire _0356_;
  wire _0357_;
  wire _0358_;
  wire _0359_;
  wire [3:0] _0360_;
  wire _0361_;
  wire _0362_;
  wire _0363_;
  wire _0364_;
  wire _0365_;
  wire _0366_;
  wire _0367_;
  wire _0368_;
  wire _0369_;
  wire _0370_;
  wire _0371_;
  wire _0372_;
  wire [3:0] _0373_;
  wire _0374_;
  wire [3:0] _0375_;
  wire _0376_;
  wire [3:0] _0377_;
  wire _0378_;
  wire _0379_;
  wire _0380_;
  wire _0381_;
  wire _0382_;
  wire _0383_;
  wire _0384_;
  wire _0385_;
  wire _0386_;
  wire _0387_;
  wire _0388_;
  wire _0389_;
  wire _0390_;
  wire _0391_;
  wire _0392_;
  wire _0393_;
  wire _0394_;
  wire _0395_;
  wire _0396_;
  wire _0397_;
  wire _0398_;
  wire _0399_;
  wire _0400_;
  wire _0401_;
  wire _0402_;
  wire _0403_;
  wire _0404_;
  wire _0405_;
  wire _0406_;
  wire _0407_;
  wire _0408_;
  wire _0409_;
  wire _0410_;
  wire _0411_;
  wire _0412_;
  wire _0413_;
  wire _0414_;
  wire _0415_;
  wire _0416_;
  wire _0417_;
  wire _0418_;
  wire _0419_;
  wire _0420_;
  wire _0421_;
  wire _0422_;
  wire _0423_;
  wire _0424_;
  wire _0425_;
  wire _0426_;
  wire _0427_;
  wire _0428_;
  wire _0429_;
  wire _0430_;
  wire _0431_;
  wire _0432_;
  wire _0433_;
  wire _0434_;
  wire _0435_;
  wire _0436_;
  wire _0437_;
  wire _0438_;
  wire _0439_;
  wire _0440_;
  wire _0441_;
  wire _0442_;
  wire _0443_;
  wire _0444_;
  wire _0445_;
  wire _0446_;
  wire _0447_;
  wire _0448_;
  wire _0449_;
  wire _0450_;
  wire _0451_;
  wire _0452_;
  wire _0453_;
  wire _0454_;
  wire _0455_;
  wire _0456_;
  wire _0457_;
  wire _0458_;
  wire _0459_;
  wire _0460_;
  wire _0461_;
  wire _0462_;
  wire _0463_;
  wire _0464_;
  wire _0465_;
  wire _0466_;
  wire _0467_;
  wire _0468_;
  wire _0469_;
  wire _0470_;
  wire _0471_;
  wire _0472_;
  wire _0473_;
  wire _0474_;
  wire _0475_;
  wire _0476_;
  wire _0477_;
  wire _0478_;
  wire _0479_;
  wire _0480_;
  wire _0481_;
  wire _0482_;
  wire _0483_;
  wire _0484_;
  wire _0485_;
  wire _0486_;
  wire _0487_;
  wire _0488_;
  wire _0489_;
  wire _0490_;
  wire _0491_;
  wire _0492_;
  wire _0493_;
  wire _0494_;
  wire _0495_;
  wire _0496_;
  wire _0497_;
  wire _0498_;
  wire _0499_;
  wire _0500_;
  wire _0501_;
  wire _0502_;
  wire _0503_;
  wire _0504_;
  wire _0505_;
  wire _0506_;
  wire _0507_;
  wire _0508_;
  wire _0509_;
  wire _0510_;
  wire _0511_;
  wire _0512_;
  wire _0513_;
  wire _0514_;
  wire _0515_;
  wire _0516_;
  wire _0517_;
  wire _0518_;
  wire _0519_;
  wire _0520_;
  wire _0521_;
  wire _0522_;
  wire _0523_;
  wire _0524_;
  wire _0525_;
  wire _0526_;
  wire _0527_;
  wire _0528_;
  wire _0529_;
  wire _0530_;
  wire _0531_;
  wire _0532_;
  wire _0533_;
  wire _0534_;
  wire _0535_;
  wire [6:0] _0536_;
  wire _0537_;
  wire _0538_;
  wire _0539_;
  wire _0540_;
  wire _0541_;
  wire _0542_;
  wire _0543_;
  wire _0544_;
  wire _0545_;
  wire _0546_;
  wire _0547_;
  wire _0548_;
  wire _0549_;
  wire _0550_;
  wire _0551_;
  wire _0552_;
  wire _0553_;
  wire _0554_;
  wire _0555_;
  wire _0556_;
  wire _0557_;
  wire _0558_;
  wire _0559_;
  wire _0560_;
  wire _0561_;
  wire _0562_;
  wire _0563_;
  wire _0564_;
  wire _0565_;
  wire _0566_;
  wire _0567_;
  wire _0568_;
  wire _0569_;
  wire _0570_;
  wire _0571_;
  wire _0572_;
  wire [3:0] _0573_;
  wire _0574_;
  wire _0575_;
  wire _0576_;
  wire _0577_;
  wire _0578_;
  wire _0579_;
  wire _0580_;
  wire _0581_;
  wire _0582_;
  wire _0583_;
  wire _0584_;
  wire _0585_;
  wire _0586_;
  wire [1:0] _0587_;
  wire _0588_;
  wire [1:0] _0589_;
  wire _0590_;
  wire _0591_;
  wire _0592_;
  wire _0593_;
  wire _0594_;
  wire _0595_;
  wire _0596_;
  wire _0597_;
  wire _0598_;
  wire _0599_;
  wire _0600_;
  wire _0601_;
  wire _0602_;
  wire [31:0] _0603_;
  wire _0604_;
  wire [7:0] _0605_;
  wire _0606_;
  wire _0607_;
  wire _0608_;
  wire _0609_;
  wire [7:0] _0610_;
  wire _0611_;
  wire [7:0] _0612_;
  wire _0613_;
  wire [7:0] _0614_;
  wire _0615_;
  wire _0616_;
  wire _0617_;
  wire _0618_;
  wire [7:0] _0619_;
  wire _0620_;
  wire _0621_;
  wire _0622_;
  wire _0623_;
  wire _0624_;
  wire _0625_;
  wire _0626_;
  wire _0627_;
  wire _0628_;
  wire _0629_;
  wire _0630_;
  wire _0631_;
  wire _0632_;
  wire _0633_;
  wire _0634_;
  wire _0635_;
  wire _0636_;
  wire _0637_;
  wire _0638_;
  wire _0639_;
  wire _0640_;
  wire _0641_;
  wire _0642_;
  wire _0643_;
  wire _0644_;
  wire _0645_;
  wire _0646_;
  wire _0647_;
  wire _0648_;
  wire _0649_;
  wire _0650_;
  wire _0651_;
  wire _0652_;
  wire _0653_;
  wire _0654_;
  wire _0655_;
  wire _0656_;
  wire _0657_;
  wire _0658_;
  wire _0659_;
  wire _0660_;
  wire _0661_;
  wire _0662_;
  wire _0663_;
  wire [6:0] _0664_;
  wire _0665_;
  wire [6:0] _0666_;
  wire _0667_;
  wire [6:0] _0668_;
  wire _0669_;
  wire [6:0] _0670_;
  wire _0671_;
  wire [1:0] _0672_;
  wire _0673_;
  wire [1:0] _0674_;
  wire _0675_;
  wire _0676_;
  wire _0677_;
  wire _0678_;
  wire _0679_;
  wire _0680_;
  wire _0681_;
  wire _0682_;
  wire _0683_;
  wire _0684_;
  wire _0685_;
  wire _0686_;
  wire _0687_;
  wire _0688_;
  wire _0689_;
  wire _0690_;
  wire _0691_;
  wire _0692_;
  wire _0693_;
  wire _0694_;
  wire [1:0] _0695_;
  wire _0696_;
  wire [3:0] _0697_;
  wire _0698_;
  wire [1:0] _0699_;
  wire _0700_;
  wire [1:0] _0701_;
  wire _0702_;
  wire _0703_;
  wire _0704_;
  wire [3:0] _0705_;
  wire _0706_;
  wire [3:0] _0707_;
  wire _0708_;
  wire _0709_;
  wire [1:0] _0710_;
  wire _0711_;
  wire [3:0] _0712_;
  wire _0713_;
  wire [1:0] _0714_;
  wire _0715_;
  wire [1:0] _0716_;
  wire _0717_;
  wire [3:0] _0718_;
  wire _0719_;
  wire [3:0] _0720_;
  wire _0721_;
  wire _0722_;
  wire [1:0] _0723_;
  wire _0724_;
  wire [1:0] _0725_;
  wire _0726_;
  wire [1:0] _0727_;
  wire _0728_;
  wire _0729_;
  wire _0730_;
  wire [3:0] _0731_;
  wire _0732_;
  wire [3:0] _0733_;
  wire _0734_;
  wire _0735_;
  wire [1:0] _0736_;
  wire _0737_;
  wire [1:0] _0738_;
  wire _0739_;
  wire [1:0] _0740_;
  wire _0741_;
  wire _0742_;
  wire _0743_;
  wire [3:0] _0744_;
  wire _0745_;
  wire [3:0] _0746_;
  wire _0747_;
  wire [2:0] _0748_;
  wire [1:0] _0749_;
  wire _0750_;
  wire [3:0] _0751_;
  wire _0752_;
  wire [3:0] _0753_;
  wire _0754_;
  wire [2:0] _0755_;
  wire _0756_;
  wire [3:0] _0757_;
  wire _0758_;
  wire [3:0] _0759_;
  wire _0760_;
  wire _0761_;
  wire [1:0] _0762_;
  wire _0763_;
  wire [3:0] _0764_;
  wire _0765_;
  wire _0766_;
  wire _0767_;
  wire [3:0] _0768_;
  wire _0769_;
  wire _0770_;
  wire _0771_;
  wire [3:0] _0772_;
  wire _0773_;
  wire _0774_;
  wire _0775_;
  wire [3:0] _0776_;
  wire _0777_;
  wire [2:0] _0778_;
  wire [1:0] _0779_;
  wire _0780_;
  wire [3:0] _0781_;
  wire _0782_;
  wire [2:0] _0783_;
  wire _0784_;
  wire [3:0] _0785_;
  wire _0786_;
  wire [2:0] _0787_;
  wire _0788_;
  wire [3:0] _0789_;
  wire _0790_;
  wire _0791_;
  wire [1:0] _0792_;
  wire _0793_;
  wire [3:0] _0794_;
  wire _0795_;
  wire [1:0] _0796_;
  wire _0797_;
  wire [1:0] _0798_;
  wire _0799_;
  wire _0800_;
  wire _0801_;
  wire [3:0] _0802_;
  wire _0803_;
  wire [3:0] _0804_;
  wire _0805_;
  wire _0806_;
  wire [1:0] _0807_;
  wire _0808_;
  wire [1:0] _0809_;
  wire _0810_;
  wire _0811_;
  wire _0812_;
  wire [3:0] _0813_;
  wire _0814_;
  wire [3:0] _0815_;
  wire _0816_;
  wire [3:0] _0817_;
  wire [1:0] _0818_;
  wire _0819_;
  wire [1:0] _0820_;
  wire _0821_;
  wire _0822_;
  wire _0823_;
  wire [3:0] _0824_;
  wire _0825_;
  wire [3:0] _0826_;
  wire _0827_;
  wire [29:0] _0828_;
  wire [1:0] _0829_;
  wire _0830_;
  wire [1:0] _0831_;
  wire _0832_;
  wire _0833_;
  wire _0834_;
  wire [29:0] _0835_;
  wire _0836_;
  wire [3:0] _0837_;
  wire _0838_;
  wire [29:0] _0839_;
  wire _0840_;
  wire [3:0] _0841_;
  wire _0842_;
  wire _0843_;
  wire _0844_;
  wire _0845_;
  wire _0846_;
  wire _0847_;
  wire _0848_;
  wire _0849_;
  wire _0850_;
  wire _0851_;
  wire _0852_;
  wire _0853_;
  wire _0854_;
  wire [1:0] _0855_;
  wire _0856_;
  wire [1:0] _0857_;
  wire _0858_;
  wire [1:0] _0859_;
  wire _0860_;
  wire [29:0] _0861_;
  wire _0862_;
  wire [29:0] _0863_;
  wire _0864_;
  wire [15:0] _0865_;
  wire _0866_;
  wire [15:0] _0867_;
  wire _0868_;
  wire [15:0] _0869_;
  wire _0870_;
  wire [15:0] _0871_;
  wire _0872_;
  wire [15:0] _0873_;
  wire _0874_;
  wire [15:0] _0875_;
  wire _0876_;
  wire [15:0] _0877_;
  wire _0878_;
  wire [15:0] _0879_;
  wire _0880_;
  wire [3:0] _0881_;
  wire _0882_;
  wire _0883_;
  wire _0884_;
  wire _0885_;
  wire _0886_;
  wire _0887_;
  wire _0888_;
  wire _0889_;
  wire _0890_;
  wire _0891_;
  wire _0892_;
  wire _0893_;
  wire _0894_;
  wire _0895_;
  wire _0896_;
  wire _0897_;
  wire _0898_;
  wire _0899_;
  wire _0900_;
  wire _0901_;
  wire _0902_;
  wire _0903_;
  wire _0904_;
  wire _0905_;
  wire _0906_;
  wire [31:0] _0907_;
  wire _0908_;
  wire [3:0] _0909_;
  wire _0910_;
  wire [1:0] _0911_;
  wire _0912_;
  wire [1:0] _0913_;
  wire _0914_;
  wire _0915_;
  wire [1:0] _0916_;
  wire _0917_;
  wire [7:0] _0918_;
  wire _0919_;
  wire [3:0] _0920_;
  wire _0921_;
  wire [1:0] _0922_;
  wire _0923_;
  wire [1:0] _0924_;
  wire _0925_;
  wire _0926_;
  wire [1:0] _0927_;
  wire _0928_;
  wire _0929_;
  wire _0930_;
  wire [3:0] _0931_;
  wire _0932_;
  wire [1:0] _0933_;
  wire _0934_;
  wire [1:0] _0935_;
  wire _0936_;
  wire _0937_;
  wire [1:0] _0938_;
  wire _0939_;
  wire _0940_;
  wire _0941_;
  wire [3:0] _0942_;
  wire _0943_;
  wire [1:0] _0944_;
  wire _0945_;
  wire [1:0] _0946_;
  wire _0947_;
  wire _0948_;
  wire [1:0] _0949_;
  wire _0950_;
  wire _0951_;
  wire _0952_;
  wire _0953_;
  wire [3:0] _0954_;
  wire _0955_;
  wire [1:0] _0956_;
  wire _0957_;
  wire [1:0] _0958_;
  wire _0959_;
  wire _0960_;
  wire [1:0] _0961_;
  wire _0962_;
  wire _0963_;
  wire _0964_;
  wire [3:0] _0965_;
  wire _0966_;
  wire [1:0] _0967_;
  wire _0968_;
  wire [3:0] _0969_;
  wire _0970_;
  wire [3:0] _0971_;
  wire _0972_;
  wire [1:0] _0973_;
  wire _0974_;
  wire _0975_;
  wire _0976_;
  wire _0977_;
  wire _0978_;
  wire _0979_;
  wire _0980_;
  wire _0981_;
  wire _0982_;
  wire _0983_;
  wire _0984_;
  wire _0985_;
  wire _0986_;
  wire _0987_;
  wire _0988_;
  wire _0989_;
  wire _0990_;
  wire _0991_;
  wire _0992_;
  wire _0993_;
  wire _0994_;
  wire _0995_;
  wire _0996_;
  wire _0997_;
  wire _0998_;
  wire [8:0] _0999_;
  wire _1000_;
  wire [15:0] _1001_;
  wire _1002_;
  wire _1003_;
  wire _1004_;
  wire _1005_;
  wire _1006_;
  wire _1007_;
  wire _1008_;
  wire _1009_;
  wire _1010_;
  wire _1011_;
  wire _1012_;
  wire _1013_;
  wire _1014_;
  wire _1015_;
  wire _1016_;
  wire _1017_;
  wire _1018_;
  wire _1019_;
  wire _1020_;
  wire _1021_;
  wire _1022_;
  wire _1023_;
  wire _1024_;
  wire _1025_;
  wire _1026_;
  wire _1027_;
  wire _1028_;
  wire _1029_;
  wire _1030_;
  wire _1031_;
  wire _1032_;
  wire _1033_;
  wire _1034_;
  wire [31:0] _1035_;
  wire _1036_;
  wire _1037_;
  wire _1038_;
  wire _1039_;
  wire [31:0] _1040_;
  wire _1041_;
  wire [31:0] _1042_;
  wire _1043_;
  wire [7:0] _1044_;
  wire _1045_;
  wire [7:0] _1046_;
  wire _1047_;
  wire [7:0] _1048_;
  wire _1049_;
  wire [7:0] _1050_;
  wire _1051_;
  wire [7:0] _1052_;
  wire _1053_;
  wire [7:0] _1054_;
  wire _1055_;
  wire [7:0] _1056_;
  wire _1057_;
  wire [7:0] _1058_;
  wire _1059_;
  wire [7:0] _1060_;
  wire _1061_;
  wire [7:0] _1062_;
  wire _1063_;
  wire [7:0] _1064_;
  wire _1065_;
  wire [7:0] _1066_;
  wire _1067_;
  wire [7:0] _1068_;
  wire _1069_;
  wire [7:0] _1070_;
  wire _1071_;
  wire [7:0] _1072_;
  wire _1073_;
  wire [1:0] _1074_;
  wire _1075_;
  wire [1:0] _1076_;
  wire _1077_;
  wire _1078_;
  wire _1079_;
  wire _1080_;
  wire [1:0] _1081_;
  wire _1082_;
  wire [1:0] _1083_;
  wire _1084_;
  wire [1:0] _1085_;
  wire _1086_;
  wire _1087_;
  wire _1088_;
  wire _1089_;
  wire [1:0] _1090_;
  wire _1091_;
  wire [1:0] _1092_;
  wire _1093_;
  wire _1094_;
  wire _1095_;
  wire _1096_;
  wire _1097_;
  wire _1098_;
  wire _1099_;
  wire _1100_;
  wire _1101_;
  wire _1102_;
  wire _1103_;
  wire _1104_;
  wire _1105_;
  wire [3:0] _1106_;
  wire _1107_;
  wire _1108_;
  wire _1109_;
  wire _1110_;
  wire [1:0] _1111_;
  wire _1112_;
  wire [1:0] _1113_;
  wire _1114_;
  wire [29:0] _1115_;
  wire _1116_;
  wire [29:0] _1117_;
  wire _1118_;
  wire _1119_;
  wire _1120_;
  wire _1121_;
  wire _1122_;
  wire _1123_;
  wire _1124_;
  wire _1125_;
  wire _1126_;
  wire [1:0] _1127_;
  wire _1128_;
  wire _1129_;
  wire _1130_;
  wire _1131_;
  wire _1132_;
  wire _1133_;
  wire _1134_;
  wire _1135_;
  wire _1136_;
  wire _1137_;
  wire _1138_;
  wire _1139_;
  wire _1140_;
  wire [1:0] _1141_;
  wire _1142_;
  wire [1:0] _1143_;
  wire _1144_;
  wire _1145_;
  wire _1146_;
  wire _1147_;
  wire _1148_;
  wire _1149_;
  wire _1150_;
  wire _1151_;
  wire _1152_;
  wire _1153_;
  wire _1154_;
  wire _1155_;
  wire _1156_;
  wire _1157_;
  wire [15:0] _1158_;
  wire [15:0] _1159_;
  wire [15:0] _1160_;
  wire [15:0] _1161_;
  wire _1162_;
  wire _1163_;
  wire [1:0] _1164_;
  input AddressMiss;
  wire AddressMiss;
  input [3:0] BDCs;
  wire [3:0] BDCs;
  reg BDRead;
  reg [3:0] BDWrite;
  reg BlockReadTxDataFromMemory;
  reg BlockingIncrementTxPointer;
  reg BlockingTxBDRead;
  reg BlockingTxStatusWrite;
  reg BlockingTxStatusWrite_sync1;
  reg BlockingTxStatusWrite_sync2;
  reg BlockingTxStatusWrite_sync3;
  output Busy_IRQ;
  wire Busy_IRQ;
  reg Busy_IRQ_rck;
  reg Busy_IRQ_sync1;
  reg Busy_IRQ_sync2;
  reg Busy_IRQ_sync3;
  reg Busy_IRQ_syncb1;
  reg Busy_IRQ_syncb2;
  input CarrierSenseLost;
  wire CarrierSenseLost;
  input DeferLatched;
  wire DeferLatched;
  input DribbleNibble;
  wire DribbleNibble;
  reg Flop;
  reg IncrTxPointer;
  input InvalidSymbol;
  wire InvalidSymbol;
  reg LastByteIn;
  reg LastWord;
  reg LatchValidBytes;
  reg LatchValidBytes_q;
  input LatchedCrcError;
  wire LatchedCrcError;
  wire [15:0] LatchedRxLength;
  reg LatchedRxStartFrm;
  wire [15:0] LatchedTxLength;
  input LateCollLatched;
  wire LateCollLatched;
  input LoadRxStatus;
  wire LoadRxStatus;
  input MRxClk;
  wire MRxClk;
  input MTxClk;
  wire MTxClk;
  wire MasterAccessFinished;
  reg MasterWbRX;
  reg MasterWbTX;
  output PerPacketCrcEn;
  wire PerPacketCrcEn;
  output PerPacketPad;
  wire PerPacketPad;
  reg ReadTxDataFromFifo_sync1;
  reg ReadTxDataFromFifo_sync2;
  reg ReadTxDataFromFifo_sync3;
  reg ReadTxDataFromFifo_syncb1;
  reg ReadTxDataFromFifo_syncb2;
  reg ReadTxDataFromFifo_syncb3;
  reg ReadTxDataFromFifo_tck;
  wire ReadTxDataFromFifo_wb;
  reg ReadTxDataFromMemory;
  wire ReadTxDataFromMemory_2;
  input ReceivedPacketGood;
  wire ReceivedPacketGood;
  input ReceivedPacketTooBig;
  wire ReceivedPacketTooBig;
  input ReceivedPauseFrm;
  wire ReceivedPauseFrm;
  input Reset;
  wire Reset;
  wire ResetTxBDReady;
  input [3:0] RetryCntLatched;
  wire [3:0] RetryCntLatched;
  input RetryLimit;
  wire RetryLimit;
  output RstDeferLatched;
  wire RstDeferLatched;
  input RxAbort;
  wire RxAbort;
  reg RxAbortLatched;
  reg RxAbortSync1;
  reg RxAbortSync2;
  reg RxAbortSync3;
  reg RxAbortSync4;
  reg RxAbortSyncb1;
  reg RxAbortSyncb2;
  reg [7:1] RxBDAddress;
  wire [31:0] RxBDDataIn;
  reg RxBDRead;
  reg RxBDReady;
  output RxB_IRQ;
  reg RxB_IRQ;
  wire RxBufferAlmostEmpty;
  wire RxBufferEmpty;
  wire RxBufferFull;
  wire RxBurstAcc;
  wire RxByteAcc;
  reg [1:0] RxByteCnt;
  wire [3:0] RxByteSel;
  input [7:0] RxData;
  wire [7:0] RxData;
  reg [31:8] RxDataLatched1;
  reg [31:0] RxDataLatched2;
  output RxE_IRQ;
  reg RxE_IRQ;
  reg RxEn;
  reg RxEn_needed;
  reg RxEn_q;
  reg RxEnableWindow;
  input RxEndFrm;
  wire RxEndFrm;
  wire RxError;
  wire RxFifoReset;
  wire RxHalfAcc;
  wire RxIRQEn;
  input RxLateCollision;
  wire RxLateCollision;
  input [15:0] RxLength;
  wire [15:0] RxLength;
  wire RxOverrun;
  reg [1:0] RxPointerLSB_rst;
  reg [31:2] RxPointerMSB;
  reg RxPointerRead;
  reg RxReady;
  input RxStartFrm;
  wire RxStartFrm;
  wire [14:13] RxStatus;
  wire [8:0] RxStatusIn;
  reg [8:0] RxStatusInLatched;
  wire RxStatusWrite;
  reg RxStatusWriteLatched;
  reg RxStatusWriteLatched_sync1;
  output RxStatusWriteLatched_sync2;
  reg RxStatusWriteLatched_sync2;
  reg RxStatusWriteLatched_syncb1;
  reg RxStatusWriteLatched_syncb2;
  input RxValid;
  wire RxValid;
  reg [1:0] RxValidBytes;
  wire RxWordAcc;
  wire SetReadTxDataFromMemory;
  wire SetWriteRxDataToFifo;
  reg ShiftEnded;
  reg ShiftEndedSync1;
  reg ShiftEndedSync2;
  reg ShiftEndedSync3;
  reg ShiftEndedSync_c1;
  reg ShiftEndedSync_c2;
  reg ShiftEnded_rck;
  reg ShiftWillEnd;
  input ShortFrame;
  wire ShortFrame;
  reg StartOccured;
  wire StartRxBDRead;
  wire StartRxPointerRead;
  wire StartShiftWillEnd;
  wire StartTxBDRead;
  wire StartTxPointerRead;
  reg SyncRxStartFrm;
  reg SyncRxStartFrm_q;
  reg SyncRxStartFrm_q2;
  wire [7:1] TempRxBDAddress;
  wire [7:1] TempTxBDAddress;
  input TxAbort;
  wire TxAbort;
  reg TxAbortPacket;
  reg TxAbortPacketBlocked;
  reg TxAbortPacket_NotCleared;
  wire TxAbortPulse;
  reg TxAbortSync1;
  reg TxAbort_q;
  reg TxAbort_wb;
  reg TxAbort_wb_q;
  reg [7:1] TxBDAddress;
  wire [31:0] TxBDDataIn;
  reg TxBDRead;
  reg TxBDReady;
  output TxB_IRQ;
  reg TxB_IRQ;
  wire TxBufferAlmostEmpty;
  wire TxBufferAlmostFull;
  wire TxBufferEmpty;
  wire TxBufferFull;
  reg [1:0] TxByteCnt;
  output [7:0] TxData;
  reg [7:0] TxData;
  reg [31:0] TxDataLatched;
  wire [31:0] TxData_wb;
  input TxDone;
  wire TxDone;
  reg TxDonePacket;
  reg TxDonePacketBlocked;
  reg TxDonePacket_NotCleared;
  wire TxDonePulse;
  reg TxDoneSync1;
  reg TxDone_wb;
  reg TxDone_wb_q;
  output TxE_IRQ;
  reg TxE_IRQ;
  reg TxEn;
  reg TxEn_needed;
  reg TxEn_q;
  output TxEndFrm;
  reg TxEndFrm;
  reg TxEndFrm_wb;
  wire TxError;
  wire TxFifoClear;
  wire TxIRQEn;
  reg [15:0] TxLength;
  wire TxLengthEq0;
  wire TxLengthLt4;
  reg [1:0] TxPointerLSB;
  reg [1:0] TxPointerLSB_rst;
  reg [31:2] TxPointerMSB;
  reg TxPointerRead;
  input TxRetry;
  wire TxRetry;
  reg TxRetryPacket;
  reg TxRetryPacketBlocked;
  reg TxRetryPacket_NotCleared;
  wire TxRetryPulse;
  reg TxRetrySync1;
  reg TxRetry_q;
  reg TxRetry_wb;
  reg TxRetry_wb_q;
  output TxStartFrm;
  reg TxStartFrm;
  reg TxStartFrm_sync1;
  reg TxStartFrm_sync2;
  reg TxStartFrm_syncb1;
  reg TxStartFrm_syncb2;
  reg TxStartFrm_wb;
  wire [14:11] TxStatus;
  wire [8:0] TxStatusInLatched;
  wire TxStatusWrite;
  output TxUnderRun;
  reg TxUnderRun;
  reg TxUnderRun_sync1;
  reg TxUnderRun_wb;
  input TxUsedData;
  wire TxUsedData;
  reg TxUsedData_q;
  wire [1:0] TxValidBytes;
  reg [1:0] TxValidBytesLatched;
  output WB_ACK_O;
  reg WB_ACK_O;
  input [9:2] WB_ADR_I;
  wire [9:2] WB_ADR_I;
  input WB_CLK_I;
  wire WB_CLK_I;
  input [31:0] WB_DAT_I;
  wire [31:0] WB_DAT_I;
  output [31:0] WB_DAT_O;
  wire [31:0] WB_DAT_O;
  input WB_WE_I;
  wire WB_WE_I;
  reg WbEn;
  reg WbEn_q;
  wire WrapRxStatusBit;
  wire WrapTxStatusBit;
  reg WriteRxDataToFifo;
  reg WriteRxDataToFifoSync1;
  reg WriteRxDataToFifoSync2;
  reg WriteRxDataToFifoSync3;
  wire WriteRxDataToFifo_wb;
  wire WriteRxDataToMemory;
  reg cyc_cleared;
  wire enough_data_in_rxfifo_for_burst;
  wire enough_data_in_rxfifo_for_burst_plus1;
  input m_wb_ack_i;
  wire m_wb_ack_i;
  output [29:0] m_wb_adr_o;
  reg [29:0] m_wb_adr_o;
  output [1:0] m_wb_bte_o;
  wire [1:0] m_wb_bte_o;
  output [2:0] m_wb_cti_o;
  reg [2:0] m_wb_cti_o;
  output m_wb_cyc_o;
  reg m_wb_cyc_o;
  input [31:0] m_wb_dat_i;
  wire [31:0] m_wb_dat_i;
  output [31:0] m_wb_dat_o;
  wire [31:0] m_wb_dat_o;
  input m_wb_err_i;
  wire m_wb_err_i;
  output [3:0] m_wb_sel_o;
  reg [3:0] m_wb_sel_o;
  output m_wb_stb_o;
  wire m_wb_stb_o;
  output m_wb_we_o;
  reg m_wb_we_o;
  input r_PassAll;
  wire r_PassAll;
  input r_RxEn;
  wire r_RxEn;
  reg r_RxEn_q;
  input r_RxFlow;
  wire r_RxFlow;
  input [7:0] r_TxBDNum;
  wire [7:0] r_TxBDNum;
  input r_TxEn;
  wire r_TxEn;
  reg r_TxEn_q;
  reg [7:0] ram_addr;
  wire ram_ce;
  reg [31:0] ram_di;
  wire [31:0] ram_do;
  wire ram_oe;
  wire [3:0] ram_we;
  wire rx_burst;
  reg [2:0] rx_burst_cnt;
  reg rx_burst_en;
  wire [4:0] rxfifo_cnt;
  wire tx_burst;
  reg [2:0] tx_burst_cnt;
  reg tx_burst_en;
  wire [4:0] txfifo_cnt;
  assign _0151_ = TxPointerMSB + 1'h1;
  assign _0152_ = tx_burst_cnt + 3'h1;
  assign _0153_ = m_wb_adr_o + 1'h1;
  assign _0154_ = rx_burst_cnt + 3'h1;
  assign _0155_ = m_wb_adr_o + 1'h1;
  assign _0156_ = TxBDAddress + 1'h1;
  assign _0157_ = RxBDAddress + 1'h1;
  assign _0158_ = TxByteCnt + 1'h1;
  assign _0159_ = RxPointerMSB + 1'h1;
  assign _0160_ = RxByteCnt + 1'h1;
  assign _0161_ = RxValidBytes + 1'h1;
  assign _0162_ = TxEn & TxEn_q;
  assign _0866_ = _0162_ & TxBDRead;
  assign _0164_ = TxEn & TxEn_q;
  assign _0864_ = _0164_ & TxPointerRead;
  assign _0862_ = IncrTxPointer & _0442_;
  assign _0167_ = TxEn & TxEn_q;
  assign _0860_ = _0167_ & TxPointerRead;
  assign _0169_ = TxEn & TxEn_q;
  assign _0858_ = _0169_ & TxPointerRead;
  assign _0856_ = MasterWbTX & m_wb_ack_i;
  assign _0172_ = TxEn & TxEn_q;
  assign SetReadTxDataFromMemory = _0172_ & TxPointerRead;
  assign ReadTxDataFromMemory_2 = ReadTxDataFromMemory & _0443_;
  assign tx_burst = ReadTxDataFromMemory_2 & tx_burst_en;
  assign _0176_ = _0522_ & MasterWbTX;
  assign _0177_ = _0176_ & _0444_;
  assign _0846_ = _0177_ & _0421_;
  assign _0179_ = _0440_ & _0416_;
  assign _0180_ = _0441_ & _0417_;
  assign _0181_ = MasterWbTX & m_wb_ack_i;
  assign _0182_ = ReadTxDataFromFifo_wb & _0445_;
  assign _0183_ = TxBDReady & _0446_;
  assign _0693_ = _0183_ & _0529_;
  assign _0185_ = _0447_ & _0531_;
  assign _0186_ = TxRetry & _0448_;
  assign _0187_ = TxAbort & _0449_;
  assign _0188_ = TxLengthEq0 & TxBufferAlmostEmpty;
  assign _0681_ = _0188_ & TxUsedData;
  assign _0677_ = TxLengthLt4 & TxBDReady;
  assign _0675_ = LatchValidBytes & _0450_;
  assign _0192_ = TxStatusWrite & _0451_;
  assign TempTxBDAddress = { _0192_, _0192_, _0192_, _0192_, _0192_, _0192_, _0192_ } & _0156_;
  assign _0194_ = { WrapRxStatusBit, WrapRxStatusBit, WrapRxStatusBit, WrapRxStatusBit, WrapRxStatusBit, WrapRxStatusBit, WrapRxStatusBit } & r_TxBDNum[6:0];
  assign _0195_ = { _0452_, _0452_, _0452_, _0452_, _0452_, _0452_, _0452_ } & _0157_;
  assign _0671_ = r_TxEn & _0453_;
  assign _0667_ = r_RxEn & _0454_;
  assign TxRetryPulse = TxRetry_wb & _0455_;
  assign TxDonePulse = TxDone_wb & _0456_;
  assign TxAbortPulse = TxAbort_wb & _0457_;
  assign _0201_ = TxAbort_wb & _0458_;
  assign _0202_ = _0201_ & MasterWbTX;
  assign _0203_ = _0202_ & MasterAccessFinished;
  assign _0204_ = _0203_ & _0459_;
  assign _0205_ = TxAbort_wb & _0460_;
  assign _0206_ = _0205_ & _0461_;
  assign _0207_ = TxEn & TxEn_q;
  assign _0661_ = _0207_ & TxAbortPacket_NotCleared;
  assign _0209_ = TxAbort_wb & _0462_;
  assign _0210_ = _0209_ & MasterWbTX;
  assign _0211_ = _0210_ & MasterAccessFinished;
  assign _0212_ = _0211_ & _0463_;
  assign _0213_ = TxAbort_wb & _0464_;
  assign _0214_ = _0213_ & _0465_;
  assign _0657_ = _0422_ & TxAbort_wb_q;
  assign _0216_ = TxRetry_wb & _0423_;
  assign _0217_ = _0216_ & MasterWbTX;
  assign _0218_ = _0217_ & MasterAccessFinished;
  assign _0219_ = _0218_ & _0424_;
  assign _0220_ = TxRetry_wb & _0425_;
  assign _0221_ = _0220_ & _0426_;
  assign _0222_ = TxRetry_wb & _0427_;
  assign _0223_ = _0222_ & MasterWbTX;
  assign _0224_ = _0223_ & MasterAccessFinished;
  assign _0225_ = _0224_ & _0428_;
  assign _0226_ = TxRetry_wb & _0429_;
  assign _0227_ = _0226_ & _0430_;
  assign _0647_ = _0431_ & TxRetry_wb_q;
  assign _0229_ = TxDone_wb & _0432_;
  assign _0230_ = _0229_ & MasterWbTX;
  assign _0231_ = _0230_ & MasterAccessFinished;
  assign _0232_ = _0231_ & _0433_;
  assign _0233_ = TxDone_wb & _0434_;
  assign _0234_ = _0233_ & _0435_;
  assign _0235_ = TxEn & TxEn_q;
  assign _0641_ = _0235_ & TxDonePacket_NotCleared;
  assign _0237_ = TxDone_wb & _0436_;
  assign _0238_ = _0237_ & MasterWbTX;
  assign _0239_ = _0238_ & MasterAccessFinished;
  assign _0240_ = _0239_ & _0466_;
  assign _0241_ = TxDone_wb & _0437_;
  assign _0242_ = _0241_ & _0467_;
  assign _0637_ = _0438_ & TxDone_wb_q;
  assign _0633_ = _0544_ & Flop;
  assign _0245_ = TxUsedData & Flop;
  assign _0631_ = _0245_ & _0404_;
  assign _0247_ = Flop & TxEndFrm;
  assign _0627_ = Flop & LastWord;
  assign _0620_ = TxStartFrm_sync2 & _0468_;
  assign _0250_ = TxStartFrm & TxUsedData;
  assign _0613_ = _0250_ & _0409_;
  assign _0611_ = TxUsedData & Flop;
  assign _0253_ = TxStartFrm_sync2 & _0469_;
  assign _0254_ = TxUsedData & Flop;
  assign _0255_ = _0254_ & _0410_;
  assign _0256_ = TxStartFrm & TxUsedData;
  assign _0257_ = _0256_ & Flop;
  assign _0258_ = _0257_ & _0411_;
  assign _0600_ = TxBufferEmpty & ReadTxDataFromFifo_wb;
  assign _0588_ = TxStartFrm & _0470_;
  assign _1142_ = TxUsedData & Flop;
  assign _0262_ = TxStartFrm_sync2 & _0471_;
  assign _0263_ = TxUsedData & Flop;
  assign _0264_ = _0263_ & _0412_;
  assign _0265_ = _0264_ & _0472_;
  assign _0266_ = TxStartFrm & TxUsedData;
  assign _0267_ = _0266_ & Flop;
  assign _0268_ = _0267_ & _0413_;
  assign _1138_ = ReadTxDataFromFifo_syncb2 & _0473_;
  assign ReadTxDataFromFifo_wb = ReadTxDataFromFifo_sync2 & _0474_;
  assign _0271_ = RxAbortSync3 & _0475_;
  assign _0272_ = r_RxEn & _0476_;
  assign _1136_ = StartRxBDRead & _0477_;
  assign _0274_ = RxEn & RxEn_q;
  assign _1130_ = _0274_ & RxBDRead;
  assign _0276_ = RxEn & RxEn_q;
  assign _1128_ = _0276_ & RxBDRead;
  assign _0278_ = RxAbortSync2 & _0478_;
  assign _0279_ = _0479_ & r_RxEn_q;
  assign _0280_ = RxEn & RxEn_q;
  assign _1124_ = _0280_ & RxPointerRead;
  assign StartRxPointerRead = RxBDRead & RxBDReady;
  assign _1120_ = RxEn & RxEn_q;
  assign _0284_ = RxEn & RxEn_q;
  assign _1118_ = _0284_ & RxPointerRead;
  assign _1116_ = MasterWbRX & m_wb_ack_i;
  assign _1114_ = MasterWbRX & m_wb_ack_i;
  assign _0288_ = RxEn & RxEn_q;
  assign _1112_ = _0288_ & RxPointerRead;
  assign _0290_ = _0480_ & r_RxEn;
  assign _0291_ = _0290_ & WbEn;
  assign _1105_ = _0291_ & _0481_;
  assign _0293_ = RxPointerRead & RxEn;
  assign _1103_ = _0293_ & RxEn_q;
  assign _0295_ = ShiftEnded & RxEn;
  assign RxStatusWrite = _0295_ & RxEn_q;
  assign _0297_ = ShiftWillEnd & _1146_;
  assign _0298_ = RxValid & RxReady;
  assign _0299_ = _0298_ & RxEndFrm;
  assign _0300_ = _0299_ & _0482_;
  assign _1099_ = _0300_ & RxEnableWindow;
  assign _0302_ = RxValid & RxEndFrm;
  assign _0303_ = _0302_ & _1148_;
  assign _0304_ = _0303_ & RxEnableWindow;
  assign _0305_ = RxValid & RxStartFrm;
  assign _1091_ = _0305_ & RxReady;
  assign _0307_ = RxValid & RxEnableWindow;
  assign _0308_ = _0307_ & RxReady;
  assign _1082_ = RxValid & RxStartFrm;
  assign _0310_ = RxValid & _0483_;
  assign _0311_ = _0310_ & _0484_;
  assign _1075_ = _0311_ & RxEnableWindow;
  assign _0313_ = RxValid & RxReady;
  assign _1073_ = _0313_ & _0485_;
  assign _1043_ = SetWriteRxDataToFifo & _0486_;
  assign _1041_ = SetWriteRxDataToFifo & ShiftWillEnd;
  assign _0317_ = RxValid & RxReady;
  assign _0318_ = _0317_ & _0487_;
  assign _0319_ = _0318_ & RxEnableWindow;
  assign _0320_ = _0319_ & _1149_;
  assign _0321_ = RxValid & RxReady;
  assign _0322_ = _0321_ & RxStartFrm;
  assign _0323_ = _0322_ & _1150_;
  assign _0324_ = ShiftWillEnd & LastByteIn;
  assign _0325_ = _0324_ & _1151_;
  assign _1034_ = SetWriteRxDataToFifo & _0488_;
  assign WriteRxDataToFifo_wb = WriteRxDataToFifoSync2 & _0489_;
  assign _1028_ = RxStartFrm & _0490_;
  assign RxFifoReset = SyncRxStartFrm_q & _0491_;
  assign _0330_ = WriteRxDataToFifo_wb & _0492_;
  assign _0331_ = MasterWbRX & m_wb_ack_i;
  assign rx_burst = rx_burst_en & WriteRxDataToMemory;
  assign _0333_ = _0494_ & SetWriteRxDataToFifo;
  assign _1022_ = _0333_ & StartShiftWillEnd;
  assign _0335_ = ShiftEndedSync_c1 & ShiftEndedSync_c2;
  assign _1018_ = ShiftEndedSync1 & _0495_;
  assign _0337_ = ShiftEndedSync3 & MasterWbRX;
  assign _0338_ = _0337_ & m_wb_ack_i;
  assign _0339_ = _0338_ & RxBufferAlmostEmpty;
  assign _1014_ = _0339_ & _0496_;
  assign _0996_ = RxBufferFull & WriteRxDataToFifo_wb;
  assign _0990_ = TxStatusWrite & TxStatus[14];
  assign _0988_ = TxStatusWrite & TxStatus[14];
  assign _0344_ = RxStatusWrite & RxStatus[14];
  assign _0345_ = _0344_ & ReceivedPacketGood;
  assign _0986_ = _0345_ & _0570_;
  assign _0347_ = ReceivedPauseFrm & r_PassAll;
  assign _0348_ = _0347_ & _0499_;
  assign _0349_ = RxStatusWrite & RxStatus[14];
  assign _0350_ = ReceivedPauseFrm & r_PassAll;
  assign _0351_ = _0350_ & _0502_;
  assign _0984_ = _0349_ & _0571_;
  assign _0353_ = RxValid & RxStartFrm;
  assign _0982_ = _0353_ & _0503_;
  assign Busy_IRQ = Busy_IRQ_sync2 & _0504_;
  assign _0356_ = _1154_ & WbEn;
  assign _0357_ = _0356_ & WbEn_q;
  assign _0358_ = BDRead & WbEn;
  assign _0359_ = _0358_ & _0505_;
  assign _0360_ = BDWrite & { _0361_, _0361_, _0361_, _0361_ };
  assign _0361_ = WbEn & WbEn_q;
  assign _0362_ = BDRead & WbEn;
  assign _0363_ = _0362_ & WbEn_q;
  assign _0364_ = TxEn & TxEn_q;
  assign _0365_ = _0364_ & _0577_;
  assign _0366_ = RxEn & RxEn_q;
  assign _0367_ = _0366_ & _0578_;
  assign _0368_ = _0506_ & r_TxEn;
  assign _0369_ = _0368_ & WbEn;
  assign _0978_ = _0369_ & _0507_;
  assign _0371_ = TxPointerRead & TxEn;
  assign _0976_ = _0371_ & TxEn_q;
  assign _0373_ = BDCs & { WB_WE_I, WB_WE_I, WB_WE_I, WB_WE_I };
  assign _0374_ = _1155_ & _0508_;
  assign _0375_ = BDCs & { WB_WE_I, WB_WE_I, WB_WE_I, WB_WE_I };
  assign _0376_ = _1156_ & _0509_;
  assign _0377_ = BDCs & { WB_WE_I, WB_WE_I, WB_WE_I, WB_WE_I };
  assign _0378_ = _1157_ & _0510_;
  assign _0379_ = TxEn & TxEn_q;
  assign _0902_ = _0379_ & TxBDRead;
  assign _0381_ = WB_DAT_O[15] & _0419_;
  assign _0382_ = _0583_ & _0512_;
  assign StartTxBDRead = _0382_ & _0513_;
  assign StartTxPointerRead = TxBDRead & TxBDReady;
  assign _0385_ = _0584_ & TxEn;
  assign _0386_ = _0385_ & TxEn_q;
  assign TxStatusWrite = _0386_ & _0514_;
  assign _0890_ = _0515_ & _0516_;
  assign RstDeferLatched = BlockingTxStatusWrite_sync2 & _0517_;
  assign _0884_ = _0518_ & _0519_;
  assign _0391_ = TxEn & TxEn_q;
  assign _0882_ = _0391_ & TxBDRead;
  assign _0393_ = TxEn & TxEn_q;
  assign _0880_ = _0393_ & TxBDRead;
  assign _0878_ = MasterWbTX & m_wb_ack_i;
  assign _0872_ = TxPointerLSB_rst == 2'h1;
  assign _0870_ = TxPointerLSB_rst == 2'h2;
  assign _0868_ = TxPointerLSB_rst == 2'h3;
  assign TxLengthEq0 = ! TxLength;
  assign _0840_ = ! tx_burst_cnt;
  assign _0788_ = tx_burst_cnt == 3'h3;
  assign _0836_ = ! rx_burst_cnt;
  assign _0784_ = rx_burst_cnt == 3'h3;
  assign _0404_ = TxByteCnt == 2'h3;
  assign _0405_ = ! TxByteCnt;
  assign _0406_ = TxByteCnt == 2'h1;
  assign _0407_ = TxByteCnt == 2'h2;
  assign _0408_ = TxByteCnt == 2'h3;
  assign _0409_ = TxPointerLSB == 2'h3;
  assign _0410_ = TxByteCnt == 2'h3;
  assign _0411_ = ! TxByteCnt;
  assign _0412_ = TxByteCnt == 2'h3;
  assign _0413_ = ! TxByteCnt;
  assign _0874_ = ! TxPointerLSB_rst;
  assign enough_data_in_rxfifo_for_burst = rxfifo_cnt >= 32'd4;
  assign _0416_ = TxLength > 32'd20;
  assign _0417_ = TxLength > 32'd20;
  assign enough_data_in_rxfifo_for_burst_plus1 = rxfifo_cnt > 32'd4;
  assign _0419_ = WB_DAT_O[31:16] > 32'd4;
  assign _0420_ = TxLength <= 32'd4;
  assign _0421_ = ! _0523_;
  assign _0422_ = ! TxAbort_wb;
  assign _0423_ = ! tx_burst_en;
  assign _0424_ = ! TxRetryPacketBlocked;
  assign _0425_ = ! MasterWbTX;
  assign _0426_ = ! TxRetryPacketBlocked;
  assign _0427_ = ! tx_burst_en;
  assign _0428_ = ! TxRetryPacketBlocked;
  assign _0429_ = ! MasterWbTX;
  assign _0430_ = ! TxRetryPacketBlocked;
  assign _0431_ = ! TxRetry_wb;
  assign _0432_ = ! tx_burst_en;
  assign _0433_ = ! TxDonePacketBlocked;
  assign _0434_ = ! MasterWbTX;
  assign _0435_ = ! TxDonePacketBlocked;
  assign _0436_ = ! tx_burst_en;
  assign _0437_ = ! MasterWbTX;
  assign _0438_ = ! TxDone_wb;
  assign TxLengthLt4 = TxLength < 32'd4;
  assign _0440_ = txfifo_cnt < 32'd12;
  assign _0441_ = txfifo_cnt < 32'd12;
  assign _0442_ = ~ BlockingIncrementTxPointer;
  assign _0443_ = ~ BlockReadTxDataFromMemory;
  assign _0444_ = ~ cyc_cleared;
  assign _0445_ = ~ TxBufferEmpty;
  assign _0446_ = ~ StartOccured;
  assign _0447_ = ~ TxStartFrm_sync2;
  assign _0448_ = ~ TxRetry_q;
  assign _0449_ = ~ TxAbort_q;
  assign _0450_ = ~ LatchValidBytes_q;
  assign _0451_ = ~ WrapTxStatusBit;
  assign _0452_ = ~ WrapRxStatusBit;
  assign _0453_ = ~ r_TxEn_q;
  assign _0454_ = ~ r_RxEn_q;
  assign _0455_ = ~ TxRetry_wb_q;
  assign _0456_ = ~ TxDone_wb_q;
  assign _0457_ = ~ TxAbort_wb_q;
  assign _0458_ = ~ tx_burst_en;
  assign _0459_ = ~ TxAbortPacketBlocked;
  assign _0460_ = ~ MasterWbTX;
  assign _0461_ = ~ TxAbortPacketBlocked;
  assign _0462_ = ~ tx_burst_en;
  assign _0463_ = ~ TxAbortPacketBlocked;
  assign _0464_ = ~ MasterWbTX;
  assign _0465_ = ~ TxAbortPacketBlocked;
  assign _0466_ = ~ TxDonePacketBlocked;
  assign _0467_ = ~ TxDonePacketBlocked;
  assign _0468_ = ~ TxStartFrm;
  assign _0469_ = ~ TxStartFrm;
  assign _0470_ = ~ TxUsedData;
  assign _0471_ = ~ TxStartFrm;
  assign _0472_ = ~ LastWord;
  assign _0473_ = ~ ReadTxDataFromFifo_syncb3;
  assign _0474_ = ~ ReadTxDataFromFifo_sync3;
  assign _0475_ = ~ RxAbortSync4;
  assign _0476_ = ~ r_RxEn_q;
  assign _0477_ = ~ RxReady;
  assign _0478_ = ~ RxAbortSync3;
  assign _0479_ = ~ r_RxEn;
  assign _0480_ = ~ RxReady;
  assign _0481_ = ~ WbEn_q;
  assign _0482_ = ~ _1147_;
  assign _0483_ = ~ LastByteIn;
  assign _0484_ = ~ RxStartFrm;
  assign _0485_ = ~ LastByteIn;
  assign _0486_ = ~ ShiftWillEnd;
  assign _0487_ = ~ RxStartFrm;
  assign _0488_ = ~ RxAbort;
  assign _0489_ = ~ WriteRxDataToFifoSync3;
  assign _0490_ = ~ SyncRxStartFrm_q;
  assign _0491_ = ~ SyncRxStartFrm_q2;
  assign _0492_ = ~ RxBufferFull;
  assign WriteRxDataToMemory = ~ RxBufferEmpty;
  assign _0494_ = ~ RxAbort;
  assign _0495_ = ~ ShiftEndedSync2;
  assign _0496_ = ~ ShiftEnded;
  assign _0497_ = ~ TxError;
  assign _0498_ = ~ ReceivedPauseFrm;
  assign _0499_ = ~ r_RxFlow;
  assign _0500_ = ~ RxError;
  assign _0501_ = ~ ReceivedPauseFrm;
  assign _0502_ = ~ r_RxFlow;
  assign _0503_ = ~ RxReady;
  assign _0504_ = ~ Busy_IRQ_sync3;
  assign _0505_ = ~ WbEn_q;
  assign _0506_ = ~ TxBDReady;
  assign _0507_ = ~ WbEn_q;
  assign _0508_ = ~ WB_WE_I;
  assign _0509_ = ~ WB_WE_I;
  assign _0510_ = ~ WB_WE_I;
  assign _0511_ = ~ Flop;
  assign _0512_ = ~ BlockingTxBDRead;
  assign _0513_ = ~ TxBDReady;
  assign _0514_ = ~ BlockingTxStatusWrite;
  assign _0515_ = ~ TxDone_wb;
  assign _0516_ = ~ TxAbort_wb;
  assign _0517_ = ~ BlockingTxStatusWrite_sync3;
  assign _0518_ = ~ StartTxBDRead;
  assign _0519_ = ~ TxBDReady;
  assign _0520_ = TxLengthEq0 | TxAbortPulse;
  assign _0850_ = _0520_ | TxRetryPulse;
  assign _0522_ = TxBufferAlmostFull | _0420_;
  assign _0523_ = TxAbortPacket_NotCleared | TxRetryPacket_NotCleared;
  assign _0524_ = ReadTxDataFromFifo_wb | TxDonePacket;
  assign _0525_ = _0524_ | TxAbortPacket;
  assign _0844_ = _0525_ | TxRetryPacket;
  assign MasterAccessFinished = m_wb_ack_i | m_wb_err_i;
  assign TxFifoClear = TxAbortPacket | TxRetryPacket;
  assign _0529_ = TxBufferFull | TxLengthEq0;
  assign _0683_ = TxUsedData_q | _0185_;
  assign _0531_ = _0186_ | _0187_;
  assign _0532_ = TxRetryPulse | TxDonePulse;
  assign _0679_ = _0532_ | TxAbortPulse;
  assign _0534_ = TxRetryPulse | TxDonePulse;
  assign _0673_ = _0534_ | TxAbortPulse;
  assign TempRxBDAddress = _0194_ | _0195_;
  assign _0663_ = _0204_ | _0206_;
  assign _0659_ = _0212_ | _0214_;
  assign _0653_ = _0219_ | _0221_;
  assign _0649_ = _0225_ | _0227_;
  assign _0643_ = _0232_ | _0234_;
  assign _0639_ = _0240_ | _0242_;
  assign _0543_ = TxEndFrm | TxAbort;
  assign _0544_ = _0543_ | TxRetry;
  assign _0545_ = _0247_ | TxAbort;
  assign _0629_ = _0545_ | TxRetry_q;
  assign _0547_ = _0253_ | _0255_;
  assign _0604_ = _0547_ | _0258_;
  assign _0590_ = TxAbort_q | TxRetry_q;
  assign _0550_ = _0262_ | _0265_;
  assign _1140_ = _0550_ | _0268_;
  assign _0552_ = RxStatusWrite | _0271_;
  assign StartRxBDRead = _0552_ | _0272_;
  assign _0554_ = ShiftEnded | _0278_;
  assign _1126_ = _0554_ | _0279_;
  assign _1101_ = _0297_ | RxAbort;
  assign StartShiftWillEnd = LastByteIn | _0304_;
  assign _1097_ = ShiftEnded_rck | RxAbort;
  assign _1093_ = ShiftEnded_rck | RxAbort;
  assign _1084_ = _0308_ | LastByteIn;
  assign _0561_ = _0320_ | _0323_;
  assign SetWriteRxDataToFifo = _0561_ | _0325_;
  assign _1032_ = WriteRxDataToFifoSync2 | RxAbort;
  assign _1020_ = RxAbort | _0335_;
  assign _1008_ = RxEndFrm | RxAbort;
  assign _0566_ = TxUnderRun | RetryLimit;
  assign _0567_ = _0566_ | LateCollLatched;
  assign TxError = _0567_ | CarrierSenseLost;
  assign RxError = _1152_ | _1153_;
  assign _0570_ = _0498_ | _0348_;
  assign _0571_ = _0501_ | _0351_;
  assign _0572_ = _0357_ | _0359_;
  assign ram_we = _0360_ | { _0574_, _0574_, _0574_, _0574_ };
  assign _0574_ = TxStatusWrite | RxStatusWrite;
  assign _0575_ = _0363_ | _0365_;
  assign ram_oe = _0575_ | _0367_;
  assign _0577_ = TxBDRead | TxPointerRead;
  assign _0578_ = RxBDRead | RxPointerRead;
  assign _0579_ = TxDone | TxAbort;
  assign _0906_ = _0579_ | TxRetry_q;
  assign _0581_ = TxDonePulse | TxAbortPulse;
  assign ResetTxBDReady = _0581_ | TxRetryPulse;
  assign _0583_ = TxRetryPacket_NotCleared | TxStatusWrite;
  assign _0584_ = TxDonePacket_NotCleared | TxAbortPacket_NotCleared;
  always @(posedge MRxClk)
    Busy_IRQ_syncb1 <= Busy_IRQ_sync2;
  always @(posedge MRxClk)
    Busy_IRQ_syncb2 <= Busy_IRQ_syncb1;
  always @(posedge WB_CLK_I)
    Busy_IRQ_sync1 <= Busy_IRQ_rck;
  always @(posedge WB_CLK_I)
    Busy_IRQ_sync2 <= Busy_IRQ_sync1;
  always @(posedge WB_CLK_I)
    Busy_IRQ_sync3 <= Busy_IRQ_sync2;
  always @(posedge MRxClk, posedge Reset)
    if (Reset) Busy_IRQ_rck <= 1'h0;
    else Busy_IRQ_rck <= _0981_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) RxE_IRQ <= 1'h0;
    else RxE_IRQ <= _0983_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) RxB_IRQ <= 1'h0;
    else RxB_IRQ <= _0985_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxE_IRQ <= 1'h0;
    else TxE_IRQ <= _0987_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxB_IRQ <= 1'h0;
    else TxB_IRQ <= _0989_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) RxStatusWriteLatched_syncb1 <= 1'h0;
    else RxStatusWriteLatched_syncb1 <= RxStatusWriteLatched_sync2;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) RxStatusWriteLatched_syncb2 <= 1'h0;
    else RxStatusWriteLatched_syncb2 <= RxStatusWriteLatched_syncb1;
  always @(posedge MRxClk, posedge Reset)
    if (Reset) RxStatusWriteLatched_sync2 <= 1'h0;
    else RxStatusWriteLatched_sync2 <= RxStatusWriteLatched_sync1;
  always @(posedge MRxClk, posedge Reset)
    if (Reset) RxStatusWriteLatched_sync1 <= 1'h0;
    else RxStatusWriteLatched_sync1 <= RxStatusWriteLatched;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) RxStatusWriteLatched <= 1'h0;
    else RxStatusWriteLatched <= _0993_;
  reg \RxStatusIn_reg[6] ;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) \RxStatusIn_reg[6]  <= 1'h0;
    else \RxStatusIn_reg[6]  <= _0997_;
  assign RxStatusIn[6] = \RxStatusIn_reg[6] ;
  always @(posedge MRxClk, posedge Reset)
    if (Reset) RxStatusInLatched <= 9'h000;
    else RxStatusInLatched <= _0999_;
  reg [15:0] _1616_;
  always @(posedge MRxClk, posedge Reset)
    if (Reset) _1616_ <= 16'h0000;
    else _1616_ <= _1001_;
  assign RxBDDataIn[31:16] = _1616_;
  always @(posedge MRxClk, posedge Reset)
    if (Reset) RxAbortLatched <= 1'h0;
    else RxAbortLatched <= _1005_;
  always @(posedge MRxClk, posedge Reset)
    if (Reset) RxAbortSyncb2 <= 1'h0;
    else RxAbortSyncb2 <= RxAbortSyncb1;
  always @(posedge MRxClk, posedge Reset)
    if (Reset) RxAbortSyncb1 <= 1'h0;
    else RxAbortSyncb1 <= RxAbortSync2;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) RxAbortSync4 <= 1'h0;
    else RxAbortSync4 <= RxAbortSync3;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) RxAbortSync3 <= 1'h0;
    else RxAbortSync3 <= RxAbortSync2;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) RxAbortSync2 <= 1'h0;
    else RxAbortSync2 <= RxAbortSync1;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) RxAbortSync1 <= 1'h0;
    else RxAbortSync1 <= RxAbortLatched;
  always @(posedge MRxClk, posedge Reset)
    if (Reset) RxEnableWindow <= 1'h0;
    else RxEnableWindow <= _1009_;
  always @(posedge MRxClk, posedge Reset)
    if (Reset) ShiftEndedSync_c2 <= 1'h0;
    else ShiftEndedSync_c2 <= ShiftEndedSync_c1;
  always @(posedge MRxClk, posedge Reset)
    if (Reset) ShiftEndedSync_c1 <= 1'h0;
    else ShiftEndedSync_c1 <= ShiftEndedSync2;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) ShiftEnded <= 1'h0;
    else ShiftEnded <= _1013_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) ShiftEndedSync3 <= 1'h0;
    else ShiftEndedSync3 <= _1017_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) ShiftEndedSync2 <= 1'h0;
    else ShiftEndedSync2 <= ShiftEndedSync1;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) ShiftEndedSync1 <= 1'h0;
    else ShiftEndedSync1 <= ShiftEnded_rck;
  always @(posedge MRxClk, posedge Reset)
    if (Reset) ShiftEnded_rck <= 1'h0;
    else ShiftEnded_rck <= _1021_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) SyncRxStartFrm_q2 <= 1'h0;
    else SyncRxStartFrm_q2 <= SyncRxStartFrm_q;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) SyncRxStartFrm_q <= 1'h0;
    else SyncRxStartFrm_q <= SyncRxStartFrm;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) SyncRxStartFrm <= 1'h0;
    else SyncRxStartFrm <= _1023_;
  always @(posedge MRxClk, posedge Reset)
    if (Reset) LatchedRxStartFrm <= 1'h0;
    else LatchedRxStartFrm <= _1027_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) WriteRxDataToFifoSync3 <= 1'h0;
    else WriteRxDataToFifoSync3 <= WriteRxDataToFifoSync2;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) WriteRxDataToFifoSync2 <= 1'h0;
    else WriteRxDataToFifoSync2 <= WriteRxDataToFifoSync1;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) WriteRxDataToFifoSync1 <= 1'h0;
    else WriteRxDataToFifoSync1 <= _1029_;
  always @(posedge MRxClk, posedge Reset)
    if (Reset) WriteRxDataToFifo <= 1'h0;
    else WriteRxDataToFifo <= _1033_;
  always @(posedge MRxClk, posedge Reset)
    if (Reset) RxDataLatched2 <= 32'd0;
    else RxDataLatched2 <= _1042_;
  always @(posedge MRxClk, posedge Reset)
    if (Reset) RxDataLatched1 <= 24'h000000;
    else RxDataLatched1 <= { _1052_, _1062_, _1072_ };
  always @(posedge MRxClk, posedge Reset)
    if (Reset) RxValidBytes <= 2'h1;
    else RxValidBytes <= _1081_;
  always @(posedge MRxClk, posedge Reset)
    if (Reset) RxByteCnt <= 2'h0;
    else RxByteCnt <= _1092_;
  always @(posedge MRxClk, posedge Reset)
    if (Reset) ShiftWillEnd <= 1'h0;
    else ShiftWillEnd <= _1096_;
  always @(posedge MRxClk, posedge Reset)
    if (Reset) LastByteIn <= 1'h0;
    else LastByteIn <= _1100_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) RxEn_needed <= 1'h0;
    else RxEn_needed <= _1104_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) RxPointerLSB_rst <= 2'h0;
    else RxPointerLSB_rst <= _1113_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) RxPointerMSB <= 30'h00000000;
    else RxPointerMSB <= _1117_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) RxPointerRead <= 1'h0;
    else RxPointerRead <= _1121_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) RxReady <= 1'h0;
    else RxReady <= _1125_;
  reg [1:0] _1651_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) _1651_ <= 2'h0;
    else _1651_ <= _1127_;
  assign { RxStatus[14], WrapRxStatusBit } = _1651_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) RxBDReady <= 1'h0;
    else RxBDReady <= _1131_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) RxBDRead <= 1'h0;
    else RxBDRead <= _1135_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxAbort_wb <= 1'h0;
    else TxAbort_wb <= TxAbortSync1;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxAbortSync1 <= 1'h0;
    else TxAbortSync1 <= TxAbort;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxDone_wb <= 1'h0;
    else TxDone_wb <= TxDoneSync1;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxDoneSync1 <= 1'h0;
    else TxDoneSync1 <= TxDone;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxRetry_wb <= 1'h0;
    else TxRetry_wb <= TxRetrySync1;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxRetrySync1 <= 1'h0;
    else TxRetrySync1 <= TxRetry;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) ReadTxDataFromFifo_sync3 <= 1'h0;
    else ReadTxDataFromFifo_sync3 <= ReadTxDataFromFifo_sync2;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) ReadTxDataFromFifo_syncb3 <= 1'h0;
    else ReadTxDataFromFifo_syncb3 <= ReadTxDataFromFifo_syncb2;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) ReadTxDataFromFifo_syncb2 <= 1'h0;
    else ReadTxDataFromFifo_syncb2 <= ReadTxDataFromFifo_syncb1;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) ReadTxDataFromFifo_syncb1 <= 1'h0;
    else ReadTxDataFromFifo_syncb1 <= ReadTxDataFromFifo_sync2;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) ReadTxDataFromFifo_sync2 <= 1'h0;
    else ReadTxDataFromFifo_sync2 <= ReadTxDataFromFifo_sync1;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) ReadTxDataFromFifo_sync1 <= 1'h0;
    else ReadTxDataFromFifo_sync1 <= ReadTxDataFromFifo_tck;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) ReadTxDataFromFifo_tck <= 1'h0;
    else ReadTxDataFromFifo_tck <= _1139_;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) TxByteCnt <= 2'h0;
    else TxByteCnt <= _0589_;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) TxUnderRun <= 1'h0;
    else TxUnderRun <= _0593_;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) TxUnderRun_sync1 <= 1'h0;
    else TxUnderRun_sync1 <= _0597_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxUnderRun_wb <= 1'h0;
    else TxUnderRun_wb <= _0601_;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) TxDataLatched <= 32'd0;
    else TxDataLatched <= _0603_;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) TxData <= 8'h00;
    else TxData <= _0619_;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) TxEndFrm <= 1'h0;
    else TxEndFrm <= _0628_;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) LastWord <= 1'h0;
    else LastWord <= _0632_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxDonePacketBlocked <= 1'h0;
    else TxDonePacketBlocked <= _0636_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxDonePacket_NotCleared <= 1'h0;
    else TxDonePacket_NotCleared <= _0640_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxDonePacket <= 1'h0;
    else TxDonePacket <= _0642_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxRetryPacketBlocked <= 1'h0;
    else TxRetryPacketBlocked <= _0646_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxRetryPacket_NotCleared <= 1'h0;
    else TxRetryPacket_NotCleared <= _0650_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxRetryPacket <= 1'h0;
    else TxRetryPacket <= _0652_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxAbortPacketBlocked <= 1'h0;
    else TxAbortPacketBlocked <= _0656_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxAbortPacket_NotCleared <= 1'h0;
    else TxAbortPacket_NotCleared <= _0660_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxAbortPacket <= 1'h0;
    else TxAbortPacket <= _0662_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxDone_wb_q <= 1'h0;
    else TxDone_wb_q <= TxDone_wb;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxAbort_wb_q <= 1'h0;
    else TxAbort_wb_q <= TxAbort_wb;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxRetry_wb_q <= 1'h0;
    else TxRetry_wb_q <= TxRetry_wb;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) TxAbort_q <= 1'h0;
    else TxAbort_q <= TxAbort;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) TxRetry_q <= 1'h0;
    else TxRetry_q <= TxRetry;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) TxUsedData_q <= 1'h0;
    else TxUsedData_q <= TxUsedData;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) RxBDAddress <= 7'h00;
    else RxBDAddress <= _0666_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxBDAddress <= 7'h00;
    else TxBDAddress <= _0670_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxValidBytesLatched <= 2'h0;
    else TxValidBytesLatched <= _0674_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) LatchValidBytes_q <= 1'h0;
    else LatchValidBytes_q <= LatchValidBytes;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) LatchValidBytes <= 1'h0;
    else LatchValidBytes <= _0676_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxEndFrm_wb <= 1'h0;
    else TxEndFrm_wb <= _0680_;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) TxStartFrm <= 1'h0;
    else TxStartFrm <= _0684_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxStartFrm_syncb2 <= 1'h0;
    else TxStartFrm_syncb2 <= TxStartFrm_syncb1;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxStartFrm_syncb1 <= 1'h0;
    else TxStartFrm_syncb1 <= TxStartFrm_sync2;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) TxStartFrm_sync2 <= 1'h0;
    else TxStartFrm_sync2 <= TxStartFrm_sync1;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) TxStartFrm_sync1 <= 1'h0;
    else TxStartFrm_sync1 <= TxStartFrm_wb;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) StartOccured <= 1'h0;
    else StartOccured <= _0688_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxStartFrm_wb <= 1'h0;
    else TxStartFrm_wb <= _0692_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) m_wb_adr_o <= 30'h00000000;
    else m_wb_adr_o <= _0828_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) m_wb_sel_o <= 4'h0;
    else m_wb_sel_o <= _0817_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) m_wb_we_o <= 1'h0;
    else m_wb_we_o <= _0806_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) m_wb_cyc_o <= 1'h0;
    else m_wb_cyc_o <= _0791_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) m_wb_cti_o <= 3'h0;
    else m_wb_cti_o <= _0778_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) tx_burst_en <= 1'h1;
    else tx_burst_en <= _0770_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) rx_burst_en <= 1'h0;
    else rx_burst_en <= _0761_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) tx_burst_cnt <= 3'h0;
    else tx_burst_cnt <= _0755_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) rx_burst_cnt <= 3'h0;
    else rx_burst_cnt <= _0748_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) MasterWbTX <= 1'h0;
    else MasterWbTX <= _0735_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) MasterWbRX <= 1'h0;
    else MasterWbRX <= _0722_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) cyc_cleared <= 1'h0;
    else cyc_cleared <= _0709_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) IncrTxPointer <= 1'h0;
    else IncrTxPointer <= _0694_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) BlockReadTxDataFromMemory <= 1'h0;
    else BlockReadTxDataFromMemory <= _0845_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) ReadTxDataFromMemory <= 1'h0;
    else ReadTxDataFromMemory <= _0849_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) BlockingIncrementTxPointer <= 1'h0;
    else BlockingIncrementTxPointer <= _0853_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxPointerLSB_rst <= 2'h0;
    else TxPointerLSB_rst <= _0857_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxPointerLSB <= 2'h0;
    else TxPointerLSB <= _0859_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxPointerMSB <= 30'h00000000;
    else TxPointerMSB <= _0863_;
  reg [15:0] _1722_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) _1722_ <= 16'h0000;
    else _1722_ <= _0865_;
  assign TxBDDataIn[31:16] = _1722_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxLength <= 16'h0000;
    else TxLength <= _0879_;
  reg [3:0] _1724_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) _1724_ <= 4'h0;
    else _1724_ <= _0881_;
  assign { TxStatus[14], WrapTxStatusBit, PerPacketPad, PerPacketCrcEn } = _1724_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) BlockingTxBDRead <= 1'h0;
    else BlockingTxBDRead <= _0885_;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) BlockingTxStatusWrite_sync3 <= 1'h0;
    else BlockingTxStatusWrite_sync3 <= BlockingTxStatusWrite_sync2;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) BlockingTxStatusWrite_sync2 <= 1'h0;
    else BlockingTxStatusWrite_sync2 <= BlockingTxStatusWrite_sync1;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) BlockingTxStatusWrite_sync1 <= 1'h0;
    else BlockingTxStatusWrite_sync1 <= BlockingTxStatusWrite;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) BlockingTxStatusWrite <= 1'h0;
    else BlockingTxStatusWrite <= _0889_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxPointerRead <= 1'h0;
    else TxPointerRead <= _0893_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxBDRead <= 1'h1;
    else TxBDRead <= _0897_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxBDReady <= 1'h0;
    else TxBDReady <= _0901_;
  always @(posedge MTxClk, posedge Reset)
    if (Reset) Flop <= 1'h0;
    else Flop <= _0905_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) WbEn_q <= 1'h0;
    else WbEn_q <= WbEn;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) RxEn_q <= 1'h0;
    else RxEn_q <= RxEn;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxEn_q <= 1'h0;
    else TxEn_q <= TxEn;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) r_TxEn_q <= 1'h0;
    else r_TxEn_q <= r_TxEn;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) r_RxEn_q <= 1'h0;
    else r_RxEn_q <= r_RxEn;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) BDWrite <= 4'h0;
    else BDWrite <= _0969_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) BDRead <= 1'h0;
    else BDRead <= _0963_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) WbEn <= 1'h1;
    else WbEn <= _0951_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) RxEn <= 1'h0;
    else RxEn <= _0940_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxEn <= 1'h0;
    else TxEn <= _0929_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) ram_addr <= 8'h00;
    else ram_addr <= _0918_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) ram_di <= 32'd0;
    else ram_di <= _0907_;
  always @(posedge WB_CLK_I, posedge Reset)
    if (Reset) TxEn_needed <= 1'h0;
    else TxEn_needed <= _0977_;
  always @(posedge WB_CLK_I)
    WB_ACK_O <= _0572_;
  assign _0585_ = TxPointerLSB == 2'h1;
  assign _0586_ = ! TxPointerLSB;
  assign _0587_ = _0588_ ? _1143_ : _1141_;
  assign _0589_ = _0590_ ? 2'h0 : _0587_;
  assign _0591_ = TxUnderRun_sync1 ? 1'h1 : TxUnderRun;
  assign _0593_ = BlockingTxStatusWrite_sync2 ? 1'h0 : _0591_;
  assign _0595_ = BlockingTxStatusWrite_sync2 ? 1'h0 : TxUnderRun_sync1;
  assign _0597_ = TxUnderRun_wb ? 1'h1 : _0595_;
  assign _0599_ = _0600_ ? 1'h1 : TxUnderRun_wb;
  assign _0601_ = TxAbortPulse ? 1'h0 : _0599_;
  assign _0603_ = _0604_ ? TxData_wb : TxDataLatched;
  function [7:0] _1759_;
    input [7:0] a;
    input [31:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _1759_ = b[7:0];
      4'b??1?:
        _1759_ = b[15:8];
      4'b?1??:
        _1759_ = b[23:16];
      4'b1???:
        _1759_ = b[31:24];
      default:
        _1759_ = a;
    endcase
  endfunction
  assign _0605_ = _1759_(8'hxx, TxDataLatched, { _0609_, _0608_, _0607_, _0606_ });
  assign _0606_ = TxByteCnt == 2'h3;
  assign _0607_ = TxByteCnt == 2'h2;
  assign _0608_ = TxByteCnt == 2'h1;
  assign _0609_ = ! TxByteCnt;
  assign _0610_ = _0611_ ? _0605_ : TxData;
  assign _0612_ = _0613_ ? TxData_wb[31:24] : _0610_;
  function [7:0] _1766_;
    input [7:0] a;
    input [31:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _1766_ = b[7:0];
      4'b??1?:
        _1766_ = b[15:8];
      4'b?1??:
        _1766_ = b[23:16];
      4'b1???:
        _1766_ = b[31:24];
      default:
        _1766_ = a;
    endcase
  endfunction
  assign _0614_ = _1766_(8'hxx, TxData_wb, { _0618_, _0617_, _0616_, _0615_ });
  assign _0615_ = TxPointerLSB == 2'h3;
  assign _0616_ = TxPointerLSB == 2'h2;
  assign _0617_ = TxPointerLSB == 2'h1;
  assign _0618_ = ! TxPointerLSB;
  assign _0619_ = _0620_ ? _0614_ : _0612_;
  function [0:0] _1772_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _1772_ = b[0:0];
      4'b??1?:
        _1772_ = b[1:1];
      4'b?1??:
        _1772_ = b[2:2];
      4'b1???:
        _1772_ = b[3:3];
      default:
        _1772_ = a;
    endcase
  endfunction
  assign _0621_ = _1772_(1'hx, { _0405_, _0406_, _0407_, _0408_ }, { _0625_, _0624_, _0623_, _0622_ });
  assign _0622_ = ! TxValidBytesLatched;
  assign _0623_ = TxValidBytesLatched == 2'h3;
  assign _0624_ = TxValidBytesLatched == 2'h2;
  assign _0625_ = TxValidBytesLatched == 2'h1;
  assign _0626_ = _0627_ ? _0621_ : TxEndFrm;
  assign _0628_ = _0629_ ? 1'h0 : _0626_;
  assign _0630_ = _0631_ ? TxEndFrm_wb : LastWord;
  assign _0632_ = _0633_ ? 1'h0 : _0630_;
  assign _0634_ = TxDonePacket ? 1'h1 : TxDonePacketBlocked;
  assign _0636_ = _0637_ ? 1'h0 : _0634_;
  assign _0638_ = _0639_ ? 1'h1 : TxDonePacket_NotCleared;
  assign _0640_ = _0641_ ? 1'h0 : _0638_;
  assign _0642_ = _0643_ ? 1'h1 : 1'h0;
  assign _0644_ = TxRetryPacket ? 1'h1 : TxRetryPacketBlocked;
  assign _0646_ = _0647_ ? 1'h0 : _0644_;
  assign _0648_ = _0649_ ? 1'h1 : TxRetryPacket_NotCleared;
  assign _0650_ = StartTxBDRead ? 1'h0 : _0648_;
  assign _0652_ = _0653_ ? 1'h1 : 1'h0;
  assign _0654_ = TxAbortPacket ? 1'h1 : TxAbortPacketBlocked;
  assign _0656_ = _0657_ ? 1'h0 : _0654_;
  assign _0658_ = _0659_ ? 1'h1 : TxAbortPacket_NotCleared;
  assign _0660_ = _0661_ ? 1'h0 : _0658_;
  assign _0662_ = _0663_ ? 1'h1 : 1'h0;
  assign _0664_ = RxStatusWrite ? TempRxBDAddress : RxBDAddress;
  assign _0666_ = _0667_ ? r_TxBDNum[6:0] : _0664_;
  assign _0668_ = TxStatusWrite ? TempTxBDAddress : TxBDAddress;
  assign _0670_ = _0671_ ? 7'h00 : _0668_;
  assign _0672_ = _0673_ ? 2'h0 : TxValidBytesLatched;
  assign _0674_ = _0675_ ? TxValidBytes : _0672_;
  assign _0676_ = _0677_ ? 1'h1 : 1'h0;
  assign _0678_ = _0679_ ? 1'h0 : TxEndFrm_wb;
  assign _0680_ = _0681_ ? 1'h1 : _0678_;
  assign _0682_ = _0683_ ? 1'h0 : TxStartFrm;
  assign _0684_ = TxStartFrm_sync2 ? 1'h1 : _0682_;
  assign _0686_ = ResetTxBDReady ? 1'h0 : StartOccured;
  assign _0688_ = TxStartFrm_wb ? 1'h1 : _0686_;
  assign _0690_ = TxStartFrm_syncb2 ? 1'h0 : TxStartFrm_wb;
  assign _0692_ = _0693_ ? 1'h1 : _0690_;
  function [0:0] _1811_;
    input [0:0] a;
    input [7:0] b;
    input [7:0] s;
    casez (s) // synopsys parallel_case
      8'b???????1:
        _1811_ = b[0:0];
      8'b??????1?:
        _1811_ = b[1:1];
      8'b?????1??:
        _1811_ = b[2:2];
      8'b????1???:
        _1811_ = b[3:3];
      8'b???1????:
        _1811_ = b[4:4];
      8'b??1?????:
        _1811_ = b[5:5];
      8'b?1??????:
        _1811_ = b[6:6];
      8'b1???????:
        _1811_ = b[7:7];
      default:
        _1811_ = a;
    endcase
  endfunction
  assign _0694_ = _1811_(IncrTxPointer, 8'h98, { _0708_, _0706_, _0704_, _0703_, _0702_, _0700_, _0698_, _0696_ });
  assign _0696_ = | _0695_;
  assign _0695_[0] = { ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 6'h08;
  assign _0695_[1] = { ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 6'h04;
  assign _0698_ = | _0697_;
  assign _0697_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h58;
  assign _0697_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h1c;
  assign _0697_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha8;
  assign _0697_[3] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h2c;
  assign _0700_ = | _0699_;
  assign _0699_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h54;
  assign _0699_[1] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h2a;
  assign _0702_ = | _0701_;
  assign _0701_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha4;
  assign _0701_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h1a;
  assign _0703_ = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h20;
  assign _0704_ = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h08;
  assign _0706_ = | _0705_;
  assign _0705_[0] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h09;
  assign _0705_[1] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h1d;
  assign _0705_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h55;
  assign _0705_[3] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h2b;
  assign _0708_ = | _0707_;
  assign _0707_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h22;
  assign _0707_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h2d;
  assign _0707_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha6;
  assign _0707_[3] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h1b;
  function [0:0] _1838_;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _1838_ = b[0:0];
      6'b????1?:
        _1838_ = b[1:1];
      6'b???1??:
        _1838_ = b[2:2];
      6'b??1???:
        _1838_ = b[3:3];
      6'b?1????:
        _1838_ = b[4:4];
      6'b1?????:
        _1838_ = b[5:5];
      default:
        _1838_ = a;
    endcase
  endfunction
  assign _0709_ = _1838_(cyc_cleared, 6'h02, { _0721_, _0719_, _0717_, _0715_, _0713_, _0711_ });
  assign _0711_ = | _0710_;
  assign _0710_[0] = { ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 6'h08;
  assign _0710_[1] = { ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 6'h04;
  assign _0713_ = | _0712_;
  assign _0712_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h58;
  assign _0712_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h1c;
  assign _0712_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha8;
  assign _0712_[3] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h2c;
  assign _0715_ = | _0714_;
  assign _0714_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h54;
  assign _0714_[1] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h2a;
  assign _0717_ = | _0716_;
  assign _0716_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha4;
  assign _0716_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h1a;
  assign _0719_ = | _0718_;
  assign _0718_[0] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h09;
  assign _0718_[1] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h1d;
  assign _0718_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h55;
  assign _0718_[3] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h2b;
  assign _0721_ = | _0720_;
  assign _0720_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h22;
  assign _0720_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h2d;
  assign _0720_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha6;
  assign _0720_[3] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h1b;
  function [0:0] _1863_;
    input [0:0] a;
    input [6:0] b;
    input [6:0] s;
    casez (s) // synopsys parallel_case
      7'b??????1:
        _1863_ = b[0:0];
      7'b?????1?:
        _1863_ = b[1:1];
      7'b????1??:
        _1863_ = b[2:2];
      7'b???1???:
        _1863_ = b[3:3];
      7'b??1????:
        _1863_ = b[4:4];
      7'b?1?????:
        _1863_ = b[5:5];
      7'b1??????:
        _1863_ = b[6:6];
      default:
        _1863_ = a;
    endcase
  endfunction
  assign _0722_ = _1863_(MasterWbRX, 7'h32, { _0734_, _0732_, _0730_, _0729_, _0728_, _0726_, _0724_ });
  assign _0724_ = | _0723_;
  assign _0723_[0] = { ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 6'h08;
  assign _0723_[1] = { ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 6'h04;
  assign _0726_ = | _0725_;
  assign _0725_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h54;
  assign _0725_[1] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h2a;
  assign _0728_ = | _0727_;
  assign _0727_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha4;
  assign _0727_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h1a;
  assign _0729_ = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h20;
  assign _0730_ = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h08;
  assign _0732_ = | _0731_;
  assign _0731_[0] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h09;
  assign _0731_[1] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h1d;
  assign _0731_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h55;
  assign _0731_[3] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h2b;
  assign _0734_ = | _0733_;
  assign _0733_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h22;
  assign _0733_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h2d;
  assign _0733_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha6;
  assign _0733_[3] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h1b;
  function [0:0] _1885_;
    input [0:0] a;
    input [6:0] b;
    input [6:0] s;
    casez (s) // synopsys parallel_case
      7'b??????1:
        _1885_ = b[0:0];
      7'b?????1?:
        _1885_ = b[1:1];
      7'b????1??:
        _1885_ = b[2:2];
      7'b???1???:
        _1885_ = b[3:3];
      7'b??1????:
        _1885_ = b[4:4];
      7'b?1?????:
        _1885_ = b[5:5];
      7'b1??????:
        _1885_ = b[6:6];
      default:
        _1885_ = a;
    endcase
  endfunction
  assign _0735_ = _1885_(MasterWbTX, 7'h4c, { _0747_, _0745_, _0743_, _0742_, _0741_, _0739_, _0737_ });
  assign _0737_ = | _0736_;
  assign _0736_[0] = { ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 6'h08;
  assign _0736_[1] = { ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 6'h04;
  assign _0739_ = | _0738_;
  assign _0738_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h54;
  assign _0738_[1] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h2a;
  assign _0741_ = | _0740_;
  assign _0740_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha4;
  assign _0740_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h1a;
  assign _0742_ = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h20;
  assign _0743_ = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h08;
  assign _0745_ = | _0744_;
  assign _0744_[0] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h09;
  assign _0744_[1] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h1d;
  assign _0744_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h55;
  assign _0744_[3] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h2b;
  assign _0747_ = | _0746_;
  assign _0746_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h22;
  assign _0746_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h2d;
  assign _0746_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha6;
  assign _0746_[3] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h1b;
  function [2:0] _1907_;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _1907_ = b[2:0];
      3'b?1?:
        _1907_ = b[5:3];
      3'b1??:
        _1907_ = b[8:6];
      default:
        _1907_ = a;
    endcase
  endfunction
  assign _0748_ = _1907_(rx_burst_cnt, { _0154_, 6'h00 }, { _0754_, _0752_, _0750_ });
  assign _0750_ = | _0749_;
  assign _0749_[0] = { ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 6'h08;
  assign _0749_[1] = { ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 6'h04;
  assign _0752_ = | _0751_;
  assign _0751_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h58;
  assign _0751_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h1c;
  assign _0751_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha8;
  assign _0751_[3] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h2c;
  assign _0754_ = | _0753_;
  assign _0753_[0] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h09;
  assign _0753_[1] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h1d;
  assign _0753_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h55;
  assign _0753_[3] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h2b;
  function [2:0] _1921_;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _1921_ = b[2:0];
      3'b?1?:
        _1921_ = b[5:3];
      3'b1??:
        _1921_ = b[8:6];
      default:
        _1921_ = a;
    endcase
  endfunction
  assign _0755_ = _1921_(tx_burst_cnt, { _0152_, 6'h00 }, { _0760_, _0758_, _0756_ });
  assign _0756_ = ! { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst };
  assign _0758_ = | _0757_;
  assign _0757_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h58;
  assign _0757_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h1c;
  assign _0757_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha8;
  assign _0757_[3] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h2c;
  assign _0760_ = | _0759_;
  assign _0759_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h22;
  assign _0759_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h2d;
  assign _0759_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha6;
  assign _0759_[3] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h1b;
  function [0:0] _1933_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _1933_ = b[0:0];
      3'b?1?:
        _1933_ = b[1:1];
      3'b1??:
        _1933_ = b[2:2];
      default:
        _1933_ = a;
    endcase
  endfunction
  assign _0761_ = _1933_(rx_burst_en, { _0766_, _1162_, _1163_ }, { _0769_, _0765_, _0763_ });
  assign _0763_ = | _0762_;
  assign _0762_[0] = { ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 6'h08;
  assign _0762_[1] = { ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 6'h04;
  assign _0765_ = | _0764_;
  assign _0764_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h58;
  assign _0764_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h1c;
  assign _0764_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha8;
  assign _0764_[3] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h2c;
  assign _0766_ = _0784_ ? 1'h0 : rx_burst_en;
  assign _0769_ = | _0768_;
  assign _0768_[0] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h09;
  assign _0768_[1] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h1d;
  assign _0768_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h55;
  assign _0768_[3] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h2b;
  function [0:0] _1948_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _1948_ = b[0:0];
      3'b?1?:
        _1948_ = b[1:1];
      3'b1??:
        _1948_ = b[2:2];
      default:
        _1948_ = a;
    endcase
  endfunction
  assign _0770_ = _1948_(tx_burst_en, { _0774_, _0179_, _0180_ }, { _0777_, _0773_, _0771_ });
  assign _0771_ = ! { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst };
  assign _0773_ = | _0772_;
  assign _0772_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h58;
  assign _0772_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h1c;
  assign _0772_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha8;
  assign _0772_[3] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h2c;
  assign _0774_ = _0788_ ? 1'h0 : tx_burst_en;
  assign _0777_ = | _0776_;
  assign _0776_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h22;
  assign _0776_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h2d;
  assign _0776_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha6;
  assign _0776_[3] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h1b;
  function [2:0] _1961_;
    input [2:0] a;
    input [11:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _1961_ = b[2:0];
      4'b??1?:
        _1961_ = b[5:3];
      4'b?1??:
        _1961_ = b[8:6];
      4'b1???:
        _1961_ = b[11:9];
      default:
        _1961_ = a;
    endcase
  endfunction
  assign _0778_ = _1961_(m_wb_cti_o, { _0787_, _0783_, 6'h00 }, { _0790_, _0786_, _0782_, _0780_ });
  assign _0780_ = | _0779_;
  assign _0779_[0] = { ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 6'h08;
  assign _0779_[1] = { ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 6'h04;
  assign _0782_ = | _0781_;
  assign _0781_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h58;
  assign _0781_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h1c;
  assign _0781_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha8;
  assign _0781_[3] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h2c;
  assign _0783_ = _0784_ ? 3'h7 : 3'h2;
  assign _0786_ = | _0785_;
  assign _0785_[0] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h09;
  assign _0785_[1] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h1d;
  assign _0785_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h55;
  assign _0785_[3] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h2b;
  assign _0787_ = _0788_ ? 3'h7 : 3'h2;
  assign _0790_ = | _0789_;
  assign _0789_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h22;
  assign _0789_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h2d;
  assign _0789_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha6;
  assign _0789_[3] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h1b;
  function [0:0] _1982_;
    input [0:0] a;
    input [7:0] b;
    input [7:0] s;
    casez (s) // synopsys parallel_case
      8'b???????1:
        _1982_ = b[0:0];
      8'b??????1?:
        _1982_ = b[1:1];
      8'b?????1??:
        _1982_ = b[2:2];
      8'b????1???:
        _1982_ = b[3:3];
      8'b???1????:
        _1982_ = b[4:4];
      8'b??1?????:
        _1982_ = b[5:5];
      8'b?1??????:
        _1982_ = b[6:6];
      8'b1???????:
        _1982_ = b[7:7];
      default:
        _1982_ = a;
    endcase
  endfunction
  assign _0791_ = _1982_(m_wb_cyc_o, 8'hfc, { _0805_, _0803_, _0801_, _0800_, _0799_, _0797_, _0795_, _0793_ });
  assign _0793_ = | _0792_;
  assign _0792_[0] = { ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 6'h08;
  assign _0792_[1] = { ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 6'h04;
  assign _0795_ = | _0794_;
  assign _0794_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h58;
  assign _0794_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h1c;
  assign _0794_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha8;
  assign _0794_[3] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h2c;
  assign _0797_ = | _0796_;
  assign _0796_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h54;
  assign _0796_[1] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h2a;
  assign _0799_ = | _0798_;
  assign _0798_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha4;
  assign _0798_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h1a;
  assign _0800_ = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h20;
  assign _0801_ = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h08;
  assign _0803_ = | _0802_;
  assign _0802_[0] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h09;
  assign _0802_[1] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h1d;
  assign _0802_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h55;
  assign _0802_[3] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h2b;
  assign _0805_ = | _0804_;
  assign _0804_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h22;
  assign _0804_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h2d;
  assign _0804_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha6;
  assign _0804_[3] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h1b;
  function [0:0] _2009_;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _2009_ = b[0:0];
      6'b????1?:
        _2009_ = b[1:1];
      6'b???1??:
        _2009_ = b[2:2];
      6'b??1???:
        _2009_ = b[3:3];
      6'b?1????:
        _2009_ = b[4:4];
      6'b1?????:
        _2009_ = b[5:5];
      default:
        _2009_ = a;
    endcase
  endfunction
  assign _0806_ = _2009_(m_wb_we_o, 6'h19, { _0816_, _0814_, _0812_, _0811_, _0810_, _0808_ });
  assign _0808_ = | _0807_;
  assign _0807_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h54;
  assign _0807_[1] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h2a;
  assign _0810_ = | _0809_;
  assign _0809_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha4;
  assign _0809_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h1a;
  assign _0811_ = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h20;
  assign _0812_ = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h08;
  assign _0814_ = | _0813_;
  assign _0813_[0] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h09;
  assign _0813_[1] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h1d;
  assign _0813_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h55;
  assign _0813_[3] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h2b;
  assign _0816_ = | _0815_;
  assign _0815_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h22;
  assign _0815_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h2d;
  assign _0815_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha6;
  assign _0815_[3] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h1b;
  function [3:0] _2028_;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _2028_ = b[3:0];
      6'b????1?:
        _2028_ = b[7:4];
      6'b???1??:
        _2028_ = b[11:8];
      6'b??1???:
        _2028_ = b[15:12];
      6'b?1????:
        _2028_ = b[19:16];
      6'b1?????:
        _2028_ = b[23:20];
      default:
        _2028_ = a;
    endcase
  endfunction
  assign _0817_ = _2028_(m_wb_sel_o, { 4'hf, RxByteSel, RxByteSel, 8'hff, RxByteSel }, { _0827_, _0825_, _0823_, _0822_, _0821_, _0819_ });
  assign _0819_ = | _0818_;
  assign _0818_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h54;
  assign _0818_[1] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h2a;
  assign _0821_ = | _0820_;
  assign _0820_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha4;
  assign _0820_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h1a;
  assign _0822_ = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h20;
  assign _0823_ = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h08;
  assign _0825_ = | _0824_;
  assign _0824_[0] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h09;
  assign _0824_[1] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h1d;
  assign _0824_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h55;
  assign _0824_[3] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h2b;
  assign _0827_ = | _0826_;
  assign _0826_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h22;
  assign _0826_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h2d;
  assign _0826_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha6;
  assign _0826_[3] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h1b;
  function [29:0] _2047_;
    input [29:0] a;
    input [179:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _2047_ = b[29:0];
      6'b????1?:
        _2047_ = b[59:30];
      6'b???1??:
        _2047_ = b[89:60];
      6'b??1???:
        _2047_ = b[119:90];
      6'b?1????:
        _2047_ = b[149:120];
      6'b1?????:
        _2047_ = b[179:150];
      default:
        _2047_ = a;
    endcase
  endfunction
  assign _0828_ = _2047_(m_wb_adr_o, { _0839_, _0835_, RxPointerMSB, TxPointerMSB, TxPointerMSB, RxPointerMSB }, { _0842_, _0838_, _0834_, _0833_, _0832_, _0830_ });
  assign _0830_ = | _0829_;
  assign _0829_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h54;
  assign _0829_[1] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h2a;
  assign _0832_ = | _0831_;
  assign _0831_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha4;
  assign _0831_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h1a;
  assign _0833_ = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h20;
  assign _0834_ = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h08;
  assign _0835_ = _0836_ ? RxPointerMSB : _0155_;
  assign _0838_ = | _0837_;
  assign _0837_[0] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h09;
  assign _0837_[1] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h1d;
  assign _0837_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h55;
  assign _0837_[3] = { MasterWbTX, MasterWbRX, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, rx_burst } == 6'h2b;
  assign _0839_ = _0840_ ? TxPointerMSB : _0153_;
  assign _0842_ = | _0841_;
  assign _0841_[0] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'h22;
  assign _0841_[1] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h2d;
  assign _0841_[2] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, WriteRxDataToMemory, MasterAccessFinished, cyc_cleared, tx_burst, rx_burst } == 8'ha6;
  assign _0841_[3] = { MasterWbTX, MasterWbRX, ReadTxDataFromMemory_2, MasterAccessFinished, cyc_cleared, tx_burst } == 6'h1b;
  assign _0843_ = _0844_ ? 1'h0 : BlockReadTxDataFromMemory;
  assign _0845_ = _0846_ ? 1'h1 : _0843_;
  assign _0847_ = SetReadTxDataFromMemory ? 1'h1 : ReadTxDataFromMemory;
  assign _0849_ = _0850_ ? 1'h0 : _0847_;
  assign _0851_ = IncrTxPointer ? 1'h1 : BlockingIncrementTxPointer;
  assign _0853_ = MasterAccessFinished ? 1'h0 : _0851_;
  assign _0855_ = _0856_ ? 2'h0 : TxPointerLSB_rst;
  assign _0857_ = _0858_ ? WB_DAT_O[1:0] : _0855_;
  assign _0859_ = _0860_ ? WB_DAT_O[1:0] : TxPointerLSB;
  assign _0861_ = _0862_ ? _0151_ : TxPointerMSB;
  assign _0863_ = _0864_ ? WB_DAT_O[31:2] : _0861_;
  assign _0865_ = _0866_ ? WB_DAT_O[31:16] : TxBDDataIn[31:16];
  assign _0867_ = _0868_ ? _1161_ : TxLength;
  assign _0869_ = _0870_ ? _1160_ : _0867_;
  assign _0871_ = _0872_ ? _1159_ : _0869_;
  assign _0873_ = _0874_ ? _1158_ : _0871_;
  assign _0875_ = TxLengthLt4 ? 16'h0000 : _0873_;
  assign _0877_ = _0878_ ? _0875_ : TxLength;
  assign _0879_ = _0880_ ? WB_DAT_O[31:16] : _0877_;
  assign _0881_ = _0882_ ? WB_DAT_O[14:11] : { TxStatus[14], WrapTxStatusBit, PerPacketPad, PerPacketCrcEn };
  assign _0883_ = _0884_ ? 1'h0 : BlockingTxBDRead;
  assign _0885_ = StartTxBDRead ? 1'h1 : _0883_;
  assign _0887_ = TxStatusWrite ? 1'h1 : BlockingTxStatusWrite;
  assign _0889_ = _0890_ ? 1'h0 : _0887_;
  assign _0891_ = TxEn_q ? 1'h0 : TxPointerRead;
  assign _0893_ = StartTxPointerRead ? 1'h1 : _0891_;
  assign _0895_ = TxBDReady ? 1'h0 : TxBDRead;
  assign _0897_ = StartTxBDRead ? 1'h1 : _0895_;
  assign _0899_ = ResetTxBDReady ? 1'h0 : TxBDReady;
  assign _0901_ = _0902_ ? _0381_ : _0899_;
  assign _0903_ = TxUsedData ? _0511_ : Flop;
  assign _0905_ = _0906_ ? 1'h0 : _0903_;
  function [31:0] _2100_;
    input [31:0] a;
    input [191:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _2100_ = b[31:0];
      6'b????1?:
        _2100_ = b[63:32];
      6'b???1??:
        _2100_ = b[95:64];
      6'b??1???:
        _2100_ = b[127:96];
      6'b?1????:
        _2100_ = b[159:128];
      6'b1?????:
        _2100_ = b[191:160];
      default:
        _2100_ = a;
    endcase
  endfunction
  assign _0907_ = _2100_(ram_di, { RxBDDataIn[31:16], 1'h0, RxStatus[14], WrapRxStatusBit, 4'h0, RxStatusInLatched, TxBDDataIn[31:16], 1'h0, TxStatus[14], WrapTxStatusBit, PerPacketPad, PerPacketCrcEn, 2'h0, TxUnderRun, RetryCntLatched, RetryLimit, LateCollLatched, DeferLatched, CarrierSenseLost, WB_DAT_I, TxBDDataIn[31:16], 1'h0, TxStatus[14], WrapTxStatusBit, PerPacketPad, PerPacketCrcEn, 2'h0, TxUnderRun, RetryCntLatched, RetryLimit, LateCollLatched, DeferLatched, CarrierSenseLost, WB_DAT_I, WB_DAT_I }, { _0917_, _0915_, _0914_, _0912_, _0910_, _0908_ });
  assign _0908_ = ! { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed };
  assign _0910_ = | _0909_;
  assign _0909_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h04;
  assign _0909_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h05;
  assign _0909_[2] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h06;
  assign _0909_[3] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h07;
  assign _0912_ = | _0911_;
  assign _0911_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h09;
  assign _0911_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h0b;
  assign _0914_ = | _0913_;
  assign _0913_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h08;
  assign _0913_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h0a;
  assign _0915_ = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h11;
  assign _0917_ = | _0916_;
  assign _0916_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h12;
  assign _0916_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h13;
  function [7:0] _2117_;
    input [7:0] a;
    input [47:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _2117_ = b[7:0];
      6'b????1?:
        _2117_ = b[15:8];
      6'b???1??:
        _2117_ = b[23:16];
      6'b??1???:
        _2117_ = b[31:24];
      6'b?1????:
        _2117_ = b[39:32];
      6'b1?????:
        _2117_ = b[47:40];
      default:
        _2117_ = a;
    endcase
  endfunction
  assign _0918_ = _2117_(ram_addr, { RxBDAddress, RxPointerRead, TxBDAddress, TxPointerRead, WB_ADR_I, TxBDAddress, TxPointerRead, WB_ADR_I, WB_ADR_I }, { _0928_, _0926_, _0925_, _0923_, _0921_, _0919_ });
  assign _0919_ = ! { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed };
  assign _0921_ = | _0920_;
  assign _0920_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h04;
  assign _0920_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h05;
  assign _0920_[2] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h06;
  assign _0920_[3] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h07;
  assign _0923_ = | _0922_;
  assign _0922_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h09;
  assign _0922_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h0b;
  assign _0925_ = | _0924_;
  assign _0924_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h08;
  assign _0924_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h0a;
  assign _0926_ = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h11;
  assign _0928_ = | _0927_;
  assign _0927_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h12;
  assign _0927_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h13;
  function [0:0] _2134_;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _2134_ = b[0:0];
      6'b????1?:
        _2134_ = b[1:1];
      6'b???1??:
        _2134_ = b[2:2];
      6'b??1???:
        _2134_ = b[3:3];
      6'b?1????:
        _2134_ = b[4:4];
      6'b1?????:
        _2134_ = b[5:5];
      default:
        _2134_ = a;
    endcase
  endfunction
  assign _0929_ = _2134_(TxEn, 6'h14, { _0939_, _0937_, _0936_, _0934_, _0932_, _0930_ });
  assign _0930_ = ! { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed };
  assign _0932_ = | _0931_;
  assign _0931_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h04;
  assign _0931_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h05;
  assign _0931_[2] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h06;
  assign _0931_[3] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h07;
  assign _0934_ = | _0933_;
  assign _0933_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h09;
  assign _0933_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h0b;
  assign _0936_ = | _0935_;
  assign _0935_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h08;
  assign _0935_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h0a;
  assign _0937_ = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h11;
  assign _0939_ = | _0938_;
  assign _0938_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h12;
  assign _0938_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h13;
  function [0:0] _2151_;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _2151_ = b[0:0];
      6'b????1?:
        _2151_ = b[1:1];
      6'b???1??:
        _2151_ = b[2:2];
      6'b??1???:
        _2151_ = b[3:3];
      6'b?1????:
        _2151_ = b[4:4];
      6'b1?????:
        _2151_ = b[5:5];
      default:
        _2151_ = a;
    endcase
  endfunction
  assign _0940_ = _2151_(RxEn, 6'h20, { _0950_, _0948_, _0947_, _0945_, _0943_, _0941_ });
  assign _0941_ = ! { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed };
  assign _0943_ = | _0942_;
  assign _0942_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h04;
  assign _0942_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h05;
  assign _0942_[2] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h06;
  assign _0942_[3] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h07;
  assign _0945_ = | _0944_;
  assign _0944_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h09;
  assign _0944_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h0b;
  assign _0947_ = | _0946_;
  assign _0946_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h08;
  assign _0946_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h0a;
  assign _0948_ = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h11;
  assign _0950_ = | _0949_;
  assign _0949_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h12;
  assign _0949_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h13;
  function [0:0] _2168_;
    input [0:0] a;
    input [6:0] b;
    input [6:0] s;
    casez (s) // synopsys parallel_case
      7'b??????1:
        _2168_ = b[0:0];
      7'b?????1?:
        _2168_ = b[1:1];
      7'b????1??:
        _2168_ = b[2:2];
      7'b???1???:
        _2168_ = b[3:3];
      7'b??1????:
        _2168_ = b[4:4];
      7'b?1?????:
        _2168_ = b[5:5];
      7'b1??????:
        _2168_ = b[6:6];
      default:
        _2168_ = a;
    endcase
  endfunction
  assign _0951_ = _2168_(WbEn, 7'h15, { _0962_, _0960_, _0959_, _0957_, _0955_, _0953_, _0952_ });
  assign _0952_ = ! { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed };
  assign _0953_ = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h10;
  assign _0955_ = | _0954_;
  assign _0954_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h04;
  assign _0954_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h05;
  assign _0954_[2] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h06;
  assign _0954_[3] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h07;
  assign _0957_ = | _0956_;
  assign _0956_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h09;
  assign _0956_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h0b;
  assign _0959_ = | _0958_;
  assign _0958_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h08;
  assign _0958_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h0a;
  assign _0960_ = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h11;
  assign _0962_ = | _0961_;
  assign _0961_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h12;
  assign _0961_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h13;
  function [0:0] _2186_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _2186_ = b[0:0];
      3'b?1?:
        _2186_ = b[1:1];
      3'b1??:
        _2186_ = b[2:2];
      default:
        _2186_ = a;
    endcase
  endfunction
  assign _0963_ = _2186_(BDRead, { _0374_, _0376_, _0378_ }, { _0968_, _0966_, _0964_ });
  assign _0964_ = ! { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed };
  assign _0966_ = | _0965_;
  assign _0965_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h04;
  assign _0965_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h05;
  assign _0965_[2] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h06;
  assign _0965_[3] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h07;
  assign _0968_ = | _0967_;
  assign _0967_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h08;
  assign _0967_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h0a;
  function [3:0] _2196_;
    input [3:0] a;
    input [11:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _2196_ = b[3:0];
      3'b?1?:
        _2196_ = b[7:4];
      3'b1??:
        _2196_ = b[11:8];
      default:
        _2196_ = a;
    endcase
  endfunction
  assign _0969_ = _2196_(BDWrite, { _0373_, _0375_, _0377_ }, { _0974_, _0972_, _0970_ });
  assign _0970_ = ! { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed };
  assign _0972_ = | _0971_;
  assign _0971_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h04;
  assign _0971_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h05;
  assign _0971_[2] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h06;
  assign _0971_[3] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h07;
  assign _0974_ = | _0973_;
  assign _0973_[0] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h08;
  assign _0973_[1] = { WbEn_q, RxEn_q, TxEn_q, RxEn_needed, TxEn_needed } == 5'h0a;
  assign _0975_ = _0976_ ? 1'h0 : TxEn_needed;
  assign _0977_ = _0978_ ? 1'h1 : _0975_;
  assign _0979_ = Busy_IRQ_syncb2 ? 1'h0 : Busy_IRQ_rck;
  assign _0981_ = _0982_ ? 1'h1 : _0979_;
  assign _0983_ = _0984_ ? RxError : 1'h0;
  assign _0985_ = _0986_ ? _0500_ : 1'h0;
  assign _0987_ = _0988_ ? TxError : 1'h0;
  assign _0989_ = _0990_ ? _0497_ : 1'h0;
  assign _0991_ = RxStatusWrite ? 1'h1 : RxStatusWriteLatched;
  assign _0993_ = RxStatusWriteLatched_syncb2 ? 1'h0 : _0991_;
  assign _0995_ = _0996_ ? 1'h1 : RxStatusIn[6];
  assign _0997_ = RxStatusWrite ? 1'h0 : _0995_;
  assign _0999_ = LoadRxStatus ? { ReceivedPauseFrm, AddressMiss, RxStatusIn[6], InvalidSymbol, DribbleNibble, ReceivedPacketTooBig, ShortFrame, LatchedCrcError, RxLateCollision } : RxStatusInLatched;
  assign _1001_ = LoadRxStatus ? RxLength : RxBDDataIn[31:16];
  assign _1003_ = RxAbort ? 1'h1 : RxAbortLatched;
  assign _1005_ = RxAbortSyncb2 ? 1'h0 : _1003_;
  assign _1007_ = _1008_ ? 1'h0 : RxEnableWindow;
  assign _1009_ = RxStartFrm ? 1'h1 : _1007_;
  assign _1011_ = RxStatusWrite ? 1'h0 : ShiftEnded;
  assign _1013_ = _1014_ ? 1'h1 : _1011_;
  assign _1015_ = ShiftEnded ? 1'h0 : ShiftEndedSync3;
  assign _1017_ = _1018_ ? 1'h1 : _1015_;
  assign _1019_ = _1020_ ? 1'h0 : ShiftEnded_rck;
  assign _1021_ = _1022_ ? 1'h1 : _1019_;
  assign _1023_ = LatchedRxStartFrm ? 1'h1 : 1'h0;
  assign _1025_ = SyncRxStartFrm_q ? 1'h0 : LatchedRxStartFrm;
  assign _1027_ = _1028_ ? 1'h1 : _1025_;
  assign _1029_ = WriteRxDataToFifo ? 1'h1 : 1'h0;
  assign _1031_ = _1032_ ? 1'h0 : WriteRxDataToFifo;
  assign _1033_ = _1034_ ? 1'h1 : _1031_;
  function [31:0] _2236_;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _2236_ = b[31:0];
      4'b??1?:
        _2236_ = b[63:32];
      4'b?1??:
        _2236_ = b[95:64];
      4'b1???:
        _2236_ = b[127:96];
      default:
        _2236_ = a;
    endcase
  endfunction
  assign _1035_ = _2236_(32'hxxxxxxxx, { RxDataLatched1, RxData, RxDataLatched1[31:24], 24'h000000, RxDataLatched1[31:16], 16'h0000, RxDataLatched1, 8'h00 }, { _1039_, _1038_, _1037_, _1036_ });
  assign _1036_ = RxValidBytes == 2'h3;
  assign _1037_ = RxValidBytes == 2'h2;
  assign _1038_ = RxValidBytes == 2'h1;
  assign _1039_ = ! RxValidBytes;
  assign _1040_ = _1041_ ? _1035_ : RxDataLatched2;
  assign _1042_ = _1043_ ? { RxDataLatched1, RxData } : _1040_;
  assign _1044_ = _1045_ ? RxData : RxDataLatched1[31:24];
  assign _1045_ = ! RxByteCnt;
  assign _1046_ = RxEnableWindow ? _1044_ : RxDataLatched1[31:24];
  assign _1048_ = _1049_ ? RxData : RxDataLatched1[31:24];
  assign _1049_ = ! RxPointerLSB_rst;
  assign _1050_ = RxStartFrm ? _1048_ : _1046_;
  assign _1052_ = _1073_ ? _1050_ : RxDataLatched1[31:24];
  assign _1054_ = _1055_ ? RxData : RxDataLatched1[23:16];
  assign _1055_ = RxByteCnt == 2'h1;
  assign _1056_ = RxEnableWindow ? _1054_ : RxDataLatched1[23:16];
  assign _1058_ = _1059_ ? RxData : RxDataLatched1[23:16];
  assign _1059_ = RxPointerLSB_rst == 2'h1;
  assign _1060_ = RxStartFrm ? _1058_ : _1056_;
  assign _1062_ = _1073_ ? _1060_ : RxDataLatched1[23:16];
  assign _1064_ = _1065_ ? RxData : RxDataLatched1[15:8];
  assign _1065_ = RxByteCnt == 2'h2;
  assign _1066_ = RxEnableWindow ? _1064_ : RxDataLatched1[15:8];
  assign _1068_ = _1069_ ? RxData : RxDataLatched1[15:8];
  assign _1069_ = RxPointerLSB_rst == 2'h2;
  assign _1070_ = RxStartFrm ? _1068_ : _1066_;
  assign _1072_ = _1073_ ? _1070_ : RxDataLatched1[15:8];
  assign _1074_ = _1075_ ? _0161_ : RxValidBytes;
  function [1:0] _2265_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _2265_ = b[1:0];
      4'b??1?:
        _2265_ = b[3:2];
      4'b?1??:
        _2265_ = b[5:4];
      4'b1???:
        _2265_ = b[7:6];
      default:
        _2265_ = a;
    endcase
  endfunction
  assign _1076_ = _2265_(2'hx, 8'h6c, { _1080_, _1079_, _1078_, _1077_ });
  assign _1077_ = RxPointerLSB_rst == 2'h3;
  assign _1078_ = RxPointerLSB_rst == 2'h2;
  assign _1079_ = RxPointerLSB_rst == 2'h1;
  assign _1080_ = ! RxPointerLSB_rst;
  assign _1081_ = _1082_ ? _1076_ : _1074_;
  assign _1083_ = _1084_ ? _0160_ : RxByteCnt;
  function [1:0] _2272_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _2272_ = b[1:0];
      4'b??1?:
        _2272_ = b[3:2];
      4'b?1??:
        _2272_ = b[5:4];
      4'b1???:
        _2272_ = b[7:6];
      default:
        _2272_ = a;
    endcase
  endfunction
  assign _1085_ = _2272_(2'hx, 8'h6c, { _1089_, _1088_, _1087_, _1086_ });
  assign _1086_ = RxPointerLSB_rst == 2'h3;
  assign _1087_ = RxPointerLSB_rst == 2'h2;
  assign _1088_ = RxPointerLSB_rst == 2'h1;
  assign _1089_ = ! RxPointerLSB_rst;
  assign _1090_ = _1091_ ? _1085_ : _1083_;
  assign _1092_ = _1093_ ? 2'h0 : _1090_;
  assign _1094_ = StartShiftWillEnd ? 1'h1 : ShiftWillEnd;
  assign _1096_ = _1097_ ? 1'h0 : _1094_;
  assign _1098_ = _1099_ ? 1'h1 : LastByteIn;
  assign _1100_ = _1101_ ? 1'h0 : _1098_;
  assign _1102_ = _1103_ ? 1'h0 : RxEn_needed;
  assign _1104_ = _1105_ ? 1'h1 : _1102_;
  function [3:0] _2285_;
    input [3:0] a;
    input [15:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _2285_ = b[3:0];
      4'b??1?:
        _2285_ = b[7:4];
      4'b?1??:
        _2285_ = b[11:8];
      4'b1???:
        _2285_ = b[15:12];
      default:
        _2285_ = a;
    endcase
  endfunction
  assign RxByteSel = _2285_(4'hx, 16'hf731, { _1110_, _1109_, _1108_, _1107_ });
  assign _1107_ = RxPointerLSB_rst == 2'h3;
  assign _1108_ = RxPointerLSB_rst == 2'h2;
  assign _1109_ = RxPointerLSB_rst == 2'h1;
  assign _1110_ = ! RxPointerLSB_rst;
  assign _1111_ = _1112_ ? WB_DAT_O[1:0] : RxPointerLSB_rst;
  assign _1113_ = _1114_ ? 2'h0 : _1111_;
  assign _1115_ = _1116_ ? _0159_ : RxPointerMSB;
  assign _1117_ = _1118_ ? WB_DAT_O[31:2] : _1115_;
  assign _1119_ = _1120_ ? 1'h0 : RxPointerRead;
  assign _1121_ = StartRxPointerRead ? 1'h1 : _1119_;
  assign _1123_ = _1124_ ? 1'h1 : RxReady;
  assign _1125_ = _1126_ ? 1'h0 : _1123_;
  assign _1127_ = _1128_ ? WB_DAT_O[14:13] : { RxStatus[14], WrapRxStatusBit };
  assign _1129_ = _1130_ ? WB_DAT_O[15] : RxBDReady;
  assign _1131_ = RxPointerRead ? 1'h0 : _1129_;
  assign _1133_ = RxBDReady ? 1'h0 : RxBDRead;
  assign _1135_ = _1136_ ? 1'h1 : _1133_;
  assign _1137_ = _1138_ ? 1'h0 : ReadTxDataFromFifo_tck;
  assign _1139_ = _1140_ ? 1'h1 : _1137_;
  assign _1141_ = _1142_ ? _0158_ : TxByteCnt;
  function [1:0] _2306_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _2306_ = b[1:0];
      4'b??1?:
        _2306_ = b[3:2];
      4'b?1??:
        _2306_ = b[5:4];
      4'b1???:
        _2306_ = b[7:6];
      default:
        _2306_ = a;
    endcase
  endfunction
  assign _1143_ = _2306_(2'hx, 8'h6c, { _0586_, _0585_, _1145_, _1144_ });
  assign _1144_ = TxPointerLSB == 2'h3;
  assign _1145_ = TxPointerLSB == 2'h2;
  assign _1146_ = & RxByteCnt;
  assign _1147_ = & RxByteCnt;
  assign _1148_ = & RxByteCnt;
  assign _1149_ = & RxByteCnt;
  assign _1150_ = & RxPointerLSB_rst;
  assign _1151_ = & RxByteCnt;
  assign _1152_ = | RxStatusInLatched[6:3];
  assign _1153_ = | RxStatusInLatched[1:0];
  assign _1154_ = | BDWrite;
  assign _1155_ = | BDCs;
  assign _1156_ = | BDCs;
  assign _1157_ = | BDCs;
  assign _1158_ = TxLength - 16'h0004;
  assign _1159_ = TxLength - 16'h0003;
  assign _1160_ = TxLength - 16'h0002;
  assign _1161_ = TxLength - 16'h0001;
  assign _1162_ = MasterWbRX ? enough_data_in_rxfifo_for_burst_plus1 : enough_data_in_rxfifo_for_burst;
  assign _1163_ = MasterWbRX ? enough_data_in_rxfifo_for_burst_plus1 : enough_data_in_rxfifo_for_burst;
  assign TxValidBytes = TxLengthLt4 ? TxLength[1:0] : 2'h0;
  eth_spram_256x32 bd_ram (
    .addr(ram_addr),
    .ce(1'h1),
    .clk(WB_CLK_I),
    .dato(WB_DAT_O),
    .di(ram_di),
    .oe(ram_oe),
    .rst(Reset),
    .we(ram_we)
  );
  \$paramod$0c2657bd5c5455bdd610d1f801789b00c2352910\eth_fifo  rx_fifo (
    .almost_empty(RxBufferAlmostEmpty),
    .clear(RxFifoReset),
    .clk(WB_CLK_I),
    .cnt(rxfifo_cnt),
    .data_in(RxDataLatched2),
    .data_out(m_wb_dat_o),
    .empty(RxBufferEmpty),
    .full(RxBufferFull),
    .read(_0331_),
    .reset(Reset),
    .write(_0330_)
  );
  \$paramod$0c2657bd5c5455bdd610d1f801789b00c2352910\eth_fifo  tx_fifo (
    .almost_empty(TxBufferAlmostEmpty),
    .almost_full(TxBufferAlmostFull),
    .clear(TxFifoClear),
    .clk(WB_CLK_I),
    .cnt(txfifo_cnt),
    .data_in(m_wb_dat_i),
    .data_out(TxData_wb),
    .empty(TxBufferEmpty),
    .full(TxBufferFull),
    .read(_0182_),
    .reset(Reset),
    .write(_0181_)
  );
  assign _0000_ = _0963_;
  assign _0001_[3] = _0969_[3];
  assign _0001_[2] = _0969_[2];
  assign _0001_[1] = _0969_[1];
  assign _0001_[0] = _0969_[0];
  assign _0002_ = _0845_;
  assign _0003_ = _0853_;
  assign _0004_ = _0885_;
  assign _0005_ = _0889_;
  assign _0006_ = BlockingTxStatusWrite;
  assign _0007_ = BlockingTxStatusWrite_sync1;
  assign _0008_ = BlockingTxStatusWrite_sync2;
  assign _0009_ = _0981_;
  assign _0010_ = Busy_IRQ_rck;
  assign _0011_ = Busy_IRQ_sync1;
  assign _0012_ = Busy_IRQ_sync2;
  assign _0013_ = Busy_IRQ_sync2;
  assign _0014_ = Busy_IRQ_syncb1;
  assign _0015_ = _0905_;
  assign _0016_ = _0694_;
  assign _0017_ = _1100_;
  assign _0018_ = _0632_;
  assign _0019_ = _0676_;
  assign _0020_ = LatchValidBytes;
  assign _0021_[15] = _1001_[15];
  assign _0021_[14] = _1001_[14];
  assign _0021_[13] = _1001_[13];
  assign _0021_[12] = _1001_[12];
  assign _0021_[11] = _1001_[11];
  assign _0021_[10] = _1001_[10];
  assign _0021_[9] = _1001_[9];
  assign _0021_[8] = _1001_[8];
  assign _0021_[7] = _1001_[7];
  assign _0021_[6] = _1001_[6];
  assign _0021_[5] = _1001_[5];
  assign _0021_[4] = _1001_[4];
  assign _0021_[3] = _1001_[3];
  assign _0021_[2] = _1001_[2];
  assign _0021_[1] = _1001_[1];
  assign _0021_[0] = _1001_[0];
  assign _0022_ = _1027_;
  assign _0023_[15] = _0865_[15];
  assign _0023_[14] = _0865_[14];
  assign _0023_[13] = _0865_[13];
  assign _0023_[12] = _0865_[12];
  assign _0023_[11] = _0865_[11];
  assign _0023_[10] = _0865_[10];
  assign _0023_[9] = _0865_[9];
  assign _0023_[8] = _0865_[8];
  assign _0023_[7] = _0865_[7];
  assign _0023_[6] = _0865_[6];
  assign _0023_[5] = _0865_[5];
  assign _0023_[4] = _0865_[4];
  assign _0023_[3] = _0865_[3];
  assign _0023_[2] = _0865_[2];
  assign _0023_[1] = _0865_[1];
  assign _0023_[0] = _0865_[0];
  assign _0024_ = _0722_;
  assign _0025_ = _0735_;
  assign _0026_ = ReadTxDataFromFifo_tck;
  assign _0027_ = ReadTxDataFromFifo_sync1;
  assign _0028_ = ReadTxDataFromFifo_sync2;
  assign _0029_ = ReadTxDataFromFifo_sync2;
  assign _0030_ = ReadTxDataFromFifo_syncb1;
  assign _0031_ = ReadTxDataFromFifo_syncb2;
  assign _0032_ = _1139_;
  assign _0033_ = _0849_;
  assign _0034_ = _1005_;
  assign _0035_ = RxAbortLatched;
  assign _0036_ = RxAbortSync1;
  assign _0037_ = RxAbortSync2;
  assign _0038_ = RxAbortSync3;
  assign _0039_ = RxAbortSync2;
  assign _0040_ = RxAbortSyncb1;
  assign _0041_[6] = _0666_[6];
  assign _0041_[5] = _0666_[5];
  assign _0041_[4] = _0666_[4];
  assign _0041_[3] = _0666_[3];
  assign _0041_[2] = _0666_[2];
  assign _0041_[1] = _0666_[1];
  assign _0041_[0] = _0666_[0];
  assign _0042_ = _1135_;
  assign _0043_ = _1131_;
  assign _0044_ = _0985_;
  assign _0045_[1] = _1092_[1];
  assign _0045_[0] = _1092_[0];
  assign _0046_[3] = RxByteSel[3];
  assign _0046_[2] = RxByteSel[2];
  assign _0046_[1] = RxByteSel[1];
  assign _0046_[0] = RxByteSel[0];
  assign _0047_[23] = _1052_[7];
  assign _0047_[22] = _1052_[6];
  assign _0047_[21] = _1052_[5];
  assign _0047_[20] = _1052_[4];
  assign _0047_[19] = _1052_[3];
  assign _0047_[18] = _1052_[2];
  assign _0047_[17] = _1052_[1];
  assign _0047_[16] = _1052_[0];
  assign _0047_[15] = _1062_[7];
  assign _0047_[14] = _1062_[6];
  assign _0047_[13] = _1062_[5];
  assign _0047_[12] = _1062_[4];
  assign _0047_[11] = _1062_[3];
  assign _0047_[10] = _1062_[2];
  assign _0047_[9] = _1062_[1];
  assign _0047_[8] = _1062_[0];
  assign _0047_[7] = _1072_[7];
  assign _0047_[6] = _1072_[6];
  assign _0047_[5] = _1072_[5];
  assign _0047_[4] = _1072_[4];
  assign _0047_[3] = _1072_[3];
  assign _0047_[2] = _1072_[2];
  assign _0047_[1] = _1072_[1];
  assign _0047_[0] = _1072_[0];
  assign _0048_[31] = _1042_[31];
  assign _0048_[30] = _1042_[30];
  assign _0048_[29] = _1042_[29];
  assign _0048_[28] = _1042_[28];
  assign _0048_[27] = _1042_[27];
  assign _0048_[26] = _1042_[26];
  assign _0048_[25] = _1042_[25];
  assign _0048_[24] = _1042_[24];
  assign _0048_[23] = _1042_[23];
  assign _0048_[22] = _1042_[22];
  assign _0048_[21] = _1042_[21];
  assign _0048_[20] = _1042_[20];
  assign _0048_[19] = _1042_[19];
  assign _0048_[18] = _1042_[18];
  assign _0048_[17] = _1042_[17];
  assign _0048_[16] = _1042_[16];
  assign _0048_[15] = _1042_[15];
  assign _0048_[14] = _1042_[14];
  assign _0048_[13] = _1042_[13];
  assign _0048_[12] = _1042_[12];
  assign _0048_[11] = _1042_[11];
  assign _0048_[10] = _1042_[10];
  assign _0048_[9] = _1042_[9];
  assign _0048_[8] = _1042_[8];
  assign _0048_[7] = _1042_[7];
  assign _0048_[6] = _1042_[6];
  assign _0048_[5] = _1042_[5];
  assign _0048_[4] = _1042_[4];
  assign _0048_[3] = _1042_[3];
  assign _0048_[2] = _1042_[2];
  assign _0048_[1] = _1042_[1];
  assign _0048_[0] = _1042_[0];
  assign _0049_ = _0983_;
  assign _0050_ = _0940_;
  assign _0051_ = _1104_;
  assign _0052_ = RxEn;
  assign _0053_ = _1009_;
  assign _0054_ = _0997_;
  assign _0055_[1] = _1113_[1];
  assign _0055_[0] = _1113_[0];
  assign _0056_[29] = _1117_[29];
  assign _0056_[28] = _1117_[28];
  assign _0056_[27] = _1117_[27];
  assign _0056_[26] = _1117_[26];
  assign _0056_[25] = _1117_[25];
  assign _0056_[24] = _1117_[24];
  assign _0056_[23] = _1117_[23];
  assign _0056_[22] = _1117_[22];
  assign _0056_[21] = _1117_[21];
  assign _0056_[20] = _1117_[20];
  assign _0056_[19] = _1117_[19];
  assign _0056_[18] = _1117_[18];
  assign _0056_[17] = _1117_[17];
  assign _0056_[16] = _1117_[16];
  assign _0056_[15] = _1117_[15];
  assign _0056_[14] = _1117_[14];
  assign _0056_[13] = _1117_[13];
  assign _0056_[12] = _1117_[12];
  assign _0056_[11] = _1117_[11];
  assign _0056_[10] = _1117_[10];
  assign _0056_[9] = _1117_[9];
  assign _0056_[8] = _1117_[8];
  assign _0056_[7] = _1117_[7];
  assign _0056_[6] = _1117_[6];
  assign _0056_[5] = _1117_[5];
  assign _0056_[4] = _1117_[4];
  assign _0056_[3] = _1117_[3];
  assign _0056_[2] = _1117_[2];
  assign _0056_[1] = _1117_[1];
  assign _0056_[0] = _1117_[0];
  assign _0057_ = _1121_;
  assign _0058_ = _1125_;
  assign _0059_[8] = _0999_[8];
  assign _0059_[7] = _0999_[7];
  assign _0059_[6] = _0999_[6];
  assign _0059_[5] = _0999_[5];
  assign _0059_[4] = _0999_[4];
  assign _0059_[3] = _0999_[3];
  assign _0059_[2] = _0999_[2];
  assign _0059_[1] = _0999_[1];
  assign _0059_[0] = _0999_[0];
  assign _0060_ = _0993_;
  assign _0061_ = RxStatusWriteLatched;
  assign _0062_ = RxStatusWriteLatched_sync1;
  assign _0063_ = RxStatusWriteLatched_sync2;
  assign _0064_ = RxStatusWriteLatched_syncb1;
  assign _0065_[1] = _1127_[1];
  assign _0065_[0] = _1127_[0];
  assign _0066_[1] = _1081_[1];
  assign _0066_[0] = _1081_[0];
  assign _0067_ = ShiftEnded_rck;
  assign _0068_ = ShiftEndedSync1;
  assign _0069_ = _1017_;
  assign _0070_ = ShiftEndedSync2;
  assign _0071_ = ShiftEndedSync_c1;
  assign _0072_ = _1013_;
  assign _0073_ = _1021_;
  assign _0074_ = _1096_;
  assign _0075_ = _0688_;
  assign _0076_ = _1023_;
  assign _0077_ = SyncRxStartFrm_q;
  assign _0078_ = SyncRxStartFrm;
  assign _0079_ = _0656_;
  assign _0080_ = _0662_;
  assign _0081_ = _0660_;
  assign _0082_ = TxAbort;
  assign _0083_ = TxAbort;
  assign _0084_ = TxAbortSync1;
  assign _0085_ = TxAbort_wb;
  assign _0086_[6] = _0670_[6];
  assign _0086_[5] = _0670_[5];
  assign _0086_[4] = _0670_[4];
  assign _0086_[3] = _0670_[3];
  assign _0086_[2] = _0670_[2];
  assign _0086_[1] = _0670_[1];
  assign _0086_[0] = _0670_[0];
  assign _0087_ = _0897_;
  assign _0088_ = _0901_;
  assign _0089_ = _0989_;
  assign _0090_[1] = _0589_[1];
  assign _0090_[0] = _0589_[0];
  assign _0091_[31] = _0603_[31];
  assign _0091_[30] = _0603_[30];
  assign _0091_[29] = _0603_[29];
  assign _0091_[28] = _0603_[28];
  assign _0091_[27] = _0603_[27];
  assign _0091_[26] = _0603_[26];
  assign _0091_[25] = _0603_[25];
  assign _0091_[24] = _0603_[24];
  assign _0091_[23] = _0603_[23];
  assign _0091_[22] = _0603_[22];
  assign _0091_[21] = _0603_[21];
  assign _0091_[20] = _0603_[20];
  assign _0091_[19] = _0603_[19];
  assign _0091_[18] = _0603_[18];
  assign _0091_[17] = _0603_[17];
  assign _0091_[16] = _0603_[16];
  assign _0091_[15] = _0603_[15];
  assign _0091_[14] = _0603_[14];
  assign _0091_[13] = _0603_[13];
  assign _0091_[12] = _0603_[12];
  assign _0091_[11] = _0603_[11];
  assign _0091_[10] = _0603_[10];
  assign _0091_[9] = _0603_[9];
  assign _0091_[8] = _0603_[8];
  assign _0091_[7] = _0603_[7];
  assign _0091_[6] = _0603_[6];
  assign _0091_[5] = _0603_[5];
  assign _0091_[4] = _0603_[4];
  assign _0091_[3] = _0603_[3];
  assign _0091_[2] = _0603_[2];
  assign _0091_[1] = _0603_[1];
  assign _0091_[0] = _0603_[0];
  assign _0092_[7] = _0619_[7];
  assign _0092_[6] = _0619_[6];
  assign _0092_[5] = _0619_[5];
  assign _0092_[4] = _0619_[4];
  assign _0092_[3] = _0619_[3];
  assign _0092_[2] = _0619_[2];
  assign _0092_[1] = _0619_[1];
  assign _0092_[0] = _0619_[0];
  assign _0093_ = _0636_;
  assign _0094_ = _0642_;
  assign _0095_ = _0640_;
  assign _0096_ = TxDone;
  assign _0097_ = TxDoneSync1;
  assign _0098_ = TxDone_wb;
  assign _0099_ = _0987_;
  assign _0100_ = _0929_;
  assign _0101_ = _0977_;
  assign _0102_ = TxEn;
  assign _0103_ = _0628_;
  assign _0104_ = _0680_;
  assign _0105_[15] = _0879_[15];
  assign _0105_[14] = _0879_[14];
  assign _0105_[13] = _0879_[13];
  assign _0105_[12] = _0879_[12];
  assign _0105_[11] = _0879_[11];
  assign _0105_[10] = _0879_[10];
  assign _0105_[9] = _0879_[9];
  assign _0105_[8] = _0879_[8];
  assign _0105_[7] = _0879_[7];
  assign _0105_[6] = _0879_[6];
  assign _0105_[5] = _0879_[5];
  assign _0105_[4] = _0879_[4];
  assign _0105_[3] = _0879_[3];
  assign _0105_[2] = _0879_[2];
  assign _0105_[1] = _0879_[1];
  assign _0105_[0] = _0879_[0];
  assign _0106_[1] = _0859_[1];
  assign _0106_[0] = _0859_[0];
  assign _0107_[1] = _0857_[1];
  assign _0107_[0] = _0857_[0];
  assign _0108_[29] = _0863_[29];
  assign _0108_[28] = _0863_[28];
  assign _0108_[27] = _0863_[27];
  assign _0108_[26] = _0863_[26];
  assign _0108_[25] = _0863_[25];
  assign _0108_[24] = _0863_[24];
  assign _0108_[23] = _0863_[23];
  assign _0108_[22] = _0863_[22];
  assign _0108_[21] = _0863_[21];
  assign _0108_[20] = _0863_[20];
  assign _0108_[19] = _0863_[19];
  assign _0108_[18] = _0863_[18];
  assign _0108_[17] = _0863_[17];
  assign _0108_[16] = _0863_[16];
  assign _0108_[15] = _0863_[15];
  assign _0108_[14] = _0863_[14];
  assign _0108_[13] = _0863_[13];
  assign _0108_[12] = _0863_[12];
  assign _0108_[11] = _0863_[11];
  assign _0108_[10] = _0863_[10];
  assign _0108_[9] = _0863_[9];
  assign _0108_[8] = _0863_[8];
  assign _0108_[7] = _0863_[7];
  assign _0108_[6] = _0863_[6];
  assign _0108_[5] = _0863_[5];
  assign _0108_[4] = _0863_[4];
  assign _0108_[3] = _0863_[3];
  assign _0108_[2] = _0863_[2];
  assign _0108_[1] = _0863_[1];
  assign _0108_[0] = _0863_[0];
  assign _0109_ = _0893_;
  assign _0110_ = _0646_;
  assign _0111_ = _0652_;
  assign _0112_ = _0650_;
  assign _0113_ = TxRetry;
  assign _0114_ = TxRetry;
  assign _0115_ = TxRetrySync1;
  assign _0116_ = TxRetry_wb;
  assign _0117_ = _0684_;
  assign _0118_ = TxStartFrm_wb;
  assign _0119_ = TxStartFrm_sync1;
  assign _0120_ = TxStartFrm_sync2;
  assign _0121_ = TxStartFrm_syncb1;
  assign _0122_ = _0692_;
  assign _0123_[3] = _0881_[3];
  assign _0123_[2] = _0881_[2];
  assign _0123_[1] = _0881_[1];
  assign _0123_[0] = _0881_[0];
  assign _0124_ = _0593_;
  assign _0125_ = _0597_;
  assign _0126_ = _0601_;
  assign _0127_ = TxUsedData;
  assign _0128_[1] = _0674_[1];
  assign _0128_[0] = _0674_[0];
  assign _0129_ = _0572_;
  assign _0130_ = _0951_;
  assign _0131_ = WbEn;
  assign _0132_ = _1029_;
  assign _0133_ = WriteRxDataToFifoSync1;
  assign _0134_ = WriteRxDataToFifoSync2;
  assign _0135_ = _1033_;
  assign _0136_ = _0709_;
  assign _0137_[29] = _0828_[29];
  assign _0137_[28] = _0828_[28];
  assign _0137_[27] = _0828_[27];
  assign _0137_[26] = _0828_[26];
  assign _0137_[25] = _0828_[25];
  assign _0137_[24] = _0828_[24];
  assign _0137_[23] = _0828_[23];
  assign _0137_[22] = _0828_[22];
  assign _0137_[21] = _0828_[21];
  assign _0137_[20] = _0828_[20];
  assign _0137_[19] = _0828_[19];
  assign _0137_[18] = _0828_[18];
  assign _0137_[17] = _0828_[17];
  assign _0137_[16] = _0828_[16];
  assign _0137_[15] = _0828_[15];
  assign _0137_[14] = _0828_[14];
  assign _0137_[13] = _0828_[13];
  assign _0137_[12] = _0828_[12];
  assign _0137_[11] = _0828_[11];
  assign _0137_[10] = _0828_[10];
  assign _0137_[9] = _0828_[9];
  assign _0137_[8] = _0828_[8];
  assign _0137_[7] = _0828_[7];
  assign _0137_[6] = _0828_[6];
  assign _0137_[5] = _0828_[5];
  assign _0137_[4] = _0828_[4];
  assign _0137_[3] = _0828_[3];
  assign _0137_[2] = _0828_[2];
  assign _0137_[1] = _0828_[1];
  assign _0137_[0] = _0828_[0];
  assign _0138_[2] = _0778_[2];
  assign _0138_[1] = _0778_[1];
  assign _0138_[0] = _0778_[0];
  assign _0139_ = _0791_;
  assign _0140_[3] = _0817_[3];
  assign _0140_[2] = _0817_[2];
  assign _0140_[1] = _0817_[1];
  assign _0140_[0] = _0817_[0];
  assign _0141_ = _0806_;
  assign _0142_ = r_RxEn;
  assign _0143_ = r_TxEn;
  assign _0144_[7] = _0918_[7];
  assign _0144_[6] = _0918_[6];
  assign _0144_[5] = _0918_[5];
  assign _0144_[4] = _0918_[4];
  assign _0144_[3] = _0918_[3];
  assign _0144_[2] = _0918_[2];
  assign _0144_[1] = _0918_[1];
  assign _0144_[0] = _0918_[0];
  assign _0145_[31] = _0907_[31];
  assign _0145_[30] = _0907_[30];
  assign _0145_[29] = _0907_[29];
  assign _0145_[28] = _0907_[28];
  assign _0145_[27] = _0907_[27];
  assign _0145_[26] = _0907_[26];
  assign _0145_[25] = _0907_[25];
  assign _0145_[24] = _0907_[24];
  assign _0145_[23] = _0907_[23];
  assign _0145_[22] = _0907_[22];
  assign _0145_[21] = _0907_[21];
  assign _0145_[20] = _0907_[20];
  assign _0145_[19] = _0907_[19];
  assign _0145_[18] = _0907_[18];
  assign _0145_[17] = _0907_[17];
  assign _0145_[16] = _0907_[16];
  assign _0145_[15] = _0907_[15];
  assign _0145_[14] = _0907_[14];
  assign _0145_[13] = _0907_[13];
  assign _0145_[12] = _0907_[12];
  assign _0145_[11] = _0907_[11];
  assign _0145_[10] = _0907_[10];
  assign _0145_[9] = _0907_[9];
  assign _0145_[8] = _0907_[8];
  assign _0145_[7] = _0907_[7];
  assign _0145_[6] = _0907_[6];
  assign _0145_[5] = _0907_[5];
  assign _0145_[4] = _0907_[4];
  assign _0145_[3] = _0907_[3];
  assign _0145_[2] = _0907_[2];
  assign _0145_[1] = _0907_[1];
  assign _0145_[0] = _0907_[0];
  assign _0146_[2] = _0748_[2];
  assign _0146_[1] = _0748_[1];
  assign _0146_[0] = _0748_[0];
  assign _0147_ = _0761_;
  assign _0148_[2] = _0755_[2];
  assign _0148_[1] = _0755_[1];
  assign _0148_[0] = _0755_[0];
  assign _0149_ = _0770_;
  assign _0150_[3] = RxByteSel[3];
  assign _0150_[2] = RxByteSel[2];
  assign _0150_[1] = RxByteSel[1];
  assign _0150_[0] = RxByteSel[0];
  assign _0163_ = _0866_;
  assign _0165_ = _0864_;
  assign _0166_ = _0862_;
  assign _0168_ = _0860_;
  assign _0170_ = _0858_;
  assign _0171_ = _0856_;
  assign _0173_ = SetReadTxDataFromMemory;
  assign _0174_ = ReadTxDataFromMemory_2;
  assign _0175_ = tx_burst;
  assign _0178_ = _0846_;
  assign _0184_ = _0693_;
  assign _0189_ = _0681_;
  assign _0190_ = _0677_;
  assign _0191_ = _0675_;
  assign _0193_[6] = TempTxBDAddress[7];
  assign _0193_[5] = TempTxBDAddress[6];
  assign _0193_[4] = TempTxBDAddress[5];
  assign _0193_[3] = TempTxBDAddress[4];
  assign _0193_[2] = TempTxBDAddress[3];
  assign _0193_[1] = TempTxBDAddress[2];
  assign _0193_[0] = TempTxBDAddress[1];
  assign _0196_ = _0671_;
  assign _0197_ = _0667_;
  assign _0198_ = TxRetryPulse;
  assign _0199_ = TxDonePulse;
  assign _0200_ = TxAbortPulse;
  assign _0208_ = _0661_;
  assign _0215_ = _0657_;
  assign _0228_ = _0647_;
  assign _0236_ = _0641_;
  assign _0243_ = _0637_;
  assign _0244_ = _0633_;
  assign _0246_ = _0631_;
  assign _0248_ = _0627_;
  assign _0249_ = _0620_;
  assign _0251_ = _0613_;
  assign _0252_ = _0611_;
  assign _0259_ = _0600_;
  assign _0260_ = _0588_;
  assign _0261_ = _1142_;
  assign _0269_ = _1138_;
  assign _0270_ = ReadTxDataFromFifo_wb;
  assign _0273_ = _1136_;
  assign _0275_ = _1130_;
  assign _0277_ = _1128_;
  assign _0281_ = _1124_;
  assign _0282_ = StartRxPointerRead;
  assign _0283_ = _1120_;
  assign _0285_ = _1118_;
  assign _0286_ = _1116_;
  assign _0287_ = _1114_;
  assign _0289_ = _1112_;
  assign _0292_ = _1105_;
  assign _0294_ = _1103_;
  assign _0296_ = RxStatusWrite;
  assign _0301_ = _1099_;
  assign _0306_ = _1091_;
  assign _0309_ = _1082_;
  assign _0312_ = _1075_;
  assign _0314_ = _1073_;
  assign _0315_ = _1043_;
  assign _0316_ = _1041_;
  assign _0326_ = _1034_;
  assign _0327_ = WriteRxDataToFifo_wb;
  assign _0328_ = _1028_;
  assign _0329_ = RxFifoReset;
  assign _0332_ = rx_burst;
  assign _0334_ = _1022_;
  assign _0336_ = _1018_;
  assign _0340_ = _1014_;
  assign _0341_ = _0996_;
  assign _0342_ = _0990_;
  assign _0343_ = _0988_;
  assign _0346_ = _0986_;
  assign _0352_ = _0984_;
  assign _0354_ = _0982_;
  assign _0355_ = Busy_IRQ;
  assign _0370_ = _0978_;
  assign _0372_ = _0976_;
  assign _0380_ = _0902_;
  assign _0383_ = StartTxBDRead;
  assign _0384_ = StartTxPointerRead;
  assign _0387_ = TxStatusWrite;
  assign _0388_ = _0890_;
  assign _0389_ = RstDeferLatched;
  assign _0390_ = _0884_;
  assign _0392_ = _0882_;
  assign _0394_ = _0880_;
  assign _0395_ = _0878_;
  assign _0396_ = _0872_;
  assign _0397_ = _0870_;
  assign _0398_ = _0868_;
  assign _0399_ = TxLengthEq0;
  assign _0400_ = _0840_;
  assign _0401_ = _0788_;
  assign _0402_ = _0836_;
  assign _0403_ = _0784_;
  assign _0414_ = _0874_;
  assign _0415_ = enough_data_in_rxfifo_for_burst;
  assign _0418_ = enough_data_in_rxfifo_for_burst_plus1;
  assign _0439_ = TxLengthLt4;
  assign _0493_ = WriteRxDataToMemory;
  assign _0521_ = _0850_;
  assign _0526_ = _0844_;
  assign _0527_ = MasterAccessFinished;
  assign _0528_ = TxFifoClear;
  assign _0530_ = _0683_;
  assign _0533_ = _0679_;
  assign _0535_ = _0673_;
  assign _0536_[6] = TempRxBDAddress[7];
  assign _0536_[5] = TempRxBDAddress[6];
  assign _0536_[4] = TempRxBDAddress[5];
  assign _0536_[3] = TempRxBDAddress[4];
  assign _0536_[2] = TempRxBDAddress[3];
  assign _0536_[1] = TempRxBDAddress[2];
  assign _0536_[0] = TempRxBDAddress[1];
  assign _0537_ = _0663_;
  assign _0538_ = _0659_;
  assign _0539_ = _0653_;
  assign _0540_ = _0649_;
  assign _0541_ = _0643_;
  assign _0542_ = _0639_;
  assign _0546_ = _0629_;
  assign _0548_ = _0604_;
  assign _0549_ = _0590_;
  assign _0551_ = _1140_;
  assign _0553_ = StartRxBDRead;
  assign _0555_ = _1126_;
  assign _0556_ = _1101_;
  assign _0557_ = StartShiftWillEnd;
  assign _0558_ = _1097_;
  assign _0559_ = _1093_;
  assign _0560_ = _1084_;
  assign _0562_ = SetWriteRxDataToFifo;
  assign _0563_ = _1032_;
  assign _0564_ = _1020_;
  assign _0565_ = _1008_;
  assign _0568_ = TxError;
  assign _0569_ = RxError;
  assign _0573_[3] = ram_we[3];
  assign _0573_[2] = ram_we[2];
  assign _0573_[1] = ram_we[1];
  assign _0573_[0] = ram_we[0];
  assign _0576_ = ram_oe;
  assign _0580_ = _0906_;
  assign _0582_ = ResetTxBDReady;
  assign _0592_ = TxUnderRun_sync1;
  assign _0594_ = BlockingTxStatusWrite_sync2;
  assign _0596_ = BlockingTxStatusWrite_sync2;
  assign _0598_ = TxUnderRun_wb;
  assign _0602_ = TxAbortPulse;
  assign _0635_ = TxDonePacket;
  assign _0645_ = TxRetryPacket;
  assign _0651_ = StartTxBDRead;
  assign _0655_ = TxAbortPacket;
  assign _0665_ = RxStatusWrite;
  assign _0669_ = TxStatusWrite;
  assign _0685_ = TxStartFrm_sync2;
  assign _0687_ = ResetTxBDReady;
  assign _0689_ = TxStartFrm_wb;
  assign _0691_ = TxStartFrm_syncb2;
  assign _0767_ = _0784_;
  assign _0775_ = _0788_;
  assign _0848_ = SetReadTxDataFromMemory;
  assign _0852_ = IncrTxPointer;
  assign _0854_ = MasterAccessFinished;
  assign _0876_ = TxLengthLt4;
  assign _0886_ = StartTxBDRead;
  assign _0888_ = TxStatusWrite;
  assign _0892_ = TxEn_q;
  assign _0894_ = StartTxPointerRead;
  assign _0896_ = TxBDReady;
  assign _0898_ = StartTxBDRead;
  assign _0900_ = ResetTxBDReady;
  assign _0904_ = TxUsedData;
  assign _0980_ = Busy_IRQ_syncb2;
  assign _0992_ = RxStatusWrite;
  assign _0994_ = RxStatusWriteLatched_syncb2;
  assign _0998_ = RxStatusWrite;
  assign _1000_ = LoadRxStatus;
  assign _1002_ = LoadRxStatus;
  assign _1004_ = RxAbort;
  assign _1006_ = RxAbortSyncb2;
  assign _1010_ = RxStartFrm;
  assign _1012_ = RxStatusWrite;
  assign _1016_ = ShiftEnded;
  assign _1024_ = LatchedRxStartFrm;
  assign _1026_ = SyncRxStartFrm_q;
  assign _1030_ = WriteRxDataToFifo;
  assign _1047_ = RxEnableWindow;
  assign _1051_ = RxStartFrm;
  assign _1053_ = _1073_;
  assign _1057_ = RxEnableWindow;
  assign _1061_ = RxStartFrm;
  assign _1063_ = _1073_;
  assign _1067_ = RxEnableWindow;
  assign _1071_ = RxStartFrm;
  assign _1095_ = StartShiftWillEnd;
  assign _1106_[3] = RxByteSel[3];
  assign _1106_[2] = RxByteSel[2];
  assign _1106_[1] = RxByteSel[1];
  assign _1106_[0] = RxByteSel[0];
  assign _1122_ = StartRxPointerRead;
  assign _1132_ = RxPointerRead;
  assign _1134_ = RxBDReady;
  assign _1164_[1] = TxValidBytes[1];
  assign _1164_[0] = TxValidBytes[0];
  assign LatchedRxLength[15] = RxBDDataIn[31];
  assign LatchedRxLength[14] = RxBDDataIn[30];
  assign LatchedRxLength[13] = RxBDDataIn[29];
  assign LatchedRxLength[12] = RxBDDataIn[28];
  assign LatchedRxLength[11] = RxBDDataIn[27];
  assign LatchedRxLength[10] = RxBDDataIn[26];
  assign LatchedRxLength[9] = RxBDDataIn[25];
  assign LatchedRxLength[8] = RxBDDataIn[24];
  assign LatchedRxLength[7] = RxBDDataIn[23];
  assign LatchedRxLength[6] = RxBDDataIn[22];
  assign LatchedRxLength[5] = RxBDDataIn[21];
  assign LatchedRxLength[4] = RxBDDataIn[20];
  assign LatchedRxLength[3] = RxBDDataIn[19];
  assign LatchedRxLength[2] = RxBDDataIn[18];
  assign LatchedRxLength[1] = RxBDDataIn[17];
  assign LatchedRxLength[0] = RxBDDataIn[16];
  assign LatchedTxLength[15] = TxBDDataIn[31];
  assign LatchedTxLength[14] = TxBDDataIn[30];
  assign LatchedTxLength[13] = TxBDDataIn[29];
  assign LatchedTxLength[12] = TxBDDataIn[28];
  assign LatchedTxLength[11] = TxBDDataIn[27];
  assign LatchedTxLength[10] = TxBDDataIn[26];
  assign LatchedTxLength[9] = TxBDDataIn[25];
  assign LatchedTxLength[8] = TxBDDataIn[24];
  assign LatchedTxLength[7] = TxBDDataIn[23];
  assign LatchedTxLength[6] = TxBDDataIn[22];
  assign LatchedTxLength[5] = TxBDDataIn[21];
  assign LatchedTxLength[4] = TxBDDataIn[20];
  assign LatchedTxLength[3] = TxBDDataIn[19];
  assign LatchedTxLength[2] = TxBDDataIn[18];
  assign LatchedTxLength[1] = TxBDDataIn[17];
  assign LatchedTxLength[0] = TxBDDataIn[16];
  assign RxBDDataIn[15] = 1'h0;
  assign RxBDDataIn[14] = RxStatus[14];
  assign RxBDDataIn[13] = WrapRxStatusBit;
  assign RxBDDataIn[12] = 1'h0;
  assign RxBDDataIn[11] = 1'h0;
  assign RxBDDataIn[10] = 1'h0;
  assign RxBDDataIn[9] = 1'h0;
  assign RxBDDataIn[8] = RxStatusInLatched[8];
  assign RxBDDataIn[7] = RxStatusInLatched[7];
  assign RxBDDataIn[6] = RxStatusInLatched[6];
  assign RxBDDataIn[5] = RxStatusInLatched[5];
  assign RxBDDataIn[4] = RxStatusInLatched[4];
  assign RxBDDataIn[3] = RxStatusInLatched[3];
  assign RxBDDataIn[2] = RxStatusInLatched[2];
  assign RxBDDataIn[1] = RxStatusInLatched[1];
  assign RxBDDataIn[0] = RxStatusInLatched[0];
  assign RxIRQEn = RxStatus[14];
  assign RxOverrun = RxStatusIn[6];
  assign RxStatus[13] = WrapRxStatusBit;
  assign RxStatusIn[8] = ReceivedPauseFrm;
  assign RxStatusIn[7] = AddressMiss;
  assign RxStatusIn[5] = InvalidSymbol;
  assign RxStatusIn[4] = DribbleNibble;
  assign RxStatusIn[3] = ReceivedPacketTooBig;
  assign RxStatusIn[2] = ShortFrame;
  assign RxStatusIn[1] = LatchedCrcError;
  assign RxStatusIn[0] = RxLateCollision;
  assign TxBDDataIn[15] = 1'h0;
  assign TxBDDataIn[14] = TxStatus[14];
  assign TxBDDataIn[13] = WrapTxStatusBit;
  assign TxBDDataIn[12] = PerPacketPad;
  assign TxBDDataIn[11] = PerPacketCrcEn;
  assign TxBDDataIn[10] = 1'h0;
  assign TxBDDataIn[9] = 1'h0;
  assign TxBDDataIn[8] = TxUnderRun;
  assign TxBDDataIn[7] = RetryCntLatched[3];
  assign TxBDDataIn[6] = RetryCntLatched[2];
  assign TxBDDataIn[5] = RetryCntLatched[1];
  assign TxBDDataIn[4] = RetryCntLatched[0];
  assign TxBDDataIn[3] = RetryLimit;
  assign TxBDDataIn[2] = LateCollLatched;
  assign TxBDDataIn[1] = DeferLatched;
  assign TxBDDataIn[0] = CarrierSenseLost;
  assign TxIRQEn = TxStatus[14];
  assign TxStatus[13] = WrapTxStatusBit;
  assign TxStatus[12] = PerPacketPad;
  assign TxStatus[11] = PerPacketCrcEn;
  assign TxStatusInLatched[8] = TxUnderRun;
  assign TxStatusInLatched[7] = RetryCntLatched[3];
  assign TxStatusInLatched[6] = RetryCntLatched[2];
  assign TxStatusInLatched[5] = RetryCntLatched[1];
  assign TxStatusInLatched[4] = RetryCntLatched[0];
  assign TxStatusInLatched[3] = RetryLimit;
  assign TxStatusInLatched[2] = LateCollLatched;
  assign TxStatusInLatched[1] = DeferLatched;
  assign TxStatusInLatched[0] = CarrierSenseLost;
  assign ram_ce = 1'h1;
  assign ram_do[31] = WB_DAT_O[31];
  assign ram_do[30] = WB_DAT_O[30];
  assign ram_do[29] = WB_DAT_O[29];
  assign ram_do[28] = WB_DAT_O[28];
  assign ram_do[27] = WB_DAT_O[27];
  assign ram_do[26] = WB_DAT_O[26];
  assign ram_do[25] = WB_DAT_O[25];
  assign ram_do[24] = WB_DAT_O[24];
  assign ram_do[23] = WB_DAT_O[23];
  assign ram_do[22] = WB_DAT_O[22];
  assign ram_do[21] = WB_DAT_O[21];
  assign ram_do[20] = WB_DAT_O[20];
  assign ram_do[19] = WB_DAT_O[19];
  assign ram_do[18] = WB_DAT_O[18];
  assign ram_do[17] = WB_DAT_O[17];
  assign ram_do[16] = WB_DAT_O[16];
  assign ram_do[15] = WB_DAT_O[15];
  assign ram_do[14] = WB_DAT_O[14];
  assign ram_do[13] = WB_DAT_O[13];
  assign ram_do[12] = WB_DAT_O[12];
  assign ram_do[11] = WB_DAT_O[11];
  assign ram_do[10] = WB_DAT_O[10];
  assign ram_do[9] = WB_DAT_O[9];
  assign ram_do[8] = WB_DAT_O[8];
  assign ram_do[7] = WB_DAT_O[7];
  assign ram_do[6] = WB_DAT_O[6];
  assign ram_do[5] = WB_DAT_O[5];
  assign ram_do[4] = WB_DAT_O[4];
  assign ram_do[3] = WB_DAT_O[3];
  assign ram_do[2] = WB_DAT_O[2];
  assign ram_do[1] = WB_DAT_O[1];
  assign ram_do[0] = WB_DAT_O[0];
  assign m_wb_bte_o[1] = 1'h0;
  assign m_wb_bte_o[0] = 1'h0;
  assign m_wb_stb_o = m_wb_cyc_o;
endmodule
