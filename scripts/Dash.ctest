cmake_minimum_required (VERSION 3.22 FATAL_ERROR)

if(NOT DEFINED DUCODE_ROOT)
	set (DUCODE_ROOT "${CMAKE_CURRENT_LIST_DIR}/..")
endif()

set (CTEST_SOURCE_DIRECTORY "${DUCODE_ROOT}")
set (CTEST_BINARY_DIRECTORY "${DUCODE_ROOT}/build")

if(NOT DEFINED MODEL)
	set (MODEL Nightly)
endif()

message (STATUS "Running model '${MODEL}'...")

if(NOT DEFINED CTEST_CONFIGURATION_TYPE)
	set (CTEST_CONFIGURATION_TYPE Debug)
endif()

message (STATUS "Building configuration '${CTEST_CONFIGURATION_TYPE}'...")

execute_process (
  COMMAND git branch --show-current
  WORKING_DIRECTORY ${CTEST_SOURCE_DIRECTORY}
  OUTPUT_VARIABLE GIT_BRANCH
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

if($ENV{GITLAB_CI})
	set (CTEST_SITE "GitlabCI.${CMAKE_SYSTEM_NAME}")
else()
	site_name (CTEST_SITE)
endif()

if (NOT GIT_BRANCH)
    set (GIT_BRANCH $ENV{CI_MERGE_REQUEST_SOURCE_BRANCH_NAME})
endif()
if (NOT GIT_BRANCH)
    set (GIT_BRANCH $ENV{CI_COMMIT_BRANCH})
endif()

message (STATUS "Current branch: ${GIT_BRANCH}")

set (CTEST_BUILD_NAME "${GIT_BRANCH}.${CTEST_CONFIGURATION_TYPE}")

ctest_start ("${MODEL}")

set (CTEST_USE_LAUNCHERS ON)
set (CTEST_CONFIGURE_COMMAND "${CMAKE_COMMAND} -G Ninja -D CMAKE_BUILD_TYPE:STRING=${CTEST_CONFIGURATION_TYPE} -D Boost_NO_WARN_NEW_VERSIONS=ON -D ENABLE_COVERAGE=ON -S ${CTEST_SOURCE_DIRECTORY} -B ${CTEST_BINARY_DIRECTORY}")
ctest_configure()

include (ProcessorCount)

ProcessorCount (num_cores)

if(NOT "${num_cores}" GREATER 0)
	set (num_cores 4)
endif()

set(CTEST_BUILD_COMMAND "${CMAKE_COMMAND} --build ${CTEST_BINARY_DIRECTORY} --target tester")
ctest_build (PARALLEL_LEVEL "${num_cores}")

ctest_test (PARALLEL_LEVEL "${num_cores}"
            RETURN_VALUE test_result
			SCHEDULE_RANDOM ON
			OUTPUT_JUNIT "testreport.xml")

set (CTEST_COVERAGE_COMMAND gcov)
set (CTEST_COVERAGE_EXTRA_FLAGS -p)
list (APPEND CTEST_CUSTOM_COVERAGE_EXCLUDE "vcpkg*")
ctest_coverage()

ctest_submit()

if (test_result)
  message(FATAL_ERROR "Failed to test")
endif ()